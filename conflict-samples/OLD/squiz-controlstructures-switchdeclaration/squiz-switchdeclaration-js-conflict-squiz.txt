PHP 7.2.11 (cli) (built: Oct 10 2018 02:39:52) ( ZTS MSVC15 (Visual C++ 2017) x86 )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies
    with Xdebug v2.6.0, Copyright (c) 2002-2018, by Derick Rethans

PHP_CodeSniffer version 3.4.0 (stable) by Squiz (http://www.squiz.net)

Processing ruleset D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\ruleset.xml
	Adding sniff files from D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs directory
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Arrays\ArrayBracketSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Classes\ClassDeclarationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Classes\ClassFileNameSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Classes\DuplicatePropertySniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Classes\LowercaseClassKeywordsSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Classes\SelfMemberReferenceSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Classes\ValidClassNameSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\BlockCommentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\ClassCommentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\ClosingDeclarationCommentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\DocCommentAlignmentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\EmptyCatchCommentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\FileCommentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\FunctionCommentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\FunctionCommentThrowTagSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\InlineCommentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\LongConditionClosingCommentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\PostStatementCommentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\VariableCommentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\ControlStructures\ControlSignatureSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\ControlStructures\ElseIfDeclarationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\ControlStructures\ForEachLoopDeclarationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\ControlStructures\ForLoopDeclarationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\ControlStructures\InlineIfDeclarationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\ControlStructures\LowercaseDeclarationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\ClassDefinitionClosingBraceSpaceSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\ClassDefinitionNameSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\ClassDefinitionOpeningBraceSpaceSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\ColonSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\ColourDefinitionSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\DisallowMultipleStyleDefinitionsSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\DuplicateClassDefinitionSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\DuplicateStyleDefinitionSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\EmptyClassDefinitionSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\EmptyStyleDefinitionSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\ForbiddenStylesSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\IndentationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\LowercaseStyleDefinitionSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\MissingColonSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\NamedColoursSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\OpacitySniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\SemicolonSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\CSS\ShorthandSizeSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Debug\JavaScriptLintSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Debug\JSLintSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Files\FileExtensionSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Formatting\OperatorBracketSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Functions\FunctionDeclarationArgumentSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Functions\FunctionDeclarationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Functions\FunctionDuplicateArgumentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Functions\GlobalFunctionSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Functions\LowercaseFunctionKeywordsSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Functions\MultiLineFunctionDeclarationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\NamingConventions\ValidFunctionNameSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\NamingConventions\ValidVariableNameSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Objects\DisallowObjectStringIndexSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Objects\ObjectInstantiationSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Objects\ObjectMemberCommaSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Operators\ComparisonOperatorUsageSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Operators\IncrementDecrementUsageSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Operators\ValidLogicalOperatorsSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\CommentedOutCodeSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\DisallowBooleanStatementSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\DisallowComparisonAssignmentSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\DisallowInlineIfSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\DisallowMultipleAssignmentsSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\DisallowSizeFunctionsInLoopsSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\DiscouragedFunctionsSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\EmbeddedPhpSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\EvalSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\GlobalKeywordSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\HeredocSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\InnerFunctionsSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\LowercasePHPFunctionsSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\PHP\NonExecutableCodeSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Scope\MemberVarScopeSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Scope\MethodScopeSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Scope\StaticThisUsageSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Strings\ConcatenationSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Strings\DoubleQuoteUsageSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Strings\EchoedStringsSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\CastSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\FunctionClosingBraceSpaceSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\FunctionOpeningBraceSpaceSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\FunctionSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\LanguageConstructSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\LogicalOperatorSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\MemberVarSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\ObjectOperatorSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\OperatorSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\PropertyLabelSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\ScopeClosingBraceSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\ScopeKeywordSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\SemicolonSpacingSniff.php
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff.php
	Processing rule "Generic.Arrays.DisallowLongArraySyntax"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Arrays\DisallowLongArraySyntaxSniff.php
	Processing rule "Generic.CodeAnalysis.EmptyStatement"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\CodeAnalysis\EmptyStatementSniff.php
	Processing rule "Generic.Commenting.Todo"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Commenting\TodoSniff.php
	Processing rule "Generic.Commenting.DocComment"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Commenting\DocCommentSniff.php
	Processing rule "Generic.ControlStructures.InlineControlStructure"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\ControlStructures\InlineControlStructureSniff.php
	Processing rule "Generic.Formatting.DisallowMultipleStatements"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Formatting\DisallowMultipleStatementsSniff.php
	Processing rule "Generic.Formatting.SpaceAfterCast"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Formatting\SpaceAfterCastSniff.php
	Processing rule "Generic.Functions.FunctionCallArgumentSpacing"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Functions\FunctionCallArgumentSpacingSniff.php
	Processing rule "Generic.NamingConventions.ConstructorName"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\NamingConventions\ConstructorNameSniff.php
	Processing rule "Generic.NamingConventions.UpperCaseConstantName"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\NamingConventions\UpperCaseConstantNameSniff.php
	Processing rule "Generic.PHP.DeprecatedFunctions"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\PHP\DeprecatedFunctionsSniff.php
	Processing rule "Generic.PHP.DisallowShortOpenTag"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\PHP\DisallowShortOpenTagSniff.php
	Processing rule "Generic.PHP.LowerCaseKeyword"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\PHP\LowerCaseKeywordSniff.php
	Processing rule "Generic.PHP.LowerCaseConstant"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\PHP\LowerCaseConstantSniff.php
	Processing rule "Generic.Strings.UnnecessaryStringConcat"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Strings\UnnecessaryStringConcatSniff.php
	Processing rule "Generic.WhiteSpace.DisallowTabIndent"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\WhiteSpace\DisallowTabIndentSniff.php
	Processing rule "Generic.WhiteSpace.LanguageConstructSpacing"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\WhiteSpace\LanguageConstructSpacingSniff.php
	Processing rule "Generic.WhiteSpace.IncrementDecrementSpacing"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\WhiteSpace\IncrementDecrementSpacingSniff.php
	Processing rule "Generic.WhiteSpace.ScopeIndent"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff.php
	Processing rule "PEAR.ControlStructures.MultiLineCondition"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\PEAR\Sniffs\ControlStructures\MultiLineConditionSniff.php
	Processing rule "PEAR.Files.IncludingFile"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\PEAR\Sniffs\Files\IncludingFileSniff.php
	Processing rule "PEAR.Formatting.MultiLineAssignment"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\PEAR\Sniffs\Formatting\MultiLineAssignmentSniff.php
	Processing rule "PEAR.Functions.ValidDefaultValue"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\PEAR\Sniffs\Functions\ValidDefaultValueSniff.php
	Processing rule "PSR2.Files.EndFileNewline"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\PSR2\Sniffs\Files\EndFileNewlineSniff.php
	Processing rule "Zend.Files.ClosingTag"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Zend\Sniffs\Files\ClosingTagSniff.php
	Processing rule "Zend.Debug.CodeAnalyzer"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Zend\Sniffs\Debug\CodeAnalyzerSniff.php
	Processing rule "Generic.Files.LineLength"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Files\LineLengthSniff.php
		=> property "lineLimit" set to "120"
		=> property "absoluteLineLimit" set to "0"
	Processing rule "Generic.Files.LineEndings"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Files\LineEndingsSniff.php
		=> property "eolChar" set to "\n"
	Processing rule "Generic.Formatting.MultipleStatementAlignment"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Formatting\MultipleStatementAlignmentSniff.php
		=> property "maxPadding" set to "20"
		=> property "error" set to "true"
	Processing rule "Generic.PHP.ForbiddenFunctions"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\PHP\ForbiddenFunctionsSniff.php
		=> array property "forbiddenFunctions" set to "sizeof=>count,delete=>unset,print=>echo,is_null=>null,create_function=>null"
	Processing rule "Generic.CodeAnalysis.EmptyStatement.DetectedCATCH"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\CodeAnalysis\EmptyStatementSniff.php
		=> severity set to 0
	Processing rule "Generic.Debug.ClosureLinter"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Debug\ClosureLinterSniff.php
		=> array property "errorCodes" set to "0210"
		=> array property "ignoreCodes" set to "0001,0110,0240"
	Processing rule "Generic.Debug.ClosureLinter.ExternalToolError"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Debug\ClosureLinterSniff.php
		=> message set to %2$s
	Processing rule "PEAR.Functions.FunctionCallSignature"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\PEAR\Sniffs\Functions\FunctionCallSignatureSniff.php
		=> property "allowMultipleArguments" set to "false"
	Processing rule "Generic.Arrays.ArrayIndent"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Generic\Sniffs\Arrays\ArrayIndentSniff.php
	Processing rule "Squiz.Arrays.ArrayDeclaration.KeyNotAligned"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff.php
		=> severity set to 0
	Processing rule "Squiz.Arrays.ArrayDeclaration.ValueNotAligned"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff.php
		=> severity set to 0
	Processing rule "Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff.php
		=> severity set to 0
	Processing rule "Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff.php
		=> severity set to 0
	Processing rule "Squiz.WhiteSpace.LanguageConstructSpacing"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\WhiteSpace\LanguageConstructSpacingSniff.php
		=> severity set to 0
	Processing rule "Squiz.Commenting.InlineComment"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\Commenting\InlineCommentSniff.php
		Excluding rule "Squiz.Commenting.InlineComment.SpacingAfterAtFunctionEnd"
		=> severity set to 0
	Processing rule "Squiz.NamingConventions.ValidFunctionName.PrivateNoUnderscore"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\NamingConventions\ValidFunctionNameSniff.php
		=> severity set to 0
	Processing rule "PSR2.Methods.MethodDeclaration.Underscore"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\PSR2\Sniffs\Methods\MethodDeclarationSniff.php
		Excluding sniff "PSR2.Methods.MethodDeclaration" except for "Underscore"
		=> message type set to error
	Processing rule "Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Sniffs\NamingConventions\ValidVariableNameSniff.php
		=> severity set to 0
	Processing rule "PSR2.Classes.PropertyDeclaration.Underscore"
		=> D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\PSR2\Sniffs\Classes\PropertyDeclarationSniff.php
		Excluding sniff "PSR2.Classes.PropertyDeclaration" except for "Underscore"
		=> message type set to error
=> Ruleset processing complete; included 133 sniffs and excluded 0
	*** START PHP TOKENIZING ***
	Process token [0]: T_OPEN_TAG => <?php 
	Process token [1]: T_FUNCTION => function
	Process token [2]: T_WHITESPACE =>  
	Process token [3]: T_STRING => ?>
	*** END PHP TOKENIZING ***
	*** START PHP TOKENIZING ***
	Process token [0]: T_OPEN_TAG => <?php 
	Process token  1 : T_OPEN_PARENTHESIS => (
	Process token [2]: T_CLOSE_TAG => ?>
	*** END PHP TOKENIZING ***
	*** START PHP TOKENIZING ***
	Process token [0]: T_OPEN_TAG => <?php 
	Process token  1 : T_SEMICOLON => ;
	Process token [2]: T_CLOSE_TAG => ?>
	*** END PHP TOKENIZING ***
	*** START PHP TOKENIZING ***
	Process token [0]: T_OPEN_TAG => <?php 
	Process token [1]: T_FUNCTION => function
	Process token [2]: T_WHITESPACE =>  
	Process token [3]: T_STRING => ?>
	*** END PHP TOKENIZING ***
	*** START PHP TOKENIZING ***
	Process token [0]: T_OPEN_TAG => <?php 
	Process token  1 : T_OPEN_PARENTHESIS => (
	Process token [2]: T_CLOSE_TAG => ?>
	*** END PHP TOKENIZING ***
	*** START PHP TOKENIZING ***
	Process token [0]: T_OPEN_TAG => <?php 
	Process token [1]: T_ABSTRACT => abstract
	Process token [2]: T_WHITESPACE =>  
	Process token [3]: T_FUNCTION => function
	Process token [4]: T_WHITESPACE =>  
	Process token [5]: T_STRING => ?>
	*** END PHP TOKENIZING ***
	*** START PHP TOKENIZING ***
	Process token [0]: T_OPEN_TAG => <?php 
	Process token  1 : T_OPEN_PARENTHESIS => (
	Process token [2]: T_CLOSE_TAG => ?>
	*** END PHP TOKENIZING ***
	*** START PHP TOKENIZING ***
	Process token [0]: T_OPEN_TAG => <?php 
	Process token  1 : T_SEMICOLON => ;
	Process token [2]: T_CLOSE_TAG => ?>
	*** END PHP TOKENIZING ***
Creating file list... DONE (1 files in queue)
Changing into directory D:\000_GitHub\PHPCS\PHP_CodeSniffer\src\Standards\Squiz\Tests\ControlStructures
Processing SwitchDeclarationUnitTest.js 
	*** START JS TOKENIZING ***
	Process char 0 => \n (buffer: )
	Process char 1 => \n (buffer: \n)
	Process char 2 => / (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 2 *
	Process char 3 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // V
		=> Looking ahead 3 chars => // Va
		=> Looking ahead 4 chars => // Val
		=> Looking ahead 5 chars => // Vali
		=> Looking ahead 6 chars => // Valid
		=> Looking ahead 7 chars => // Valid 
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 4 =>   (buffer: )
		Process char 5 => V (buffer:  )
		Process char 6 => a (buffer:  V)
		Process char 7 => l (buffer:  Va)
		Process char 8 => i (buffer:  Val)
		Process char 9 => d (buffer:  Vali)
		Process char 10 =>   (buffer:  Valid)
		Process char 11 => S (buffer:  Valid )
		Process char 12 => W (buffer:  Valid S)
		Process char 13 => I (buffer:  Valid SW)
		Process char 14 => T (buffer:  Valid SWI)
		Process char 15 => C (buffer:  Valid SWIT)
		Process char 16 => H (buffer:  Valid SWITC)
		Process char 17 =>   (buffer:  Valid SWITCH)
		Process char 18 => s (buffer:  Valid SWITCH )
		Process char 19 => t (buffer:  Valid SWITCH s)
		Process char 20 => a (buffer:  Valid SWITCH st)
		Process char 21 => t (buffer:  Valid SWITCH sta)
		Process char 22 => e (buffer:  Valid SWITCH stat)
		Process char 23 => m (buffer:  Valid SWITCH state)
		Process char 24 => e (buffer:  Valid SWITCH statem)
		Process char 25 => n (buffer:  Valid SWITCH stateme)
		Process char 26 => t (buffer:  Valid SWITCH statemen)
		Process char 27 => . (buffer:  Valid SWITCH statement)
	=> Added token T_STRING ( Valid SWITCH statement)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\ns
		=> Looking ahead 3 chars => .\nsw
		=> Looking ahead 4 chars => .\nswi
		=> Looking ahead 5 chars => .\nswit
		=> Looking ahead 6 chars => .\nswitc
		=> Looking ahead 7 chars => .\nswitch
		=> Looking ahead 8 chars => .\nswitch 
		=> Looking ahead 9 chars => .\nswitch (
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 28 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 29 => s (buffer: )
	Process char 30 => w (buffer: s)
	Process char 31 => i (buffer: sw)
	Process char 32 => t (buffer: swi)
	Process char 33 => c (buffer: swit)
	Process char 34 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (s
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 35 =>   (buffer: )
	Process char 36 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (s
		=> Looking ahead 2 chars => (so
		=> Looking ahead 3 chars => (som
		=> Looking ahead 4 chars => (some
		=> Looking ahead 5 chars => (somet
		=> Looking ahead 6 chars => (someth
		=> Looking ahead 7 chars => (somethi
		=> Looking ahead 8 chars => (somethin
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 37 => s (buffer: )
	Process char 38 => o (buffer: s)
	Process char 39 => m (buffer: so)
	Process char 40 => e (buffer: som)
	Process char 41 => t (buffer: some)
	Process char 42 => h (buffer: somet)
	Process char 43 => i (buffer: someth)
	Process char 44 => n (buffer: somethi)
	Process char 45 => g (buffer: somethin)
	Process char 46 => ) (buffer: something)
	=> Added token T_STRING (something)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 47 =>   (buffer: )
	Process char 48 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 49 => \n (buffer: )
	Process char 50 =>   (buffer: \n)
	Process char 51 =>   (buffer: \n )
	Process char 52 =>   (buffer: \n  )
	Process char 53 =>   (buffer: \n   )
	Process char 54 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 55 => a (buffer: c)
	Process char 56 => s (buffer: ca)
	Process char 57 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '1
		=> Looking ahead 4 chars => case '1'
		=> Looking ahead 5 chars => case '1':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 58 =>   (buffer: )
	Process char 59 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 60 => 1 (buffer: ')
		Process char 61 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 62 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 63 => \n (buffer: )
	Process char 64 =>   (buffer: \n)
	Process char 65 =>   (buffer: \n )
	Process char 66 =>   (buffer: \n  )
	Process char 67 =>   (buffer: \n   )
	Process char 68 =>   (buffer: \n    )
	Process char 69 =>   (buffer: \n     )
	Process char 70 =>   (buffer: \n      )
	Process char 71 =>   (buffer: \n       )
	Process char 72 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 73 => y (buffer: m)
	Process char 74 => v (buffer: my)
	Process char 75 => a (buffer: myv)
	Process char 76 => r (buffer: myva)
	Process char 77 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 78 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '1
		=> Looking ahead 4 chars => = '1'
		=> Looking ahead 5 chars => = '1';
		=> Looking ahead 6 chars => = '1';\n
		=> Looking ahead 7 chars => = '1';\n 
		=> Looking ahead 8 chars => = '1';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 79 =>   (buffer: )
	Process char 80 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 81 => 1 (buffer: ')
		Process char 82 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 83 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 84 => \n (buffer: )
	Process char 85 =>   (buffer: \n)
	Process char 86 =>   (buffer: \n )
	Process char 87 =>   (buffer: \n  )
	Process char 88 =>   (buffer: \n   )
	Process char 89 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 90 => r (buffer: b)
	Process char 91 => e (buffer: br)
	Process char 92 => a (buffer: bre)
	Process char 93 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 94 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 95 => \n (buffer: )
	Process char 96 => \n (buffer: \n)
	Process char 97 =>   (buffer: \n\n)
	Process char 98 =>   (buffer: \n\n )
	Process char 99 =>   (buffer: \n\n  )
	Process char 100 =>   (buffer: \n\n   )
	Process char 101 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 102 => a (buffer: c)
	Process char 103 => s (buffer: ca)
	Process char 104 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '2
		=> Looking ahead 4 chars => case '2'
		=> Looking ahead 5 chars => case '2':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 105 =>   (buffer: )
	Process char 106 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 107 => 2 (buffer: ')
		Process char 108 => ' (buffer: '2)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('2')
	Process char 109 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    c
		=> Looking ahead 7 chars => :\n    ca
		=> Looking ahead 8 chars => :\n    cas
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 110 => \n (buffer: )
	Process char 111 =>   (buffer: \n)
	Process char 112 =>   (buffer: \n )
	Process char 113 =>   (buffer: \n  )
	Process char 114 =>   (buffer: \n   )
	Process char 115 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 116 => a (buffer: c)
	Process char 117 => s (buffer: ca)
	Process char 118 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '3
		=> Looking ahead 4 chars => case '3'
		=> Looking ahead 5 chars => case '3':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 119 =>   (buffer: )
	Process char 120 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 121 => 3 (buffer: ')
		Process char 122 => ' (buffer: '3)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('3')
	Process char 123 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 124 => \n (buffer: )
	Process char 125 =>   (buffer: \n)
	Process char 126 =>   (buffer: \n )
	Process char 127 =>   (buffer: \n  )
	Process char 128 =>   (buffer: \n   )
	Process char 129 =>   (buffer: \n    )
	Process char 130 =>   (buffer: \n     )
	Process char 131 =>   (buffer: \n      )
	Process char 132 =>   (buffer: \n       )
	Process char 133 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 134 => y (buffer: m)
	Process char 135 => v (buffer: my)
	Process char 136 => a (buffer: myv)
	Process char 137 => r (buffer: myva)
	Process char 138 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 139 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '5
		=> Looking ahead 4 chars => = '5'
		=> Looking ahead 5 chars => = '5';
		=> Looking ahead 6 chars => = '5';\n
		=> Looking ahead 7 chars => = '5';\n 
		=> Looking ahead 8 chars => = '5';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 140 =>   (buffer: )
	Process char 141 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 142 => 5 (buffer: ')
		Process char 143 => ' (buffer: '5)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('5')
	Process char 144 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 145 => \n (buffer: )
	Process char 146 =>   (buffer: \n)
	Process char 147 =>   (buffer: \n )
	Process char 148 =>   (buffer: \n  )
	Process char 149 =>   (buffer: \n   )
	Process char 150 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 151 => r (buffer: b)
	Process char 152 => e (buffer: br)
	Process char 153 => a (buffer: bre)
	Process char 154 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 155 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 156 => \n (buffer: )
	Process char 157 => \n (buffer: \n)
	Process char 158 =>   (buffer: \n\n)
	Process char 159 =>   (buffer: \n\n )
	Process char 160 =>   (buffer: \n\n  )
	Process char 161 =>   (buffer: \n\n   )
	Process char 162 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 163 => a (buffer: c)
	Process char 164 => s (buffer: ca)
	Process char 165 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '4
		=> Looking ahead 4 chars => case '4'
		=> Looking ahead 5 chars => case '4':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 166 =>   (buffer: )
	Process char 167 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 168 => 4 (buffer: ')
		Process char 169 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 170 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 171 => \n (buffer: )
	Process char 172 =>   (buffer: \n)
	Process char 173 =>   (buffer: \n )
	Process char 174 =>   (buffer: \n  )
	Process char 175 =>   (buffer: \n   )
	Process char 176 =>   (buffer: \n    )
	Process char 177 =>   (buffer: \n     )
	Process char 178 =>   (buffer: \n      )
	Process char 179 =>   (buffer: \n       )
	Process char 180 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 181 => y (buffer: m)
	Process char 182 => v (buffer: my)
	Process char 183 => a (buffer: myv)
	Process char 184 => r (buffer: myva)
	Process char 185 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 186 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '4
		=> Looking ahead 4 chars => = '4'
		=> Looking ahead 5 chars => = '4';
		=> Looking ahead 6 chars => = '4';\n
		=> Looking ahead 7 chars => = '4';\n 
		=> Looking ahead 8 chars => = '4';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 187 =>   (buffer: )
	Process char 188 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 189 => 4 (buffer: ')
		Process char 190 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 191 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 192 => \n (buffer: )
	Process char 193 =>   (buffer: \n)
	Process char 194 =>   (buffer: \n )
	Process char 195 =>   (buffer: \n  )
	Process char 196 =>   (buffer: \n   )
	Process char 197 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 198 => r (buffer: b)
	Process char 199 => e (buffer: br)
	Process char 200 => a (buffer: bre)
	Process char 201 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 202 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 203 => \n (buffer: )
	Process char 204 => \n (buffer: \n)
	Process char 205 =>   (buffer: \n\n)
	Process char 206 =>   (buffer: \n\n )
	Process char 207 =>   (buffer: \n\n  )
	Process char 208 =>   (buffer: \n\n   )
	Process char 209 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 210 => e (buffer: d)
	Process char 211 => f (buffer: de)
	Process char 212 => a (buffer: def)
	Process char 213 => u (buffer: defa)
	Process char 214 => l (buffer: defau)
	Process char 215 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 216 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 217 => \n (buffer: )
	Process char 218 =>   (buffer: \n)
	Process char 219 =>   (buffer: \n )
	Process char 220 =>   (buffer: \n  )
	Process char 221 =>   (buffer: \n   )
	Process char 222 =>   (buffer: \n    )
	Process char 223 =>   (buffer: \n     )
	Process char 224 =>   (buffer: \n      )
	Process char 225 =>   (buffer: \n       )
	Process char 226 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 227 => y (buffer: m)
	Process char 228 => v (buffer: my)
	Process char 229 => a (buffer: myv)
	Process char 230 => r (buffer: myva)
	Process char 231 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 232 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = n
		=> Looking ahead 3 chars => = nu
		=> Looking ahead 4 chars => = nul
		=> Looking ahead 5 chars => = null
		=> Looking ahead 6 chars => = null;
		=> Looking ahead 7 chars => = null;\n
		=> Looking ahead 8 chars => = null;\n 
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 233 =>   (buffer: )
	Process char 234 => n (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 235 => u (buffer: n)
	Process char 236 => l (buffer: nu)
	Process char 237 => l (buffer: nul)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => null;
		=> Looking ahead 2 chars => null;\n
		=> Looking ahead 3 chars => null;\n 
		=> Looking ahead 4 chars => null;\n  
		=> Looking ahead 5 chars => null;\n   
		* look ahead found nothing *
	=> Added token T_NULL (null)
	Process char 238 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 239 => \n (buffer: )
	Process char 240 =>   (buffer: \n)
	Process char 241 =>   (buffer: \n )
	Process char 242 =>   (buffer: \n  )
	Process char 243 =>   (buffer: \n   )
	Process char 244 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 245 => r (buffer: b)
	Process char 246 => e (buffer: br)
	Process char 247 => a (buffer: bre)
	Process char 248 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 249 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\n/
		=> Looking ahead 6 chars => ;\n}\n\n//
		=> Looking ahead 7 chars => ;\n}\n\n// 
		=> Looking ahead 8 chars => ;\n}\n\n// A
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 250 => \n (buffer: )
	Process char 251 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\n/
		=> Looking ahead 4 chars => }\n\n//
		=> Looking ahead 5 chars => }\n\n// 
		=> Looking ahead 6 chars => }\n\n// A
		=> Looking ahead 7 chars => }\n\n// Al
		=> Looking ahead 8 chars => }\n\n// Ali
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 252 => \n (buffer: )
	Process char 253 => \n (buffer: \n)
	Process char 254 => / (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 254 *
	Process char 255 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // A
		=> Looking ahead 3 chars => // Al
		=> Looking ahead 4 chars => // Ali
		=> Looking ahead 5 chars => // Alig
		=> Looking ahead 6 chars => // Align
		=> Looking ahead 7 chars => // Alignm
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 256 =>   (buffer: )
		Process char 257 => A (buffer:  )
		Process char 258 => l (buffer:  A)
		Process char 259 => i (buffer:  Al)
		Process char 260 => g (buffer:  Ali)
		Process char 261 => n (buffer:  Alig)
		Process char 262 => m (buffer:  Align)
		Process char 263 => e (buffer:  Alignm)
		Process char 264 => n (buffer:  Alignme)
		Process char 265 => t (buffer:  Alignmen)
		Process char 266 =>   (buffer:  Alignment)
		Process char 267 => w (buffer:  Alignment )
		Process char 268 => r (buffer:  Alignment w)
		Process char 269 => o (buffer:  Alignment wr)
		Process char 270 => n (buffer:  Alignment wro)
		Process char 271 => g (buffer:  Alignment wron)
		Process char 272 => . (buffer:  Alignment wrong)
	=> Added token T_STRING ( Alignment wrong)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\ns
		=> Looking ahead 3 chars => .\nsw
		=> Looking ahead 4 chars => .\nswi
		=> Looking ahead 5 chars => .\nswit
		=> Looking ahead 6 chars => .\nswitc
		=> Looking ahead 7 chars => .\nswitch
		=> Looking ahead 8 chars => .\nswitch 
		=> Looking ahead 9 chars => .\nswitch (
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 273 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 274 => s (buffer: )
	Process char 275 => w (buffer: s)
	Process char 276 => i (buffer: sw)
	Process char 277 => t (buffer: swi)
	Process char 278 => c (buffer: swit)
	Process char 279 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (s
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 280 =>   (buffer: )
	Process char 281 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (s
		=> Looking ahead 2 chars => (so
		=> Looking ahead 3 chars => (som
		=> Looking ahead 4 chars => (some
		=> Looking ahead 5 chars => (somet
		=> Looking ahead 6 chars => (someth
		=> Looking ahead 7 chars => (somethi
		=> Looking ahead 8 chars => (somethin
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 282 => s (buffer: )
	Process char 283 => o (buffer: s)
	Process char 284 => m (buffer: so)
	Process char 285 => e (buffer: som)
	Process char 286 => t (buffer: some)
	Process char 287 => h (buffer: somet)
	Process char 288 => i (buffer: someth)
	Process char 289 => n (buffer: somethi)
	Process char 290 => g (buffer: somethin)
	Process char 291 => ) (buffer: something)
	=> Added token T_STRING (something)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 292 =>   (buffer: )
	Process char 293 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 294 => \n (buffer: )
	Process char 295 =>   (buffer: \n)
	Process char 296 =>   (buffer: \n )
	Process char 297 =>   (buffer: \n  )
	Process char 298 =>   (buffer: \n   )
	Process char 299 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 300 => a (buffer: c)
	Process char 301 => s (buffer: ca)
	Process char 302 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '1
		=> Looking ahead 4 chars => case '1'
		=> Looking ahead 5 chars => case '1':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 303 =>   (buffer: )
	Process char 304 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 305 => 1 (buffer: ')
		Process char 306 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 307 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 308 => \n (buffer: )
	Process char 309 =>   (buffer: \n)
	Process char 310 =>   (buffer: \n )
	Process char 311 =>   (buffer: \n  )
	Process char 312 =>   (buffer: \n   )
	Process char 313 =>   (buffer: \n    )
	Process char 314 =>   (buffer: \n     )
	Process char 315 =>   (buffer: \n      )
	Process char 316 =>   (buffer: \n       )
	Process char 317 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 318 => y (buffer: m)
	Process char 319 => v (buffer: my)
	Process char 320 => a (buffer: myv)
	Process char 321 => r (buffer: myva)
	Process char 322 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 323 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '1
		=> Looking ahead 4 chars => = '1'
		=> Looking ahead 5 chars => = '1';
		=> Looking ahead 6 chars => = '1';\n
		=> Looking ahead 7 chars => = '1';\n 
		=> Looking ahead 8 chars => = '1';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 324 =>   (buffer: )
	Process char 325 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 326 => 1 (buffer: ')
		Process char 327 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 328 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n     
		=> Looking ahead 7 chars => ;\n      
		=> Looking ahead 8 chars => ;\n       
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 329 => \n (buffer: )
	Process char 330 =>   (buffer: \n)
	Process char 331 =>   (buffer: \n )
	Process char 332 =>   (buffer: \n  )
	Process char 333 =>   (buffer: \n   )
	Process char 334 =>   (buffer: \n    )
	Process char 335 =>   (buffer: \n     )
	Process char 336 =>   (buffer: \n      )
	Process char 337 =>   (buffer: \n       )
	Process char 338 => b (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 339 => r (buffer: b)
	Process char 340 => e (buffer: br)
	Process char 341 => a (buffer: bre)
	Process char 342 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\nc
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 343 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\nc
		=> Looking ahead 4 chars => ;\n\nca
		=> Looking ahead 5 chars => ;\n\ncas
		=> Looking ahead 6 chars => ;\n\ncase
		=> Looking ahead 7 chars => ;\n\ncase 
		=> Looking ahead 8 chars => ;\n\ncase '
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 344 => \n (buffer: )
	Process char 345 => \n (buffer: \n)
	Process char 346 => c (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 347 => a (buffer: c)
	Process char 348 => s (buffer: ca)
	Process char 349 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '2
		=> Looking ahead 4 chars => case '2'
		=> Looking ahead 5 chars => case '2':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 350 =>   (buffer: )
	Process char 351 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 352 => 2 (buffer: ')
		Process char 353 => ' (buffer: '2)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('2')
	Process char 354 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    c
		=> Looking ahead 7 chars => :\n    ca
		=> Looking ahead 8 chars => :\n    cas
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 355 => \n (buffer: )
	Process char 356 =>   (buffer: \n)
	Process char 357 =>   (buffer: \n )
	Process char 358 =>   (buffer: \n  )
	Process char 359 =>   (buffer: \n   )
	Process char 360 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 361 => a (buffer: c)
	Process char 362 => s (buffer: ca)
	Process char 363 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '3
		=> Looking ahead 4 chars => case '3'
		=> Looking ahead 5 chars => case '3':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 364 =>   (buffer: )
	Process char 365 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 366 => 3 (buffer: ')
		Process char 367 => ' (buffer: '3)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('3')
	Process char 368 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 369 => \n (buffer: )
	Process char 370 =>   (buffer: \n)
	Process char 371 =>   (buffer: \n )
	Process char 372 =>   (buffer: \n  )
	Process char 373 =>   (buffer: \n   )
	Process char 374 =>   (buffer: \n    )
	Process char 375 =>   (buffer: \n     )
	Process char 376 =>   (buffer: \n      )
	Process char 377 =>   (buffer: \n       )
	Process char 378 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 379 => y (buffer: m)
	Process char 380 => v (buffer: my)
	Process char 381 => a (buffer: myv)
	Process char 382 => r (buffer: myva)
	Process char 383 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 384 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '5
		=> Looking ahead 4 chars => = '5'
		=> Looking ahead 5 chars => = '5';
		=> Looking ahead 6 chars => = '5';\n
		=> Looking ahead 7 chars => = '5';\n 
		=> Looking ahead 8 chars => = '5';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 385 =>   (buffer: )
	Process char 386 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 387 => 5 (buffer: ')
		Process char 388 => ' (buffer: '5)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('5')
	Process char 389 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 390 => \n (buffer: )
	Process char 391 =>   (buffer: \n)
	Process char 392 =>   (buffer: \n )
	Process char 393 =>   (buffer: \n  )
	Process char 394 =>   (buffer: \n   )
	Process char 395 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 396 => r (buffer: b)
	Process char 397 => e (buffer: br)
	Process char 398 => a (buffer: bre)
	Process char 399 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\nc
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 400 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\nc
		=> Looking ahead 4 chars => ;\n\nca
		=> Looking ahead 5 chars => ;\n\ncas
		=> Looking ahead 6 chars => ;\n\ncase
		=> Looking ahead 7 chars => ;\n\ncase 
		=> Looking ahead 8 chars => ;\n\ncase '
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 401 => \n (buffer: )
	Process char 402 => \n (buffer: \n)
	Process char 403 => c (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 404 => a (buffer: c)
	Process char 405 => s (buffer: ca)
	Process char 406 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '4
		=> Looking ahead 4 chars => case '4'
		=> Looking ahead 5 chars => case '4':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 407 =>   (buffer: )
	Process char 408 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 409 => 4 (buffer: ')
		Process char 410 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 411 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    m
		=> Looking ahead 7 chars => :\n    my
		=> Looking ahead 8 chars => :\n    myv
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 412 => \n (buffer: )
	Process char 413 =>   (buffer: \n)
	Process char 414 =>   (buffer: \n )
	Process char 415 =>   (buffer: \n  )
	Process char 416 =>   (buffer: \n   )
	Process char 417 => m (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 418 => y (buffer: m)
	Process char 419 => v (buffer: my)
	Process char 420 => a (buffer: myv)
	Process char 421 => r (buffer: myva)
	Process char 422 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 423 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '4
		=> Looking ahead 4 chars => = '4'
		=> Looking ahead 5 chars => = '4';
		=> Looking ahead 6 chars => = '4';\n
		=> Looking ahead 7 chars => = '4';\nb
		=> Looking ahead 8 chars => = '4';\nbr
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 424 =>   (buffer: )
	Process char 425 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 426 => 4 (buffer: ')
		Process char 427 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 428 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\nb
		=> Looking ahead 3 chars => ;\nbr
		=> Looking ahead 4 chars => ;\nbre
		=> Looking ahead 5 chars => ;\nbrea
		=> Looking ahead 6 chars => ;\nbreak
		=> Looking ahead 7 chars => ;\nbreak;
		=> Looking ahead 8 chars => ;\nbreak;\n
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 429 => \n (buffer: )
	Process char 430 => b (buffer: \n)
	=> Added token T_WHITESPACE (\n)
	Process char 431 => r (buffer: b)
	Process char 432 => e (buffer: br)
	Process char 433 => a (buffer: bre)
	Process char 434 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 435 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 436 => \n (buffer: )
	Process char 437 => \n (buffer: \n)
	Process char 438 =>   (buffer: \n\n)
	Process char 439 =>   (buffer: \n\n )
	Process char 440 =>   (buffer: \n\n  )
	Process char 441 =>   (buffer: \n\n   )
	Process char 442 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 443 => e (buffer: d)
	Process char 444 => f (buffer: de)
	Process char 445 => a (buffer: def)
	Process char 446 => u (buffer: defa)
	Process char 447 => l (buffer: defau)
	Process char 448 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 449 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 450 => \n (buffer: )
	Process char 451 =>   (buffer: \n)
	Process char 452 =>   (buffer: \n )
	Process char 453 =>   (buffer: \n  )
	Process char 454 =>   (buffer: \n   )
	Process char 455 =>   (buffer: \n    )
	Process char 456 =>   (buffer: \n     )
	Process char 457 =>   (buffer: \n      )
	Process char 458 =>   (buffer: \n       )
	Process char 459 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 460 => y (buffer: m)
	Process char 461 => v (buffer: my)
	Process char 462 => a (buffer: myv)
	Process char 463 => r (buffer: myva)
	Process char 464 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 465 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = n
		=> Looking ahead 3 chars => = nu
		=> Looking ahead 4 chars => = nul
		=> Looking ahead 5 chars => = null
		=> Looking ahead 6 chars => = null;
		=> Looking ahead 7 chars => = null;\n
		=> Looking ahead 8 chars => = null;\n 
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 466 =>   (buffer: )
	Process char 467 => n (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 468 => u (buffer: n)
	Process char 469 => l (buffer: nu)
	Process char 470 => l (buffer: nul)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => null;
		=> Looking ahead 2 chars => null;\n
		=> Looking ahead 3 chars => null;\n 
		=> Looking ahead 4 chars => null;\n  
		=> Looking ahead 5 chars => null;\n   
		* look ahead found nothing *
	=> Added token T_NULL (null)
	Process char 471 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 472 => \n (buffer: )
	Process char 473 =>   (buffer: \n)
	Process char 474 =>   (buffer: \n )
	Process char 475 =>   (buffer: \n  )
	Process char 476 =>   (buffer: \n   )
	Process char 477 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 478 => r (buffer: b)
	Process char 479 => e (buffer: br)
	Process char 480 => a (buffer: bre)
	Process char 481 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 482 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\n/
		=> Looking ahead 6 chars => ;\n}\n\n//
		=> Looking ahead 7 chars => ;\n}\n\n// 
		=> Looking ahead 8 chars => ;\n}\n\n// C
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 483 => \n (buffer: )
	Process char 484 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\n/
		=> Looking ahead 4 chars => }\n\n//
		=> Looking ahead 5 chars => }\n\n// 
		=> Looking ahead 6 chars => }\n\n// C
		=> Looking ahead 7 chars => }\n\n// Cl
		=> Looking ahead 8 chars => }\n\n// Clo
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 485 => \n (buffer: )
	Process char 486 => \n (buffer: \n)
	Process char 487 => / (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 487 *
	Process char 488 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // C
		=> Looking ahead 3 chars => // Cl
		=> Looking ahead 4 chars => // Clo
		=> Looking ahead 5 chars => // Clos
		=> Looking ahead 6 chars => // Closi
		=> Looking ahead 7 chars => // Closin
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 489 =>   (buffer: )
		Process char 490 => C (buffer:  )
		Process char 491 => l (buffer:  C)
		Process char 492 => o (buffer:  Cl)
		Process char 493 => s (buffer:  Clo)
		Process char 494 => i (buffer:  Clos)
		Process char 495 => n (buffer:  Closi)
		Process char 496 => g (buffer:  Closin)
		Process char 497 =>   (buffer:  Closing)
		Process char 498 => b (buffer:  Closing )
		Process char 499 => r (buffer:  Closing b)
		Process char 500 => a (buffer:  Closing br)
		Process char 501 => c (buffer:  Closing bra)
		Process char 502 => e (buffer:  Closing brac)
		Process char 503 =>   (buffer:  Closing brace)
		Process char 504 => w (buffer:  Closing brace )
		Process char 505 => r (buffer:  Closing brace w)
		Process char 506 => o (buffer:  Closing brace wr)
		Process char 507 => n (buffer:  Closing brace wro)
		Process char 508 => g (buffer:  Closing brace wron)
		Process char 509 => . (buffer:  Closing brace wrong)
	=> Added token T_STRING ( Closing brace wrong)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\ns
		=> Looking ahead 3 chars => .\nsw
		=> Looking ahead 4 chars => .\nswi
		=> Looking ahead 5 chars => .\nswit
		=> Looking ahead 6 chars => .\nswitc
		=> Looking ahead 7 chars => .\nswitch
		=> Looking ahead 8 chars => .\nswitch 
		=> Looking ahead 9 chars => .\nswitch (
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 510 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 511 => s (buffer: )
	Process char 512 => w (buffer: s)
	Process char 513 => i (buffer: sw)
	Process char 514 => t (buffer: swi)
	Process char 515 => c (buffer: swit)
	Process char 516 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (s
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 517 =>   (buffer: )
	Process char 518 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (s
		=> Looking ahead 2 chars => (so
		=> Looking ahead 3 chars => (som
		=> Looking ahead 4 chars => (some
		=> Looking ahead 5 chars => (somet
		=> Looking ahead 6 chars => (someth
		=> Looking ahead 7 chars => (somethi
		=> Looking ahead 8 chars => (somethin
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 519 => s (buffer: )
	Process char 520 => o (buffer: s)
	Process char 521 => m (buffer: so)
	Process char 522 => e (buffer: som)
	Process char 523 => t (buffer: some)
	Process char 524 => h (buffer: somet)
	Process char 525 => i (buffer: someth)
	Process char 526 => n (buffer: somethi)
	Process char 527 => g (buffer: somethin)
	Process char 528 => ) (buffer: something)
	=> Added token T_STRING (something)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 529 =>   (buffer: )
	Process char 530 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 531 => \n (buffer: )
	Process char 532 =>   (buffer: \n)
	Process char 533 =>   (buffer: \n )
	Process char 534 =>   (buffer: \n  )
	Process char 535 =>   (buffer: \n   )
	Process char 536 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 537 => a (buffer: c)
	Process char 538 => s (buffer: ca)
	Process char 539 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '1
		=> Looking ahead 4 chars => case '1'
		=> Looking ahead 5 chars => case '1':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 540 =>   (buffer: )
	Process char 541 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 542 => 1 (buffer: ')
		Process char 543 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 544 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 545 => \n (buffer: )
	Process char 546 =>   (buffer: \n)
	Process char 547 =>   (buffer: \n )
	Process char 548 =>   (buffer: \n  )
	Process char 549 =>   (buffer: \n   )
	Process char 550 =>   (buffer: \n    )
	Process char 551 =>   (buffer: \n     )
	Process char 552 =>   (buffer: \n      )
	Process char 553 =>   (buffer: \n       )
	Process char 554 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 555 => y (buffer: m)
	Process char 556 => v (buffer: my)
	Process char 557 => a (buffer: myv)
	Process char 558 => r (buffer: myva)
	Process char 559 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 560 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '1
		=> Looking ahead 4 chars => = '1'
		=> Looking ahead 5 chars => = '1';
		=> Looking ahead 6 chars => = '1';\n
		=> Looking ahead 7 chars => = '1';\n 
		=> Looking ahead 8 chars => = '1';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 561 =>   (buffer: )
	Process char 562 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 563 => 1 (buffer: ')
		Process char 564 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 565 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 566 => \n (buffer: )
	Process char 567 =>   (buffer: \n)
	Process char 568 =>   (buffer: \n )
	Process char 569 =>   (buffer: \n  )
	Process char 570 =>   (buffer: \n   )
	Process char 571 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 572 => r (buffer: b)
	Process char 573 => e (buffer: br)
	Process char 574 => a (buffer: bre)
	Process char 575 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n 
		=> Looking ahead 4 chars => break;\n  
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 576 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    }
		=> Looking ahead 7 chars => ;\n    }\n
		=> Looking ahead 8 chars => ;\n    }\n\n
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 577 => \n (buffer: )
	Process char 578 =>   (buffer: \n)
	Process char 579 =>   (buffer: \n )
	Process char 580 =>   (buffer: \n  )
	Process char 581 =>   (buffer: \n   )
	Process char 582 => } (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\n/
		=> Looking ahead 4 chars => }\n\n//
		=> Looking ahead 5 chars => }\n\n// 
		=> Looking ahead 6 chars => }\n\n// P
		=> Looking ahead 7 chars => }\n\n// PE
		=> Looking ahead 8 chars => }\n\n// PEA
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 583 => \n (buffer: )
	Process char 584 => \n (buffer: \n)
	Process char 585 => / (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 585 *
	Process char 586 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // P
		=> Looking ahead 3 chars => // PE
		=> Looking ahead 4 chars => // PEA
		=> Looking ahead 5 chars => // PEAR
		=> Looking ahead 6 chars => // PEAR 
		=> Looking ahead 7 chars => // PEAR s
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 587 =>   (buffer: )
		Process char 588 => P (buffer:  )
		Process char 589 => E (buffer:  P)
		Process char 590 => A (buffer:  PE)
		Process char 591 => R (buffer:  PEA)
		Process char 592 =>   (buffer:  PEAR)
		Process char 593 => s (buffer:  PEAR )
		Process char 594 => t (buffer:  PEAR s)
		Process char 595 => y (buffer:  PEAR st)
		Process char 596 => l (buffer:  PEAR sty)
		Process char 597 => e (buffer:  PEAR styl)
		Process char 598 => . (buffer:  PEAR style)
	=> Added token T_STRING ( PEAR style)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\ns
		=> Looking ahead 3 chars => .\nsw
		=> Looking ahead 4 chars => .\nswi
		=> Looking ahead 5 chars => .\nswit
		=> Looking ahead 6 chars => .\nswitc
		=> Looking ahead 7 chars => .\nswitch
		=> Looking ahead 8 chars => .\nswitch 
		=> Looking ahead 9 chars => .\nswitch (
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 599 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 600 => s (buffer: )
	Process char 601 => w (buffer: s)
	Process char 602 => i (buffer: sw)
	Process char 603 => t (buffer: swi)
	Process char 604 => c (buffer: swit)
	Process char 605 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (s
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 606 =>   (buffer: )
	Process char 607 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (s
		=> Looking ahead 2 chars => (so
		=> Looking ahead 3 chars => (som
		=> Looking ahead 4 chars => (some
		=> Looking ahead 5 chars => (somet
		=> Looking ahead 6 chars => (someth
		=> Looking ahead 7 chars => (somethi
		=> Looking ahead 8 chars => (somethin
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 608 => s (buffer: )
	Process char 609 => o (buffer: s)
	Process char 610 => m (buffer: so)
	Process char 611 => e (buffer: som)
	Process char 612 => t (buffer: some)
	Process char 613 => h (buffer: somet)
	Process char 614 => i (buffer: someth)
	Process char 615 => n (buffer: somethi)
	Process char 616 => g (buffer: somethin)
	Process char 617 => ) (buffer: something)
	=> Added token T_STRING (something)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\nc
		=> Looking ahead 5 chars => ) {\nca
		=> Looking ahead 6 chars => ) {\ncas
		=> Looking ahead 7 chars => ) {\ncase
		=> Looking ahead 8 chars => ) {\ncase 
		=> Looking ahead 9 chars => ) {\ncase '
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 618 =>   (buffer: )
	Process char 619 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\nc
		=> Looking ahead 3 chars => {\nca
		=> Looking ahead 4 chars => {\ncas
		=> Looking ahead 5 chars => {\ncase
		=> Looking ahead 6 chars => {\ncase 
		=> Looking ahead 7 chars => {\ncase '
		=> Looking ahead 8 chars => {\ncase '1
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 620 => \n (buffer: )
	Process char 621 => c (buffer: \n)
	=> Added token T_WHITESPACE (\n)
	Process char 622 => a (buffer: c)
	Process char 623 => s (buffer: ca)
	Process char 624 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '1
		=> Looking ahead 4 chars => case '1'
		=> Looking ahead 5 chars => case '1':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 625 =>   (buffer: )
	Process char 626 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 627 => 1 (buffer: ')
		Process char 628 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 629 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    m
		=> Looking ahead 7 chars => :\n    my
		=> Looking ahead 8 chars => :\n    myv
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 630 => \n (buffer: )
	Process char 631 =>   (buffer: \n)
	Process char 632 =>   (buffer: \n )
	Process char 633 =>   (buffer: \n  )
	Process char 634 =>   (buffer: \n   )
	Process char 635 => m (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 636 => y (buffer: m)
	Process char 637 => v (buffer: my)
	Process char 638 => a (buffer: myv)
	Process char 639 => r (buffer: myva)
	Process char 640 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 641 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '1
		=> Looking ahead 4 chars => = '1'
		=> Looking ahead 5 chars => = '1';
		=> Looking ahead 6 chars => = '1';\n
		=> Looking ahead 7 chars => = '1';\n 
		=> Looking ahead 8 chars => = '1';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 642 =>   (buffer: )
	Process char 643 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 644 => 1 (buffer: ')
		Process char 645 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 646 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 647 => \n (buffer: )
	Process char 648 =>   (buffer: \n)
	Process char 649 =>   (buffer: \n )
	Process char 650 =>   (buffer: \n  )
	Process char 651 =>   (buffer: \n   )
	Process char 652 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 653 => r (buffer: b)
	Process char 654 => e (buffer: br)
	Process char 655 => a (buffer: bre)
	Process char 656 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\nc
		=> Looking ahead 4 chars => break;\nca
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 657 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\nc
		=> Looking ahead 3 chars => ;\nca
		=> Looking ahead 4 chars => ;\ncas
		=> Looking ahead 5 chars => ;\ncase
		=> Looking ahead 6 chars => ;\ncase 
		=> Looking ahead 7 chars => ;\ncase '
		=> Looking ahead 8 chars => ;\ncase '2
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 658 => \n (buffer: )
	Process char 659 => c (buffer: \n)
	=> Added token T_WHITESPACE (\n)
	Process char 660 => a (buffer: c)
	Process char 661 => s (buffer: ca)
	Process char 662 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '2
		=> Looking ahead 4 chars => case '2'
		=> Looking ahead 5 chars => case '2':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 663 =>   (buffer: )
	Process char 664 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 665 => 2 (buffer: ')
		Process char 666 => ' (buffer: '2)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('2')
	Process char 667 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\nc
		=> Looking ahead 3 chars => :\nca
		=> Looking ahead 4 chars => :\ncas
		=> Looking ahead 5 chars => :\ncase
		=> Looking ahead 6 chars => :\ncase 
		=> Looking ahead 7 chars => :\ncase '
		=> Looking ahead 8 chars => :\ncase '3
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 668 => \n (buffer: )
	Process char 669 => c (buffer: \n)
	=> Added token T_WHITESPACE (\n)
	Process char 670 => a (buffer: c)
	Process char 671 => s (buffer: ca)
	Process char 672 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '3
		=> Looking ahead 4 chars => case '3'
		=> Looking ahead 5 chars => case '3':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 673 =>   (buffer: )
	Process char 674 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 675 => 3 (buffer: ')
		Process char 676 => ' (buffer: '3)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('3')
	Process char 677 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    m
		=> Looking ahead 7 chars => :\n    my
		=> Looking ahead 8 chars => :\n    myv
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 678 => \n (buffer: )
	Process char 679 =>   (buffer: \n)
	Process char 680 =>   (buffer: \n )
	Process char 681 =>   (buffer: \n  )
	Process char 682 =>   (buffer: \n   )
	Process char 683 => m (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 684 => y (buffer: m)
	Process char 685 => v (buffer: my)
	Process char 686 => a (buffer: myv)
	Process char 687 => r (buffer: myva)
	Process char 688 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 689 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '5
		=> Looking ahead 4 chars => = '5'
		=> Looking ahead 5 chars => = '5';
		=> Looking ahead 6 chars => = '5';\n
		=> Looking ahead 7 chars => = '5';\n 
		=> Looking ahead 8 chars => = '5';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 690 =>   (buffer: )
	Process char 691 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 692 => 5 (buffer: ')
		Process char 693 => ' (buffer: '5)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('5')
	Process char 694 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 695 => \n (buffer: )
	Process char 696 =>   (buffer: \n)
	Process char 697 =>   (buffer: \n )
	Process char 698 =>   (buffer: \n  )
	Process char 699 =>   (buffer: \n   )
	Process char 700 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 701 => r (buffer: b)
	Process char 702 => e (buffer: br)
	Process char 703 => a (buffer: bre)
	Process char 704 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\nc
		=> Looking ahead 4 chars => break;\nca
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 705 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\nc
		=> Looking ahead 3 chars => ;\nca
		=> Looking ahead 4 chars => ;\ncas
		=> Looking ahead 5 chars => ;\ncase
		=> Looking ahead 6 chars => ;\ncase 
		=> Looking ahead 7 chars => ;\ncase '
		=> Looking ahead 8 chars => ;\ncase '4
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 706 => \n (buffer: )
	Process char 707 => c (buffer: \n)
	=> Added token T_WHITESPACE (\n)
	Process char 708 => a (buffer: c)
	Process char 709 => s (buffer: ca)
	Process char 710 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '4
		=> Looking ahead 4 chars => case '4'
		=> Looking ahead 5 chars => case '4':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 711 =>   (buffer: )
	Process char 712 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 713 => 4 (buffer: ')
		Process char 714 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 715 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    m
		=> Looking ahead 7 chars => :\n    my
		=> Looking ahead 8 chars => :\n    myv
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 716 => \n (buffer: )
	Process char 717 =>   (buffer: \n)
	Process char 718 =>   (buffer: \n )
	Process char 719 =>   (buffer: \n  )
	Process char 720 =>   (buffer: \n   )
	Process char 721 => m (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 722 => y (buffer: m)
	Process char 723 => v (buffer: my)
	Process char 724 => a (buffer: myv)
	Process char 725 => r (buffer: myva)
	Process char 726 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 727 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '4
		=> Looking ahead 4 chars => = '4'
		=> Looking ahead 5 chars => = '4';
		=> Looking ahead 6 chars => = '4';\n
		=> Looking ahead 7 chars => = '4';\n 
		=> Looking ahead 8 chars => = '4';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 728 =>   (buffer: )
	Process char 729 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 730 => 4 (buffer: ')
		Process char 731 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 732 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 733 => \n (buffer: )
	Process char 734 =>   (buffer: \n)
	Process char 735 =>   (buffer: \n )
	Process char 736 =>   (buffer: \n  )
	Process char 737 =>   (buffer: \n   )
	Process char 738 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 739 => r (buffer: b)
	Process char 740 => e (buffer: br)
	Process char 741 => a (buffer: bre)
	Process char 742 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\nd
		=> Looking ahead 4 chars => break;\nde
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 743 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\nd
		=> Looking ahead 3 chars => ;\nde
		=> Looking ahead 4 chars => ;\ndef
		=> Looking ahead 5 chars => ;\ndefa
		=> Looking ahead 6 chars => ;\ndefau
		=> Looking ahead 7 chars => ;\ndefaul
		=> Looking ahead 8 chars => ;\ndefault
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 744 => \n (buffer: )
	Process char 745 => d (buffer: \n)
	=> Added token T_WHITESPACE (\n)
	Process char 746 => e (buffer: d)
	Process char 747 => f (buffer: de)
	Process char 748 => a (buffer: def)
	Process char 749 => u (buffer: defa)
	Process char 750 => l (buffer: defau)
	Process char 751 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 752 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    m
		=> Looking ahead 7 chars => :\n    my
		=> Looking ahead 8 chars => :\n    myv
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 753 => \n (buffer: )
	Process char 754 =>   (buffer: \n)
	Process char 755 =>   (buffer: \n )
	Process char 756 =>   (buffer: \n  )
	Process char 757 =>   (buffer: \n   )
	Process char 758 => m (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 759 => y (buffer: m)
	Process char 760 => v (buffer: my)
	Process char 761 => a (buffer: myv)
	Process char 762 => r (buffer: myva)
	Process char 763 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 764 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = n
		=> Looking ahead 3 chars => = nu
		=> Looking ahead 4 chars => = nul
		=> Looking ahead 5 chars => = null
		=> Looking ahead 6 chars => = null;
		=> Looking ahead 7 chars => = null;\n
		=> Looking ahead 8 chars => = null;\n 
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 765 =>   (buffer: )
	Process char 766 => n (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 767 => u (buffer: n)
	Process char 768 => l (buffer: nu)
	Process char 769 => l (buffer: nul)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => null;
		=> Looking ahead 2 chars => null;\n
		=> Looking ahead 3 chars => null;\n 
		=> Looking ahead 4 chars => null;\n  
		=> Looking ahead 5 chars => null;\n   
		* look ahead found nothing *
	=> Added token T_NULL (null)
	Process char 770 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 771 => \n (buffer: )
	Process char 772 =>   (buffer: \n)
	Process char 773 =>   (buffer: \n )
	Process char 774 =>   (buffer: \n  )
	Process char 775 =>   (buffer: \n   )
	Process char 776 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 777 => r (buffer: b)
	Process char 778 => e (buffer: br)
	Process char 779 => a (buffer: bre)
	Process char 780 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 781 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\n/
		=> Looking ahead 6 chars => ;\n}\n\n//
		=> Looking ahead 7 chars => ;\n}\n\n// 
		=> Looking ahead 8 chars => ;\n}\n\n// V
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 782 => \n (buffer: )
	Process char 783 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\n/
		=> Looking ahead 4 chars => }\n\n//
		=> Looking ahead 5 chars => }\n\n// 
		=> Looking ahead 6 chars => }\n\n// V
		=> Looking ahead 7 chars => }\n\n// Va
		=> Looking ahead 8 chars => }\n\n// Val
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 784 => \n (buffer: )
	Process char 785 => \n (buffer: \n)
	Process char 786 => / (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 786 *
	Process char 787 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // V
		=> Looking ahead 3 chars => // Va
		=> Looking ahead 4 chars => // Val
		=> Looking ahead 5 chars => // Vali
		=> Looking ahead 6 chars => // Valid
		=> Looking ahead 7 chars => // Valid,
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 788 =>   (buffer: )
		Process char 789 => V (buffer:  )
		Process char 790 => a (buffer:  V)
		Process char 791 => l (buffer:  Va)
		Process char 792 => i (buffer:  Val)
		Process char 793 => d (buffer:  Vali)
		Process char 794 => , (buffer:  Valid)
	=> Added token T_STRING ( Valid)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => , 
		=> Looking ahead 2 chars => , b
		=> Looking ahead 3 chars => , bu
		=> Looking ahead 4 chars => , but
		=> Looking ahead 5 chars => , but 
		=> Looking ahead 6 chars => , but m
		=> Looking ahead 7 chars => , but mi
		=> Looking ahead 8 chars => , but mis
		=> Looking ahead 9 chars => , but miss
		* look ahead found nothing *
	=> Added token T_COMMA (,)
		Process char 795 =>   (buffer: )
		Process char 796 => b (buffer:  )
		Process char 797 => u (buffer:  b)
		Process char 798 => t (buffer:  bu)
		Process char 799 =>   (buffer:  but)
		Process char 800 => m (buffer:  but )
		Process char 801 => i (buffer:  but m)
		Process char 802 => s (buffer:  but mi)
		Process char 803 => s (buffer:  but mis)
		Process char 804 => i (buffer:  but miss)
		Process char 805 => n (buffer:  but missi)
		Process char 806 => g (buffer:  but missin)
		Process char 807 =>   (buffer:  but missing)
		Process char 808 => B (buffer:  but missing )
		Process char 809 => R (buffer:  but missing B)
		Process char 810 => E (buffer:  but missing BR)
		Process char 811 => A (buffer:  but missing BRE)
		Process char 812 => K (buffer:  but missing BREA)
		Process char 813 => S (buffer:  but missing BREAK)
		Process char 814 => . (buffer:  but missing BREAKS)
	=> Added token T_STRING ( but missing BREAKS)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\ns
		=> Looking ahead 3 chars => .\nsw
		=> Looking ahead 4 chars => .\nswi
		=> Looking ahead 5 chars => .\nswit
		=> Looking ahead 6 chars => .\nswitc
		=> Looking ahead 7 chars => .\nswitch
		=> Looking ahead 8 chars => .\nswitch 
		=> Looking ahead 9 chars => .\nswitch (
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 815 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 816 => s (buffer: )
	Process char 817 => w (buffer: s)
	Process char 818 => i (buffer: sw)
	Process char 819 => t (buffer: swi)
	Process char 820 => c (buffer: swit)
	Process char 821 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (s
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 822 =>   (buffer: )
	Process char 823 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (s
		=> Looking ahead 2 chars => (so
		=> Looking ahead 3 chars => (som
		=> Looking ahead 4 chars => (some
		=> Looking ahead 5 chars => (somet
		=> Looking ahead 6 chars => (someth
		=> Looking ahead 7 chars => (somethi
		=> Looking ahead 8 chars => (somethin
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 824 => s (buffer: )
	Process char 825 => o (buffer: s)
	Process char 826 => m (buffer: so)
	Process char 827 => e (buffer: som)
	Process char 828 => t (buffer: some)
	Process char 829 => h (buffer: somet)
	Process char 830 => i (buffer: someth)
	Process char 831 => n (buffer: somethi)
	Process char 832 => g (buffer: somethin)
	Process char 833 => ) (buffer: something)
	=> Added token T_STRING (something)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 834 =>   (buffer: )
	Process char 835 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 836 => \n (buffer: )
	Process char 837 =>   (buffer: \n)
	Process char 838 =>   (buffer: \n )
	Process char 839 =>   (buffer: \n  )
	Process char 840 =>   (buffer: \n   )
	Process char 841 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 842 => a (buffer: c)
	Process char 843 => s (buffer: ca)
	Process char 844 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '1
		=> Looking ahead 4 chars => case '1'
		=> Looking ahead 5 chars => case '1':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 845 =>   (buffer: )
	Process char 846 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 847 => 1 (buffer: ')
		Process char 848 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 849 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 850 => \n (buffer: )
	Process char 851 =>   (buffer: \n)
	Process char 852 =>   (buffer: \n )
	Process char 853 =>   (buffer: \n  )
	Process char 854 =>   (buffer: \n   )
	Process char 855 =>   (buffer: \n    )
	Process char 856 =>   (buffer: \n     )
	Process char 857 =>   (buffer: \n      )
	Process char 858 =>   (buffer: \n       )
	Process char 859 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 860 => y (buffer: m)
	Process char 861 => v (buffer: my)
	Process char 862 => a (buffer: myv)
	Process char 863 => r (buffer: myva)
	Process char 864 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 865 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '1
		=> Looking ahead 4 chars => = '1'
		=> Looking ahead 5 chars => = '1';
		=> Looking ahead 6 chars => = '1';\n
		=> Looking ahead 7 chars => = '1';\n\n
		=> Looking ahead 8 chars => = '1';\n\n 
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 866 =>   (buffer: )
	Process char 867 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 868 => 1 (buffer: ')
		Process char 869 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 870 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 871 => \n (buffer: )
	Process char 872 => \n (buffer: \n)
	Process char 873 =>   (buffer: \n\n)
	Process char 874 =>   (buffer: \n\n )
	Process char 875 =>   (buffer: \n\n  )
	Process char 876 =>   (buffer: \n\n   )
	Process char 877 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 878 => a (buffer: c)
	Process char 879 => s (buffer: ca)
	Process char 880 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '2
		=> Looking ahead 4 chars => case '2'
		=> Looking ahead 5 chars => case '2':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 881 =>   (buffer: )
	Process char 882 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 883 => 2 (buffer: ')
		Process char 884 => ' (buffer: '2)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('2')
	Process char 885 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    c
		=> Looking ahead 7 chars => :\n    ca
		=> Looking ahead 8 chars => :\n    cas
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 886 => \n (buffer: )
	Process char 887 =>   (buffer: \n)
	Process char 888 =>   (buffer: \n )
	Process char 889 =>   (buffer: \n  )
	Process char 890 =>   (buffer: \n   )
	Process char 891 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 892 => a (buffer: c)
	Process char 893 => s (buffer: ca)
	Process char 894 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '3
		=> Looking ahead 4 chars => case '3'
		=> Looking ahead 5 chars => case '3':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 895 =>   (buffer: )
	Process char 896 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 897 => 3 (buffer: ')
		Process char 898 => ' (buffer: '3)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('3')
	Process char 899 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 900 => \n (buffer: )
	Process char 901 =>   (buffer: \n)
	Process char 902 =>   (buffer: \n )
	Process char 903 =>   (buffer: \n  )
	Process char 904 =>   (buffer: \n   )
	Process char 905 =>   (buffer: \n    )
	Process char 906 =>   (buffer: \n     )
	Process char 907 =>   (buffer: \n      )
	Process char 908 =>   (buffer: \n       )
	Process char 909 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 910 => y (buffer: m)
	Process char 911 => v (buffer: my)
	Process char 912 => a (buffer: myv)
	Process char 913 => r (buffer: myva)
	Process char 914 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 915 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '5
		=> Looking ahead 4 chars => = '5'
		=> Looking ahead 5 chars => = '5';
		=> Looking ahead 6 chars => = '5';\n
		=> Looking ahead 7 chars => = '5';\n\n
		=> Looking ahead 8 chars => = '5';\n\n 
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 916 =>   (buffer: )
	Process char 917 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 918 => 5 (buffer: ')
		Process char 919 => ' (buffer: '5)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('5')
	Process char 920 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 921 => \n (buffer: )
	Process char 922 => \n (buffer: \n)
	Process char 923 =>   (buffer: \n\n)
	Process char 924 =>   (buffer: \n\n )
	Process char 925 =>   (buffer: \n\n  )
	Process char 926 =>   (buffer: \n\n   )
	Process char 927 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 928 => a (buffer: c)
	Process char 929 => s (buffer: ca)
	Process char 930 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '4
		=> Looking ahead 4 chars => case '4'
		=> Looking ahead 5 chars => case '4':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 931 =>   (buffer: )
	Process char 932 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 933 => 4 (buffer: ')
		Process char 934 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 935 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 936 => \n (buffer: )
	Process char 937 =>   (buffer: \n)
	Process char 938 =>   (buffer: \n )
	Process char 939 =>   (buffer: \n  )
	Process char 940 =>   (buffer: \n   )
	Process char 941 =>   (buffer: \n    )
	Process char 942 =>   (buffer: \n     )
	Process char 943 =>   (buffer: \n      )
	Process char 944 =>   (buffer: \n       )
	Process char 945 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 946 => y (buffer: m)
	Process char 947 => v (buffer: my)
	Process char 948 => a (buffer: myv)
	Process char 949 => r (buffer: myva)
	Process char 950 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 951 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '4
		=> Looking ahead 4 chars => = '4'
		=> Looking ahead 5 chars => = '4';
		=> Looking ahead 6 chars => = '4';\n
		=> Looking ahead 7 chars => = '4';\n\n
		=> Looking ahead 8 chars => = '4';\n\n 
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 952 =>   (buffer: )
	Process char 953 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 954 => 4 (buffer: ')
		Process char 955 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 956 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 957 => \n (buffer: )
	Process char 958 => \n (buffer: \n)
	Process char 959 =>   (buffer: \n\n)
	Process char 960 =>   (buffer: \n\n )
	Process char 961 =>   (buffer: \n\n  )
	Process char 962 =>   (buffer: \n\n   )
	Process char 963 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 964 => e (buffer: d)
	Process char 965 => f (buffer: de)
	Process char 966 => a (buffer: def)
	Process char 967 => u (buffer: defa)
	Process char 968 => l (buffer: defau)
	Process char 969 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 970 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 971 => \n (buffer: )
	Process char 972 =>   (buffer: \n)
	Process char 973 =>   (buffer: \n )
	Process char 974 =>   (buffer: \n  )
	Process char 975 =>   (buffer: \n   )
	Process char 976 =>   (buffer: \n    )
	Process char 977 =>   (buffer: \n     )
	Process char 978 =>   (buffer: \n      )
	Process char 979 =>   (buffer: \n       )
	Process char 980 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 981 => y (buffer: m)
	Process char 982 => v (buffer: my)
	Process char 983 => a (buffer: myv)
	Process char 984 => r (buffer: myva)
	Process char 985 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 986 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = n
		=> Looking ahead 3 chars => = nu
		=> Looking ahead 4 chars => = nul
		=> Looking ahead 5 chars => = null
		=> Looking ahead 6 chars => = null;
		=> Looking ahead 7 chars => = null;\n
		=> Looking ahead 8 chars => = null;\n}
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 987 =>   (buffer: )
	Process char 988 => n (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 989 => u (buffer: n)
	Process char 990 => l (buffer: nu)
	Process char 991 => l (buffer: nul)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => null;
		=> Looking ahead 2 chars => null;\n
		=> Looking ahead 3 chars => null;\n}
		=> Looking ahead 4 chars => null;\n}\n
		=> Looking ahead 5 chars => null;\n}\n\n
		* look ahead found nothing *
	=> Added token T_NULL (null)
	Process char 992 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\n/
		=> Looking ahead 6 chars => ;\n}\n\n//
		=> Looking ahead 7 chars => ;\n}\n\n// 
		=> Looking ahead 8 chars => ;\n}\n\n// I
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 993 => \n (buffer: )
	Process char 994 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\n/
		=> Looking ahead 4 chars => }\n\n//
		=> Looking ahead 5 chars => }\n\n// 
		=> Looking ahead 6 chars => }\n\n// I
		=> Looking ahead 7 chars => }\n\n// In
		=> Looking ahead 8 chars => }\n\n// Inv
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 995 => \n (buffer: )
	Process char 996 => \n (buffer: \n)
	Process char 997 => / (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 997 *
	Process char 998 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // I
		=> Looking ahead 3 chars => // In
		=> Looking ahead 4 chars => // Inv
		=> Looking ahead 5 chars => // Inva
		=> Looking ahead 6 chars => // Inval
		=> Looking ahead 7 chars => // Invali
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 999 =>   (buffer: )
		Process char 1000 => I (buffer:  )
		Process char 1001 => n (buffer:  I)
		Process char 1002 => v (buffer:  In)
		Process char 1003 => a (buffer:  Inv)
		Process char 1004 => l (buffer:  Inva)
		Process char 1005 => i (buffer:  Inval)
		Process char 1006 => d (buffer:  Invali)
		Process char 1007 => , (buffer:  Invalid)
	=> Added token T_STRING ( Invalid)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => , 
		=> Looking ahead 2 chars => , a
		=> Looking ahead 3 chars => , an
		=> Looking ahead 4 chars => , and
		=> Looking ahead 5 chars => , and 
		=> Looking ahead 6 chars => , and m
		=> Looking ahead 7 chars => , and mi
		=> Looking ahead 8 chars => , and mis
		=> Looking ahead 9 chars => , and miss
		* look ahead found nothing *
	=> Added token T_COMMA (,)
		Process char 1008 =>   (buffer: )
		Process char 1009 => a (buffer:  )
		Process char 1010 => n (buffer:  a)
		Process char 1011 => d (buffer:  an)
		Process char 1012 =>   (buffer:  and)
		Process char 1013 => m (buffer:  and )
		Process char 1014 => i (buffer:  and m)
		Process char 1015 => s (buffer:  and mi)
		Process char 1016 => s (buffer:  and mis)
		Process char 1017 => i (buffer:  and miss)
		Process char 1018 => n (buffer:  and missi)
		Process char 1019 => g (buffer:  and missin)
		Process char 1020 =>   (buffer:  and missing)
		Process char 1021 => B (buffer:  and missing )
		Process char 1022 => R (buffer:  and missing B)
		Process char 1023 => E (buffer:  and missing BR)
		Process char 1024 => A (buffer:  and missing BRE)
		Process char 1025 => K (buffer:  and missing BREA)
		Process char 1026 => S (buffer:  and missing BREAK)
		Process char 1027 => . (buffer:  and missing BREAKS)
	=> Added token T_STRING ( and missing BREAKS)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\ns
		=> Looking ahead 3 chars => .\nsw
		=> Looking ahead 4 chars => .\nswi
		=> Looking ahead 5 chars => .\nswit
		=> Looking ahead 6 chars => .\nswitc
		=> Looking ahead 7 chars => .\nswitch
		=> Looking ahead 8 chars => .\nswitch 
		=> Looking ahead 9 chars => .\nswitch (
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 1028 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 1029 => s (buffer: )
	Process char 1030 => w (buffer: s)
	Process char 1031 => i (buffer: sw)
	Process char 1032 => t (buffer: swi)
	Process char 1033 => c (buffer: swit)
	Process char 1034 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (s
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 1035 =>   (buffer: )
	Process char 1036 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (s
		=> Looking ahead 2 chars => (so
		=> Looking ahead 3 chars => (som
		=> Looking ahead 4 chars => (some
		=> Looking ahead 5 chars => (somet
		=> Looking ahead 6 chars => (someth
		=> Looking ahead 7 chars => (somethi
		=> Looking ahead 8 chars => (somethin
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 1037 => s (buffer: )
	Process char 1038 => o (buffer: s)
	Process char 1039 => m (buffer: so)
	Process char 1040 => e (buffer: som)
	Process char 1041 => t (buffer: some)
	Process char 1042 => h (buffer: somet)
	Process char 1043 => i (buffer: someth)
	Process char 1044 => n (buffer: somethi)
	Process char 1045 => g (buffer: somethin)
	Process char 1046 => ) (buffer: something)
	=> Added token T_STRING (something)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    C
		=> Looking ahead 9 chars => ) {\n    Ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 1047 =>   (buffer: )
	Process char 1048 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    C
		=> Looking ahead 7 chars => {\n    Ca
		=> Looking ahead 8 chars => {\n    Cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 1049 => \n (buffer: )
	Process char 1050 =>   (buffer: \n)
	Process char 1051 =>   (buffer: \n )
	Process char 1052 =>   (buffer: \n  )
	Process char 1053 =>   (buffer: \n   )
	Process char 1054 => C (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1055 => a (buffer: C)
	Process char 1056 => s (buffer: Ca)
	Process char 1057 => e (buffer: Cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => Case 
		=> Looking ahead 2 chars => Case '
		=> Looking ahead 3 chars => Case '1
		=> Looking ahead 4 chars => Case '1'
		=> Looking ahead 5 chars => Case '1' 
		* look ahead found nothing *
	=> Added token T_CASE (Case)
	Process char 1058 =>   (buffer: )
	Process char 1059 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1060 => 1 (buffer: ')
		Process char 1061 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 1062 =>   (buffer: )
	Process char 1063 => : (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1064 => \n (buffer: )
	Process char 1065 =>   (buffer: \n)
	Process char 1066 =>   (buffer: \n )
	Process char 1067 =>   (buffer: \n  )
	Process char 1068 =>   (buffer: \n   )
	Process char 1069 =>   (buffer: \n    )
	Process char 1070 =>   (buffer: \n     )
	Process char 1071 =>   (buffer: \n      )
	Process char 1072 =>   (buffer: \n       )
	Process char 1073 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 1074 => y (buffer: m)
	Process char 1075 => v (buffer: my)
	Process char 1076 => a (buffer: myv)
	Process char 1077 => r (buffer: myva)
	Process char 1078 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 1079 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '1
		=> Looking ahead 4 chars => = '1'
		=> Looking ahead 5 chars => = '1';
		=> Looking ahead 6 chars => = '1';\n
		=> Looking ahead 7 chars => = '1';\n\n
		=> Looking ahead 8 chars => = '1';\n\nc
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 1080 =>   (buffer: )
	Process char 1081 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1082 => 1 (buffer: ')
		Process char 1083 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 1084 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\nc
		=> Looking ahead 4 chars => ;\n\nca
		=> Looking ahead 5 chars => ;\n\ncas
		=> Looking ahead 6 chars => ;\n\ncase
		=> Looking ahead 7 chars => ;\n\ncase 
		=> Looking ahead 8 chars => ;\n\ncase  
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1085 => \n (buffer: )
	Process char 1086 => \n (buffer: \n)
	Process char 1087 => c (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 1088 => a (buffer: c)
	Process char 1089 => s (buffer: ca)
	Process char 1090 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case  
		=> Looking ahead 3 chars => case  '
		=> Looking ahead 4 chars => case  '2
		=> Looking ahead 5 chars => case  '2'
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1091 =>   (buffer: )
	Process char 1092 =>   (buffer:  )
	Process char 1093 => ' (buffer:   )
	=> Added token T_WHITESPACE (  )
		* looking for string closer *
		Process char 1094 => 2 (buffer: ')
		Process char 1095 => ' (buffer: '2)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('2')
	Process char 1096 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    c
		=> Looking ahead 7 chars => :\n    ca
		=> Looking ahead 8 chars => :\n    cas
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1097 => \n (buffer: )
	Process char 1098 =>   (buffer: \n)
	Process char 1099 =>   (buffer: \n )
	Process char 1100 =>   (buffer: \n  )
	Process char 1101 =>   (buffer: \n   )
	Process char 1102 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1103 => a (buffer: c)
	Process char 1104 => s (buffer: ca)
	Process char 1105 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case  
		=> Looking ahead 3 chars => case  '
		=> Looking ahead 4 chars => case  '3
		=> Looking ahead 5 chars => case  '3'
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1106 =>   (buffer: )
	Process char 1107 =>   (buffer:  )
	Process char 1108 => ' (buffer:   )
	=> Added token T_WHITESPACE (  )
		* looking for string closer *
		Process char 1109 => 3 (buffer: ')
		Process char 1110 => ' (buffer: '3)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('3')
	Process char 1111 =>   (buffer: )
	Process char 1112 => : (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1113 => \n (buffer: )
	Process char 1114 =>   (buffer: \n)
	Process char 1115 =>   (buffer: \n )
	Process char 1116 =>   (buffer: \n  )
	Process char 1117 =>   (buffer: \n   )
	Process char 1118 =>   (buffer: \n    )
	Process char 1119 =>   (buffer: \n     )
	Process char 1120 =>   (buffer: \n      )
	Process char 1121 =>   (buffer: \n       )
	Process char 1122 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 1123 => y (buffer: m)
	Process char 1124 => v (buffer: my)
	Process char 1125 => a (buffer: myv)
	Process char 1126 => r (buffer: myva)
	Process char 1127 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 1128 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '5
		=> Looking ahead 4 chars => = '5'
		=> Looking ahead 5 chars => = '5';
		=> Looking ahead 6 chars => = '5';\n
		=> Looking ahead 7 chars => = '5';\n\n
		=> Looking ahead 8 chars => = '5';\n\n 
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 1129 =>   (buffer: )
	Process char 1130 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1131 => 5 (buffer: ')
		Process char 1132 => ' (buffer: '5)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('5')
	Process char 1133 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1134 => \n (buffer: )
	Process char 1135 => \n (buffer: \n)
	Process char 1136 =>   (buffer: \n\n)
	Process char 1137 =>   (buffer: \n\n )
	Process char 1138 =>   (buffer: \n\n  )
	Process char 1139 =>   (buffer: \n\n   )
	Process char 1140 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 1141 => a (buffer: c)
	Process char 1142 => s (buffer: ca)
	Process char 1143 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case'
		=> Looking ahead 2 chars => case'4
		=> Looking ahead 3 chars => case'4'
		=> Looking ahead 4 chars => case'4':
		=> Looking ahead 5 chars => case'4':\n
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1144 => ' (buffer: )
		* looking for string closer *
		Process char 1145 => 4 (buffer: ')
		Process char 1146 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 1147 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1148 => \n (buffer: )
	Process char 1149 =>   (buffer: \n)
	Process char 1150 =>   (buffer: \n )
	Process char 1151 =>   (buffer: \n  )
	Process char 1152 =>   (buffer: \n   )
	Process char 1153 =>   (buffer: \n    )
	Process char 1154 =>   (buffer: \n     )
	Process char 1155 =>   (buffer: \n      )
	Process char 1156 =>   (buffer: \n       )
	Process char 1157 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 1158 => y (buffer: m)
	Process char 1159 => v (buffer: my)
	Process char 1160 => a (buffer: myv)
	Process char 1161 => r (buffer: myva)
	Process char 1162 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 1163 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '4
		=> Looking ahead 4 chars => = '4'
		=> Looking ahead 5 chars => = '4';
		=> Looking ahead 6 chars => = '4';\n
		=> Looking ahead 7 chars => = '4';\n\n
		=> Looking ahead 8 chars => = '4';\n\n 
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 1164 =>   (buffer: )
	Process char 1165 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1166 => 4 (buffer: ')
		Process char 1167 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 1168 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    D
		=> Looking ahead 8 chars => ;\n\n    De
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1169 => \n (buffer: )
	Process char 1170 => \n (buffer: \n)
	Process char 1171 =>   (buffer: \n\n)
	Process char 1172 =>   (buffer: \n\n )
	Process char 1173 =>   (buffer: \n\n  )
	Process char 1174 =>   (buffer: \n\n   )
	Process char 1175 => D (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 1176 => e (buffer: D)
	Process char 1177 => f (buffer: De)
	Process char 1178 => a (buffer: Def)
	Process char 1179 => u (buffer: Defa)
	Process char 1180 => l (buffer: Defau)
	Process char 1181 => t (buffer: Defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => Default 
		=> Looking ahead 2 chars => Default :
		* look ahead found nothing *
	=> Added token T_DEFAULT (Default)
	Process char 1182 =>   (buffer: )
	Process char 1183 => : (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1184 => \n (buffer: )
	Process char 1185 =>   (buffer: \n)
	Process char 1186 =>   (buffer: \n )
	Process char 1187 =>   (buffer: \n  )
	Process char 1188 =>   (buffer: \n   )
	Process char 1189 =>   (buffer: \n    )
	Process char 1190 =>   (buffer: \n     )
	Process char 1191 =>   (buffer: \n      )
	Process char 1192 =>   (buffer: \n       )
	Process char 1193 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 1194 => y (buffer: m)
	Process char 1195 => v (buffer: my)
	Process char 1196 => a (buffer: myv)
	Process char 1197 => r (buffer: myva)
	Process char 1198 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 1199 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = n
		=> Looking ahead 3 chars => = nu
		=> Looking ahead 4 chars => = nul
		=> Looking ahead 5 chars => = null
		=> Looking ahead 6 chars => = null;
		=> Looking ahead 7 chars => = null;\n
		=> Looking ahead 8 chars => = null;\n 
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 1200 =>   (buffer: )
	Process char 1201 => n (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 1202 => u (buffer: n)
	Process char 1203 => l (buffer: nu)
	Process char 1204 => l (buffer: nul)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => null;
		=> Looking ahead 2 chars => null;\n
		=> Looking ahead 3 chars => null;\n 
		=> Looking ahead 4 chars => null;\n  
		=> Looking ahead 5 chars => null;\n   
		* look ahead found nothing *
	=> Added token T_NULL (null)
	Process char 1205 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n     
		=> Looking ahead 7 chars => ;\n      
		=> Looking ahead 8 chars => ;\n       
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1206 => \n (buffer: )
	Process char 1207 =>   (buffer: \n)
	Process char 1208 =>   (buffer: \n )
	Process char 1209 =>   (buffer: \n  )
	Process char 1210 =>   (buffer: \n   )
	Process char 1211 =>   (buffer: \n    )
	Process char 1212 =>   (buffer: \n     )
	Process char 1213 =>   (buffer: \n      )
	Process char 1214 =>   (buffer: \n       )
	Process char 1215 => s (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 1216 => o (buffer: s)
	Process char 1217 => m (buffer: so)
	Process char 1218 => e (buffer: som)
	Process char 1219 => t (buffer: some)
	Process char 1220 => h (buffer: somet)
	Process char 1221 => i (buffer: someth)
	Process char 1222 => n (buffer: somethi)
	Process char 1223 => g (buffer: somethin)
	Process char 1224 =>   (buffer: something)
	=> Added token T_STRING (something)
	Process char 1225 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = 'h
		=> Looking ahead 4 chars => = 'he
		=> Looking ahead 5 chars => = 'hel
		=> Looking ahead 6 chars => = 'hell
		=> Looking ahead 7 chars => = 'hello
		=> Looking ahead 8 chars => = 'hello'
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 1226 =>   (buffer: )
	Process char 1227 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1228 => h (buffer: ')
		Process char 1229 => e (buffer: 'h)
		Process char 1230 => l (buffer: 'he)
		Process char 1231 => l (buffer: 'hel)
		Process char 1232 => o (buffer: 'hell)
		Process char 1233 => ' (buffer: 'hello)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('hello')
	Process char 1234 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n     
		=> Looking ahead 7 chars => ;\n      
		=> Looking ahead 8 chars => ;\n       
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1235 => \n (buffer: )
	Process char 1236 =>   (buffer: \n)
	Process char 1237 =>   (buffer: \n )
	Process char 1238 =>   (buffer: \n  )
	Process char 1239 =>   (buffer: \n   )
	Process char 1240 =>   (buffer: \n    )
	Process char 1241 =>   (buffer: \n     )
	Process char 1242 =>   (buffer: \n      )
	Process char 1243 =>   (buffer: \n       )
	Process char 1244 => o (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 1245 => t (buffer: o)
	Process char 1246 => h (buffer: ot)
	Process char 1247 => e (buffer: oth)
	Process char 1248 => r (buffer: othe)
	Process char 1249 =>   (buffer: other)
	=> Added token T_STRING (other)
	Process char 1250 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = 'h
		=> Looking ahead 4 chars => = 'hi
		=> Looking ahead 5 chars => = 'hi'
		=> Looking ahead 6 chars => = 'hi';
		=> Looking ahead 7 chars => = 'hi';\n
		=> Looking ahead 8 chars => = 'hi';\n 
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 1251 =>   (buffer: )
	Process char 1252 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1253 => h (buffer: ')
		Process char 1254 => i (buffer: 'h)
		Process char 1255 => ' (buffer: 'hi)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('hi')
	Process char 1256 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    }
		=> Looking ahead 7 chars => ;\n    }\n
		=> Looking ahead 8 chars => ;\n    }\n\n
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1257 => \n (buffer: )
	Process char 1258 =>   (buffer: \n)
	Process char 1259 =>   (buffer: \n )
	Process char 1260 =>   (buffer: \n  )
	Process char 1261 =>   (buffer: \n   )
	Process char 1262 => } (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\n/
		=> Looking ahead 4 chars => }\n\n//
		=> Looking ahead 5 chars => }\n\n// 
		=> Looking ahead 6 chars => }\n\n// V
		=> Looking ahead 7 chars => }\n\n// Va
		=> Looking ahead 8 chars => }\n\n// Val
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 1263 => \n (buffer: )
	Process char 1264 => \n (buffer: \n)
	Process char 1265 => / (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 1265 *
	Process char 1266 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // V
		=> Looking ahead 3 chars => // Va
		=> Looking ahead 4 chars => // Val
		=> Looking ahead 5 chars => // Vali
		=> Looking ahead 6 chars => // Valid
		=> Looking ahead 7 chars => // Valid\n
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 1267 =>   (buffer: )
		Process char 1268 => V (buffer:  )
		Process char 1269 => a (buffer:  V)
		Process char 1270 => l (buffer:  Va)
		Process char 1271 => i (buffer:  Val)
		Process char 1272 => d (buffer:  Vali)
		Process char 1273 => \n (buffer:  Valid)
		* found end of comment *
	=> Added token T_STRING ( Valid\n)
	Process char 1274 => s (buffer: )
	Process char 1275 => w (buffer: s)
	Process char 1276 => i (buffer: sw)
	Process char 1277 => t (buffer: swi)
	Process char 1278 => c (buffer: swit)
	Process char 1279 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (c
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 1280 =>   (buffer: )
	Process char 1281 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (c
		=> Looking ahead 2 chars => (co
		=> Looking ahead 3 chars => (con
		=> Looking ahead 4 chars => (cond
		=> Looking ahead 5 chars => (condi
		=> Looking ahead 6 chars => (condit
		=> Looking ahead 7 chars => (conditi
		=> Looking ahead 8 chars => (conditio
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 1282 => c (buffer: )
	Process char 1283 => o (buffer: c)
	Process char 1284 => n (buffer: co)
	Process char 1285 => d (buffer: con)
	Process char 1286 => i (buffer: cond)
	Process char 1287 => t (buffer: condi)
	Process char 1288 => i (buffer: condit)
	Process char 1289 => o (buffer: conditi)
	Process char 1290 => n (buffer: conditio)
	Process char 1291 => ) (buffer: condition)
	=> Added token T_STRING (condition)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 1292 =>   (buffer: )
	Process char 1293 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 1294 => \n (buffer: )
	Process char 1295 =>   (buffer: \n)
	Process char 1296 =>   (buffer: \n )
	Process char 1297 =>   (buffer: \n  )
	Process char 1298 =>   (buffer: \n   )
	Process char 1299 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1300 => a (buffer: c)
	Process char 1301 => s (buffer: ca)
	Process char 1302 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case 's
		=> Looking ahead 4 chars => case 'st
		=> Looking ahead 5 chars => case 'str
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1303 =>   (buffer: )
	Process char 1304 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1305 => s (buffer: ')
		Process char 1306 => t (buffer: 's)
		Process char 1307 => r (buffer: 'st)
		Process char 1308 => i (buffer: 'str)
		Process char 1309 => n (buffer: 'stri)
		Process char 1310 => g (buffer: 'strin)
		Process char 1311 => ' (buffer: 'string)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('string')
	Process char 1312 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1313 => \n (buffer: )
	Process char 1314 =>   (buffer: \n)
	Process char 1315 =>   (buffer: \n )
	Process char 1316 =>   (buffer: \n  )
	Process char 1317 =>   (buffer: \n   )
	Process char 1318 =>   (buffer: \n    )
	Process char 1319 =>   (buffer: \n     )
	Process char 1320 =>   (buffer: \n      )
	Process char 1321 =>   (buffer: \n       )
	Process char 1322 => v (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 1323 => a (buffer: v)
	Process char 1324 => r (buffer: va)
	Process char 1325 => S (buffer: var)
	Process char 1326 => t (buffer: varS)
	Process char 1327 => r (buffer: varSt)
	Process char 1328 =>   (buffer: varStr)
	=> Added token T_STRING (varStr)
	Process char 1329 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = 't
		=> Looking ahead 4 chars => = 'te
		=> Looking ahead 5 chars => = 'tes
		=> Looking ahead 6 chars => = 'test
		=> Looking ahead 7 chars => = 'test'
		=> Looking ahead 8 chars => = 'test';
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 1330 =>   (buffer: )
	Process char 1331 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1332 => t (buffer: ')
		Process char 1333 => e (buffer: 't)
		Process char 1334 => s (buffer: 'te)
		Process char 1335 => t (buffer: 'tes)
		Process char 1336 => ' (buffer: 'test)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('test')
	Process char 1337 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1338 => \n (buffer: )
	Process char 1339 => \n (buffer: \n)
	Process char 1340 =>   (buffer: \n\n)
	Process char 1341 =>   (buffer: \n\n )
	Process char 1342 =>   (buffer: \n\n  )
	Process char 1343 =>   (buffer: \n\n   )
	Process char 1344 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 1345 => e (buffer: d)
	Process char 1346 => f (buffer: de)
	Process char 1347 => a (buffer: def)
	Process char 1348 => u (buffer: defa)
	Process char 1349 => l (buffer: defau)
	Process char 1350 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 1351 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1352 => \n (buffer: )
	Process char 1353 =>   (buffer: \n)
	Process char 1354 =>   (buffer: \n )
	Process char 1355 =>   (buffer: \n  )
	Process char 1356 =>   (buffer: \n   )
	Process char 1357 =>   (buffer: \n    )
	Process char 1358 =>   (buffer: \n     )
	Process char 1359 =>   (buffer: \n      )
	Process char 1360 =>   (buffer: \n       )
	Process char 1361 => / (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	* token possibly starts a regular expression *
	* found end of regular expression at token 1362 *
	* tokens after regular expression do not look correct *
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 1361 *
	Process char 1362 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // I
		=> Looking ahead 3 chars => // Ig
		=> Looking ahead 4 chars => // Ign
		=> Looking ahead 5 chars => // Igno
		=> Looking ahead 6 chars => // Ignor
		=> Looking ahead 7 chars => // Ignore
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 1363 =>   (buffer: )
		Process char 1364 => I (buffer:  )
		Process char 1365 => g (buffer:  I)
		Process char 1366 => n (buffer:  Ig)
		Process char 1367 => o (buffer:  Ign)
		Process char 1368 => r (buffer:  Igno)
		Process char 1369 => e (buffer:  Ignor)
		Process char 1370 =>   (buffer:  Ignore)
		Process char 1371 => t (buffer:  Ignore )
		Process char 1372 => h (buffer:  Ignore t)
		Process char 1373 => e (buffer:  Ignore th)
		Process char 1374 =>   (buffer:  Ignore the)
		Process char 1375 => d (buffer:  Ignore the )
		Process char 1376 => e (buffer:  Ignore the d)
		Process char 1377 => f (buffer:  Ignore the de)
		Process char 1378 => a (buffer:  Ignore the def)
		Process char 1379 => u (buffer:  Ignore the defa)
		Process char 1380 => l (buffer:  Ignore the defau)
		Process char 1381 => t (buffer:  Ignore the defaul)
		Process char 1382 => . (buffer:  Ignore the default)
	=> Added token T_STRING ( Ignore the default)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\n 
		=> Looking ahead 3 chars => .\n  
		=> Looking ahead 4 chars => .\n   
		=> Looking ahead 5 chars => .\n    
		=> Looking ahead 6 chars => .\n    b
		=> Looking ahead 7 chars => .\n    br
		=> Looking ahead 8 chars => .\n    bre
		=> Looking ahead 9 chars => .\n    brea
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 1383 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 1384 =>   (buffer: )
	Process char 1385 =>   (buffer:  )
	Process char 1386 =>   (buffer:   )
	Process char 1387 =>   (buffer:    )
	Process char 1388 => b (buffer:     )
	=> Added token T_WHITESPACE (    )
	Process char 1389 => r (buffer: b)
	Process char 1390 => e (buffer: br)
	Process char 1391 => a (buffer: bre)
	Process char 1392 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 1393 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\n/
		=> Looking ahead 6 chars => ;\n}\n\n//
		=> Looking ahead 7 chars => ;\n}\n\n// 
		=> Looking ahead 8 chars => ;\n}\n\n// N
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1394 => \n (buffer: )
	Process char 1395 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\n/
		=> Looking ahead 4 chars => }\n\n//
		=> Looking ahead 5 chars => }\n\n// 
		=> Looking ahead 6 chars => }\n\n// N
		=> Looking ahead 7 chars => }\n\n// No
		=> Looking ahead 8 chars => }\n\n// No 
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 1396 => \n (buffer: )
	Process char 1397 => \n (buffer: \n)
	Process char 1398 => / (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 1398 *
	Process char 1399 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // N
		=> Looking ahead 3 chars => // No
		=> Looking ahead 4 chars => // No 
		=> Looking ahead 5 chars => // No d
		=> Looking ahead 6 chars => // No de
		=> Looking ahead 7 chars => // No def
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 1400 =>   (buffer: )
		Process char 1401 => N (buffer:  )
		Process char 1402 => o (buffer:  N)
		Process char 1403 =>   (buffer:  No)
		Process char 1404 => d (buffer:  No )
		Process char 1405 => e (buffer:  No d)
		Process char 1406 => f (buffer:  No de)
		Process char 1407 => a (buffer:  No def)
		Process char 1408 => u (buffer:  No defa)
		Process char 1409 => l (buffer:  No defau)
		Process char 1410 => t (buffer:  No defaul)
		Process char 1411 =>   (buffer:  No default)
		Process char 1412 => c (buffer:  No default )
		Process char 1413 => o (buffer:  No default c)
		Process char 1414 => m (buffer:  No default co)
		Process char 1415 => m (buffer:  No default com)
		Process char 1416 => e (buffer:  No default comm)
		Process char 1417 => n (buffer:  No default comme)
		Process char 1418 => t (buffer:  No default commen)
		Process char 1419 => \n (buffer:  No default comment)
		* found end of comment *
	=> Added token T_STRING ( No default comment\n)
	Process char 1420 => s (buffer: )
	Process char 1421 => w (buffer: s)
	Process char 1422 => i (buffer: sw)
	Process char 1423 => t (buffer: swi)
	Process char 1424 => c (buffer: swit)
	Process char 1425 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (c
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 1426 =>   (buffer: )
	Process char 1427 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (c
		=> Looking ahead 2 chars => (co
		=> Looking ahead 3 chars => (con
		=> Looking ahead 4 chars => (cond
		=> Looking ahead 5 chars => (condi
		=> Looking ahead 6 chars => (condit
		=> Looking ahead 7 chars => (conditi
		=> Looking ahead 8 chars => (conditio
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 1428 => c (buffer: )
	Process char 1429 => o (buffer: c)
	Process char 1430 => n (buffer: co)
	Process char 1431 => d (buffer: con)
	Process char 1432 => i (buffer: cond)
	Process char 1433 => t (buffer: condi)
	Process char 1434 => i (buffer: condit)
	Process char 1435 => o (buffer: conditi)
	Process char 1436 => n (buffer: conditio)
	Process char 1437 => ) (buffer: condition)
	=> Added token T_STRING (condition)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 1438 =>   (buffer: )
	Process char 1439 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 1440 => \n (buffer: )
	Process char 1441 =>   (buffer: \n)
	Process char 1442 =>   (buffer: \n )
	Process char 1443 =>   (buffer: \n  )
	Process char 1444 =>   (buffer: \n   )
	Process char 1445 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1446 => a (buffer: c)
	Process char 1447 => s (buffer: ca)
	Process char 1448 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case 's
		=> Looking ahead 4 chars => case 'st
		=> Looking ahead 5 chars => case 'str
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1449 =>   (buffer: )
	Process char 1450 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1451 => s (buffer: ')
		Process char 1452 => t (buffer: 's)
		Process char 1453 => r (buffer: 'st)
		Process char 1454 => i (buffer: 'str)
		Process char 1455 => n (buffer: 'stri)
		Process char 1456 => g (buffer: 'strin)
		Process char 1457 => ' (buffer: 'string)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('string')
	Process char 1458 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1459 => \n (buffer: )
	Process char 1460 =>   (buffer: \n)
	Process char 1461 =>   (buffer: \n )
	Process char 1462 =>   (buffer: \n  )
	Process char 1463 =>   (buffer: \n   )
	Process char 1464 =>   (buffer: \n    )
	Process char 1465 =>   (buffer: \n     )
	Process char 1466 =>   (buffer: \n      )
	Process char 1467 =>   (buffer: \n       )
	Process char 1468 => v (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 1469 => a (buffer: v)
	Process char 1470 => r (buffer: va)
	Process char 1471 => S (buffer: var)
	Process char 1472 => t (buffer: varS)
	Process char 1473 => r (buffer: varSt)
	Process char 1474 =>   (buffer: varStr)
	=> Added token T_STRING (varStr)
	Process char 1475 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = 't
		=> Looking ahead 4 chars => = 'te
		=> Looking ahead 5 chars => = 'tes
		=> Looking ahead 6 chars => = 'test
		=> Looking ahead 7 chars => = 'test'
		=> Looking ahead 8 chars => = 'test';
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 1476 =>   (buffer: )
	Process char 1477 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1478 => t (buffer: ')
		Process char 1479 => e (buffer: 't)
		Process char 1480 => s (buffer: 'te)
		Process char 1481 => t (buffer: 'tes)
		Process char 1482 => ' (buffer: 'test)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('test')
	Process char 1483 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1484 => \n (buffer: )
	Process char 1485 => \n (buffer: \n)
	Process char 1486 =>   (buffer: \n\n)
	Process char 1487 =>   (buffer: \n\n )
	Process char 1488 =>   (buffer: \n\n  )
	Process char 1489 =>   (buffer: \n\n   )
	Process char 1490 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 1491 => e (buffer: d)
	Process char 1492 => f (buffer: de)
	Process char 1493 => a (buffer: def)
	Process char 1494 => u (buffer: defa)
	Process char 1495 => l (buffer: defau)
	Process char 1496 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 1497 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    b
		=> Looking ahead 7 chars => :\n    br
		=> Looking ahead 8 chars => :\n    bre
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1498 => \n (buffer: )
	Process char 1499 =>   (buffer: \n)
	Process char 1500 =>   (buffer: \n )
	Process char 1501 =>   (buffer: \n  )
	Process char 1502 =>   (buffer: \n   )
	Process char 1503 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1504 => r (buffer: b)
	Process char 1505 => e (buffer: br)
	Process char 1506 => a (buffer: bre)
	Process char 1507 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 1508 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\n/
		=> Looking ahead 6 chars => ;\n}\n\n//
		=> Looking ahead 7 chars => ;\n}\n\n// 
		=> Looking ahead 8 chars => ;\n}\n\n// B
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1509 => \n (buffer: )
	Process char 1510 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\n/
		=> Looking ahead 4 chars => }\n\n//
		=> Looking ahead 5 chars => }\n\n// 
		=> Looking ahead 6 chars => }\n\n// B
		=> Looking ahead 7 chars => }\n\n// Br
		=> Looking ahead 8 chars => }\n\n// Bre
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 1511 => \n (buffer: )
	Process char 1512 => \n (buffer: \n)
	Process char 1513 => / (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 1513 *
	Process char 1514 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // B
		=> Looking ahead 3 chars => // Br
		=> Looking ahead 4 chars => // Bre
		=> Looking ahead 5 chars => // Brea
		=> Looking ahead 6 chars => // Break
		=> Looking ahead 7 chars => // Break 
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 1515 =>   (buffer: )
		Process char 1516 => B (buffer:  )
		Process char 1517 => r (buffer:  B)
		Process char 1518 => e (buffer:  Br)
		Process char 1519 => a (buffer:  Bre)
		Process char 1520 => k (buffer:  Brea)
		Process char 1521 =>   (buffer:  Break)
		Process char 1522 => p (buffer:  Break )
		Process char 1523 => r (buffer:  Break p)
		Process char 1524 => o (buffer:  Break pr)
		Process char 1525 => b (buffer:  Break pro)
		Process char 1526 => l (buffer:  Break prob)
		Process char 1527 => e (buffer:  Break probl)
		Process char 1528 => m (buffer:  Break proble)
		Process char 1529 => s (buffer:  Break problem)
		Process char 1530 => \n (buffer:  Break problems)
		* found end of comment *
	=> Added token T_STRING ( Break problems\n)
	Process char 1531 => s (buffer: )
	Process char 1532 => w (buffer: s)
	Process char 1533 => i (buffer: sw)
	Process char 1534 => t (buffer: swi)
	Process char 1535 => c (buffer: swit)
	Process char 1536 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (c
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 1537 =>   (buffer: )
	Process char 1538 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (c
		=> Looking ahead 2 chars => (co
		=> Looking ahead 3 chars => (con
		=> Looking ahead 4 chars => (cond
		=> Looking ahead 5 chars => (condi
		=> Looking ahead 6 chars => (condit
		=> Looking ahead 7 chars => (conditi
		=> Looking ahead 8 chars => (conditio
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 1539 => c (buffer: )
	Process char 1540 => o (buffer: c)
	Process char 1541 => n (buffer: co)
	Process char 1542 => d (buffer: con)
	Process char 1543 => i (buffer: cond)
	Process char 1544 => t (buffer: condi)
	Process char 1545 => i (buffer: condit)
	Process char 1546 => o (buffer: conditi)
	Process char 1547 => n (buffer: conditio)
	Process char 1548 => ) (buffer: condition)
	=> Added token T_STRING (condition)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 1549 =>   (buffer: )
	Process char 1550 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 1551 => \n (buffer: )
	Process char 1552 =>   (buffer: \n)
	Process char 1553 =>   (buffer: \n )
	Process char 1554 =>   (buffer: \n  )
	Process char 1555 =>   (buffer: \n   )
	Process char 1556 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1557 => a (buffer: c)
	Process char 1558 => s (buffer: ca)
	Process char 1559 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case 's
		=> Looking ahead 4 chars => case 'st
		=> Looking ahead 5 chars => case 'str
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1560 =>   (buffer: )
	Process char 1561 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1562 => s (buffer: ')
		Process char 1563 => t (buffer: 's)
		Process char 1564 => r (buffer: 'st)
		Process char 1565 => i (buffer: 'str)
		Process char 1566 => n (buffer: 'stri)
		Process char 1567 => g (buffer: 'strin)
		Process char 1568 => ' (buffer: 'string)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('string')
	Process char 1569 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n\n
		=> Looking ahead 3 chars => :\n\n\n
		=> Looking ahead 4 chars => :\n\n\n 
		=> Looking ahead 5 chars => :\n\n\n  
		=> Looking ahead 6 chars => :\n\n\n   
		=> Looking ahead 7 chars => :\n\n\n    
		=> Looking ahead 8 chars => :\n\n\n     
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1570 => \n (buffer: )
	Process char 1571 => \n (buffer: \n)
	Process char 1572 => \n (buffer: \n\n)
	Process char 1573 =>   (buffer: \n\n\n)
	Process char 1574 =>   (buffer: \n\n\n )
	Process char 1575 =>   (buffer: \n\n\n  )
	Process char 1576 =>   (buffer: \n\n\n   )
	Process char 1577 =>   (buffer: \n\n\n    )
	Process char 1578 =>   (buffer: \n\n\n     )
	Process char 1579 =>   (buffer: \n\n\n      )
	Process char 1580 =>   (buffer: \n\n\n       )
	Process char 1581 => v (buffer: \n\n\n        )
	=> Added token T_WHITESPACE (\n\n\n        )
	Process char 1582 => a (buffer: v)
	Process char 1583 => r (buffer: va)
	Process char 1584 => S (buffer: var)
	Process char 1585 => t (buffer: varS)
	Process char 1586 => r (buffer: varSt)
	Process char 1587 =>   (buffer: varStr)
	=> Added token T_STRING (varStr)
	Process char 1588 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = 't
		=> Looking ahead 4 chars => = 'te
		=> Looking ahead 5 chars => = 'tes
		=> Looking ahead 6 chars => = 'test
		=> Looking ahead 7 chars => = 'test'
		=> Looking ahead 8 chars => = 'test';
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 1589 =>   (buffer: )
	Process char 1590 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1591 => t (buffer: ')
		Process char 1592 => e (buffer: 't)
		Process char 1593 => s (buffer: 'te)
		Process char 1594 => t (buffer: 'tes)
		Process char 1595 => ' (buffer: 'test)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('test')
	Process char 1596 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    b
		=> Looking ahead 8 chars => ;\n\n    br
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1597 => \n (buffer: )
	Process char 1598 => \n (buffer: \n)
	Process char 1599 =>   (buffer: \n\n)
	Process char 1600 =>   (buffer: \n\n )
	Process char 1601 =>   (buffer: \n\n  )
	Process char 1602 =>   (buffer: \n\n   )
	Process char 1603 => b (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 1604 => r (buffer: b)
	Process char 1605 => e (buffer: br)
	Process char 1606 => a (buffer: bre)
	Process char 1607 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 1608 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n\n
		=> Looking ahead 4 chars => ;\n\n\n 
		=> Looking ahead 5 chars => ;\n\n\n  
		=> Looking ahead 6 chars => ;\n\n\n   
		=> Looking ahead 7 chars => ;\n\n\n    
		=> Looking ahead 8 chars => ;\n\n\n    c
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1609 => \n (buffer: )
	Process char 1610 => \n (buffer: \n)
	Process char 1611 => \n (buffer: \n\n)
	Process char 1612 =>   (buffer: \n\n\n)
	Process char 1613 =>   (buffer: \n\n\n )
	Process char 1614 =>   (buffer: \n\n\n  )
	Process char 1615 =>   (buffer: \n\n\n   )
	Process char 1616 => c (buffer: \n\n\n    )
	=> Added token T_WHITESPACE (\n\n\n    )
	Process char 1617 => a (buffer: c)
	Process char 1618 => s (buffer: ca)
	Process char 1619 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case 'b
		=> Looking ahead 4 chars => case 'bo
		=> Looking ahead 5 chars => case 'boo
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1620 =>   (buffer: )
	Process char 1621 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1622 => b (buffer: ')
		Process char 1623 => o (buffer: 'b)
		Process char 1624 => o (buffer: 'bo)
		Process char 1625 => l (buffer: 'boo)
		Process char 1626 => ' (buffer: 'bool)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('bool')
	Process char 1627 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1628 => \n (buffer: )
	Process char 1629 =>   (buffer: \n)
	Process char 1630 =>   (buffer: \n )
	Process char 1631 =>   (buffer: \n  )
	Process char 1632 =>   (buffer: \n   )
	Process char 1633 =>   (buffer: \n    )
	Process char 1634 =>   (buffer: \n     )
	Process char 1635 =>   (buffer: \n      )
	Process char 1636 =>   (buffer: \n       )
	Process char 1637 => v (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 1638 => a (buffer: v)
	Process char 1639 => r (buffer: va)
	Process char 1640 => S (buffer: var)
	Process char 1641 => t (buffer: varS)
	Process char 1642 => r (buffer: varSt)
	Process char 1643 =>   (buffer: varStr)
	=> Added token T_STRING (varStr)
	Process char 1644 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = 't
		=> Looking ahead 4 chars => = 'te
		=> Looking ahead 5 chars => = 'tes
		=> Looking ahead 6 chars => = 'test
		=> Looking ahead 7 chars => = 'test'
		=> Looking ahead 8 chars => = 'test';
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 1645 =>   (buffer: )
	Process char 1646 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1647 => t (buffer: ')
		Process char 1648 => e (buffer: 't)
		Process char 1649 => s (buffer: 'te)
		Process char 1650 => t (buffer: 'tes)
		Process char 1651 => ' (buffer: 'test)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('test')
	Process char 1652 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n\n
		=> Looking ahead 4 chars => ;\n\n\n 
		=> Looking ahead 5 chars => ;\n\n\n  
		=> Looking ahead 6 chars => ;\n\n\n   
		=> Looking ahead 7 chars => ;\n\n\n    
		=> Looking ahead 8 chars => ;\n\n\n    b
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1653 => \n (buffer: )
	Process char 1654 => \n (buffer: \n)
	Process char 1655 => \n (buffer: \n\n)
	Process char 1656 =>   (buffer: \n\n\n)
	Process char 1657 =>   (buffer: \n\n\n )
	Process char 1658 =>   (buffer: \n\n\n  )
	Process char 1659 =>   (buffer: \n\n\n   )
	Process char 1660 => b (buffer: \n\n\n    )
	=> Added token T_WHITESPACE (\n\n\n    )
	Process char 1661 => r (buffer: b)
	Process char 1662 => e (buffer: br)
	Process char 1663 => a (buffer: bre)
	Process char 1664 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n 
		=> Looking ahead 4 chars => break;\n  
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 1665 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    d
		=> Looking ahead 7 chars => ;\n    de
		=> Looking ahead 8 chars => ;\n    def
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1666 => \n (buffer: )
	Process char 1667 =>   (buffer: \n)
	Process char 1668 =>   (buffer: \n )
	Process char 1669 =>   (buffer: \n  )
	Process char 1670 =>   (buffer: \n   )
	Process char 1671 => d (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1672 => e (buffer: d)
	Process char 1673 => f (buffer: de)
	Process char 1674 => a (buffer: def)
	Process char 1675 => u (buffer: defa)
	Process char 1676 => l (buffer: defau)
	Process char 1677 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 1678 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n\n
		=> Looking ahead 3 chars => :\n\n 
		=> Looking ahead 4 chars => :\n\n  
		=> Looking ahead 5 chars => :\n\n   
		=> Looking ahead 6 chars => :\n\n    
		=> Looking ahead 7 chars => :\n\n     
		=> Looking ahead 8 chars => :\n\n      
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1679 => \n (buffer: )
	Process char 1680 => \n (buffer: \n)
	Process char 1681 =>   (buffer: \n\n)
	Process char 1682 =>   (buffer: \n\n )
	Process char 1683 =>   (buffer: \n\n  )
	Process char 1684 =>   (buffer: \n\n   )
	Process char 1685 =>   (buffer: \n\n    )
	Process char 1686 =>   (buffer: \n\n     )
	Process char 1687 =>   (buffer: \n\n      )
	Process char 1688 =>   (buffer: \n\n       )
	Process char 1689 => v (buffer: \n\n        )
	=> Added token T_WHITESPACE (\n\n        )
	Process char 1690 => a (buffer: v)
	Process char 1691 => r (buffer: va)
	Process char 1692 => S (buffer: var)
	Process char 1693 => t (buffer: varS)
	Process char 1694 => r (buffer: varSt)
	Process char 1695 =>   (buffer: varStr)
	=> Added token T_STRING (varStr)
	Process char 1696 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = 't
		=> Looking ahead 4 chars => = 'te
		=> Looking ahead 5 chars => = 'tes
		=> Looking ahead 6 chars => = 'test
		=> Looking ahead 7 chars => = 'test'
		=> Looking ahead 8 chars => = 'test';
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 1697 =>   (buffer: )
	Process char 1698 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1699 => t (buffer: ')
		Process char 1700 => e (buffer: 't)
		Process char 1701 => s (buffer: 'te)
		Process char 1702 => t (buffer: 'tes)
		Process char 1703 => ' (buffer: 'test)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('test')
	Process char 1704 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1705 => \n (buffer: )
	Process char 1706 =>   (buffer: \n)
	Process char 1707 =>   (buffer: \n )
	Process char 1708 =>   (buffer: \n  )
	Process char 1709 =>   (buffer: \n   )
	Process char 1710 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1711 => r (buffer: b)
	Process char 1712 => e (buffer: br)
	Process char 1713 => a (buffer: bre)
	Process char 1714 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n}
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 1715 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n}
		=> Looking ahead 4 chars => ;\n\n}\n
		=> Looking ahead 5 chars => ;\n\n}\n\n
		=> Looking ahead 6 chars => ;\n\n}\n\ns
		=> Looking ahead 7 chars => ;\n\n}\n\nsw
		=> Looking ahead 8 chars => ;\n\n}\n\nswi
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1716 => \n (buffer: )
	Process char 1717 => \n (buffer: \n)
	Process char 1718 => } (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\ns
		=> Looking ahead 4 chars => }\n\nsw
		=> Looking ahead 5 chars => }\n\nswi
		=> Looking ahead 6 chars => }\n\nswit
		=> Looking ahead 7 chars => }\n\nswitc
		=> Looking ahead 8 chars => }\n\nswitch
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 1719 => \n (buffer: )
	Process char 1720 => \n (buffer: \n)
	Process char 1721 => s (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 1722 => w (buffer: s)
	Process char 1723 => i (buffer: sw)
	Process char 1724 => t (buffer: swi)
	Process char 1725 => c (buffer: swit)
	Process char 1726 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (v
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 1727 =>   (buffer: )
	Process char 1728 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (v
		=> Looking ahead 2 chars => (va
		=> Looking ahead 3 chars => (var
		=> Looking ahead 4 chars => (var)
		=> Looking ahead 5 chars => (var) 
		=> Looking ahead 6 chars => (var) {
		=> Looking ahead 7 chars => (var) {\n
		=> Looking ahead 8 chars => (var) {\n 
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 1729 => v (buffer: )
	Process char 1730 => a (buffer: v)
	Process char 1731 => r (buffer: va)
		* buffer possibly contains token, looking ahead 6 chars *
		=> Looking ahead 1 chars => var)
		=> Looking ahead 2 chars => var) 
		=> Looking ahead 3 chars => var) {
		=> Looking ahead 4 chars => var) {\n
		=> Looking ahead 5 chars => var) {\n 
		=> Looking ahead 6 chars => var) {\n  
		* look ahead found nothing *
	=> Added token T_VAR (var)
	Process char 1732 => ) (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 1733 =>   (buffer: )
	Process char 1734 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 1735 => \n (buffer: )
	Process char 1736 =>   (buffer: \n)
	Process char 1737 =>   (buffer: \n )
	Process char 1738 =>   (buffer: \n  )
	Process char 1739 =>   (buffer: \n   )
	Process char 1740 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1741 => a (buffer: c)
	Process char 1742 => s (buffer: ca)
	Process char 1743 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case 'o
		=> Looking ahead 4 chars => case 'on
		=> Looking ahead 5 chars => case 'one
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1744 =>   (buffer: )
	Process char 1745 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1746 => o (buffer: ')
		Process char 1747 => n (buffer: 'o)
		Process char 1748 => e (buffer: 'on)
		Process char 1749 => ' (buffer: 'one)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('one')
	Process char 1750 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    c
		=> Looking ahead 7 chars => :\n    ca
		=> Looking ahead 8 chars => :\n    cas
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1751 => \n (buffer: )
	Process char 1752 =>   (buffer: \n)
	Process char 1753 =>   (buffer: \n )
	Process char 1754 =>   (buffer: \n  )
	Process char 1755 =>   (buffer: \n   )
	Process char 1756 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1757 => a (buffer: c)
	Process char 1758 => s (buffer: ca)
	Process char 1759 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case 't
		=> Looking ahead 4 chars => case 'tw
		=> Looking ahead 5 chars => case 'two
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1760 =>   (buffer: )
	Process char 1761 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1762 => t (buffer: ')
		Process char 1763 => w (buffer: 't)
		Process char 1764 => o (buffer: 'tw)
		Process char 1765 => ' (buffer: 'two)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('two')
	Process char 1766 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    b
		=> Looking ahead 7 chars => :\n    br
		=> Looking ahead 8 chars => :\n    bre
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1767 => \n (buffer: )
	Process char 1768 =>   (buffer: \n)
	Process char 1769 =>   (buffer: \n )
	Process char 1770 =>   (buffer: \n  )
	Process char 1771 =>   (buffer: \n   )
	Process char 1772 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1773 => r (buffer: b)
	Process char 1774 => e (buffer: br)
	Process char 1775 => a (buffer: bre)
	Process char 1776 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 1777 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1778 => \n (buffer: )
	Process char 1779 => \n (buffer: \n)
	Process char 1780 =>   (buffer: \n\n)
	Process char 1781 =>   (buffer: \n\n )
	Process char 1782 =>   (buffer: \n\n  )
	Process char 1783 =>   (buffer: \n\n   )
	Process char 1784 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 1785 => a (buffer: c)
	Process char 1786 => s (buffer: ca)
	Process char 1787 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case 't
		=> Looking ahead 4 chars => case 'th
		=> Looking ahead 5 chars => case 'thr
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1788 =>   (buffer: )
	Process char 1789 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1790 => t (buffer: ')
		Process char 1791 => h (buffer: 't)
		Process char 1792 => r (buffer: 'th)
		Process char 1793 => e (buffer: 'thr)
		Process char 1794 => e (buffer: 'thre)
		Process char 1795 => ' (buffer: 'three)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('three')
	Process char 1796 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1797 => \n (buffer: )
	Process char 1798 =>   (buffer: \n)
	Process char 1799 =>   (buffer: \n )
	Process char 1800 =>   (buffer: \n  )
	Process char 1801 =>   (buffer: \n   )
	Process char 1802 =>   (buffer: \n    )
	Process char 1803 =>   (buffer: \n     )
	Process char 1804 =>   (buffer: \n      )
	Process char 1805 =>   (buffer: \n       )
	Process char 1806 => / (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	* token possibly starts a regular expression *
	* found end of regular expression at token 1807 *
	* tokens after regular expression do not look correct *
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 1806 *
	Process char 1807 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // N
		=> Looking ahead 3 chars => // No
		=> Looking ahead 4 chars => // Not
		=> Looking ahead 5 chars => // Noth
		=> Looking ahead 6 chars => // Nothi
		=> Looking ahead 7 chars => // Nothin
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 1808 =>   (buffer: )
		Process char 1809 => N (buffer:  )
		Process char 1810 => o (buffer:  N)
		Process char 1811 => t (buffer:  No)
		Process char 1812 => h (buffer:  Not)
		Process char 1813 => i (buffer:  Noth)
		Process char 1814 => n (buffer:  Nothi)
		Process char 1815 => g (buffer:  Nothin)
		Process char 1816 =>   (buffer:  Nothing)
		Process char 1817 => t (buffer:  Nothing )
		Process char 1818 => o (buffer:  Nothing t)
		Process char 1819 =>   (buffer:  Nothing to)
		Process char 1820 => d (buffer:  Nothing to )
		Process char 1821 => o (buffer:  Nothing to d)
		Process char 1822 => . (buffer:  Nothing to do)
	=> Added token T_STRING ( Nothing to do)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\n 
		=> Looking ahead 3 chars => .\n  
		=> Looking ahead 4 chars => .\n   
		=> Looking ahead 5 chars => .\n    
		=> Looking ahead 6 chars => .\n    b
		=> Looking ahead 7 chars => .\n    br
		=> Looking ahead 8 chars => .\n    bre
		=> Looking ahead 9 chars => .\n    brea
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 1823 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 1824 =>   (buffer: )
	Process char 1825 =>   (buffer:  )
	Process char 1826 =>   (buffer:   )
	Process char 1827 =>   (buffer:    )
	Process char 1828 => b (buffer:     )
	=> Added token T_WHITESPACE (    )
	Process char 1829 => r (buffer: b)
	Process char 1830 => e (buffer: br)
	Process char 1831 => a (buffer: bre)
	Process char 1832 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 1833 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1834 => \n (buffer: )
	Process char 1835 => \n (buffer: \n)
	Process char 1836 =>   (buffer: \n\n)
	Process char 1837 =>   (buffer: \n\n )
	Process char 1838 =>   (buffer: \n\n  )
	Process char 1839 =>   (buffer: \n\n   )
	Process char 1840 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 1841 => a (buffer: c)
	Process char 1842 => s (buffer: ca)
	Process char 1843 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case 'f
		=> Looking ahead 4 chars => case 'fo
		=> Looking ahead 5 chars => case 'fou
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1844 =>   (buffer: )
	Process char 1845 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1846 => f (buffer: ')
		Process char 1847 => o (buffer: 'f)
		Process char 1848 => u (buffer: 'fo)
		Process char 1849 => r (buffer: 'fou)
		Process char 1850 => ' (buffer: 'four)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('four')
	Process char 1851 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1852 => \n (buffer: )
	Process char 1853 =>   (buffer: \n)
	Process char 1854 =>   (buffer: \n )
	Process char 1855 =>   (buffer: \n  )
	Process char 1856 =>   (buffer: \n   )
	Process char 1857 =>   (buffer: \n    )
	Process char 1858 =>   (buffer: \n     )
	Process char 1859 =>   (buffer: \n      )
	Process char 1860 =>   (buffer: \n       )
	Process char 1861 => e (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 1862 => c (buffer: e)
	Process char 1863 => h (buffer: ec)
	Process char 1864 => o (buffer: ech)
	Process char 1865 =>   (buffer: echo)
	=> Added token T_STRING (echo)
	Process char 1866 => h (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 1867 => i (buffer: h)
	Process char 1868 => ; (buffer: hi)
	=> Added token T_STRING (hi)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		=> Looking ahead 9 chars => ;\n    brea
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1869 => \n (buffer: )
	Process char 1870 =>   (buffer: \n)
	Process char 1871 =>   (buffer: \n )
	Process char 1872 =>   (buffer: \n  )
	Process char 1873 =>   (buffer: \n   )
	Process char 1874 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1875 => r (buffer: b)
	Process char 1876 => e (buffer: br)
	Process char 1877 => a (buffer: bre)
	Process char 1878 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 1879 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1880 => \n (buffer: )
	Process char 1881 => \n (buffer: \n)
	Process char 1882 =>   (buffer: \n\n)
	Process char 1883 =>   (buffer: \n\n )
	Process char 1884 =>   (buffer: \n\n  )
	Process char 1885 =>   (buffer: \n\n   )
	Process char 1886 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 1887 => e (buffer: d)
	Process char 1888 => f (buffer: de)
	Process char 1889 => a (buffer: def)
	Process char 1890 => u (buffer: defa)
	Process char 1891 => l (buffer: defau)
	Process char 1892 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 1893 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1894 => \n (buffer: )
	Process char 1895 =>   (buffer: \n)
	Process char 1896 =>   (buffer: \n )
	Process char 1897 =>   (buffer: \n  )
	Process char 1898 =>   (buffer: \n   )
	Process char 1899 =>   (buffer: \n    )
	Process char 1900 =>   (buffer: \n     )
	Process char 1901 =>   (buffer: \n      )
	Process char 1902 =>   (buffer: \n       )
	Process char 1903 => / (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	* token possibly starts a regular expression *
	* found end of regular expression at token 1904 *
	* tokens after regular expression do not look correct *
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 1903 *
	Process char 1904 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // N
		=> Looking ahead 3 chars => // No
		=> Looking ahead 4 chars => // No 
		=> Looking ahead 5 chars => // No d
		=> Looking ahead 6 chars => // No de
		=> Looking ahead 7 chars => // No def
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 1905 =>   (buffer: )
		Process char 1906 => N (buffer:  )
		Process char 1907 => o (buffer:  N)
		Process char 1908 =>   (buffer:  No)
		Process char 1909 => d (buffer:  No )
		Process char 1910 => e (buffer:  No d)
		Process char 1911 => f (buffer:  No de)
		Process char 1912 => a (buffer:  No def)
		Process char 1913 => u (buffer:  No defa)
		Process char 1914 => l (buffer:  No defau)
		Process char 1915 => t (buffer:  No defaul)
		Process char 1916 => . (buffer:  No default)
	=> Added token T_STRING ( No default)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\n 
		=> Looking ahead 3 chars => .\n  
		=> Looking ahead 4 chars => .\n   
		=> Looking ahead 5 chars => .\n    
		=> Looking ahead 6 chars => .\n    b
		=> Looking ahead 7 chars => .\n    br
		=> Looking ahead 8 chars => .\n    bre
		=> Looking ahead 9 chars => .\n    brea
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 1917 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 1918 =>   (buffer: )
	Process char 1919 =>   (buffer:  )
	Process char 1920 =>   (buffer:   )
	Process char 1921 =>   (buffer:    )
	Process char 1922 => b (buffer:     )
	=> Added token T_WHITESPACE (    )
	Process char 1923 => r (buffer: b)
	Process char 1924 => e (buffer: br)
	Process char 1925 => a (buffer: bre)
	Process char 1926 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 1927 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\ns
		=> Looking ahead 6 chars => ;\n}\n\nsw
		=> Looking ahead 7 chars => ;\n}\n\nswi
		=> Looking ahead 8 chars => ;\n}\n\nswit
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 1928 => \n (buffer: )
	Process char 1929 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\ns
		=> Looking ahead 4 chars => }\n\nsw
		=> Looking ahead 5 chars => }\n\nswi
		=> Looking ahead 6 chars => }\n\nswit
		=> Looking ahead 7 chars => }\n\nswitc
		=> Looking ahead 8 chars => }\n\nswitch
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 1930 => \n (buffer: )
	Process char 1931 => \n (buffer: \n)
	Process char 1932 => s (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 1933 => w (buffer: s)
	Process char 1934 => i (buffer: sw)
	Process char 1935 => t (buffer: swi)
	Process char 1936 => c (buffer: swit)
	Process char 1937 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (v
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 1938 =>   (buffer: )
	Process char 1939 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (v
		=> Looking ahead 2 chars => (va
		=> Looking ahead 3 chars => (var
		=> Looking ahead 4 chars => (var)
		=> Looking ahead 5 chars => (var) 
		=> Looking ahead 6 chars => (var) {
		=> Looking ahead 7 chars => (var) {\n
		=> Looking ahead 8 chars => (var) {\n 
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 1940 => v (buffer: )
	Process char 1941 => a (buffer: v)
	Process char 1942 => r (buffer: va)
		* buffer possibly contains token, looking ahead 6 chars *
		=> Looking ahead 1 chars => var)
		=> Looking ahead 2 chars => var) 
		=> Looking ahead 3 chars => var) {
		=> Looking ahead 4 chars => var) {\n
		=> Looking ahead 5 chars => var) {\n 
		=> Looking ahead 6 chars => var) {\n  
		* look ahead found nothing *
	=> Added token T_VAR (var)
	Process char 1943 => ) (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 1944 =>   (buffer: )
	Process char 1945 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 1946 => \n (buffer: )
	Process char 1947 =>   (buffer: \n)
	Process char 1948 =>   (buffer: \n )
	Process char 1949 =>   (buffer: \n  )
	Process char 1950 =>   (buffer: \n   )
	Process char 1951 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 1952 => a (buffer: c)
	Process char 1953 => s (buffer: ca)
	Process char 1954 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case 'o
		=> Looking ahead 4 chars => case 'on
		=> Looking ahead 5 chars => case 'one
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 1955 =>   (buffer: )
	Process char 1956 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 1957 => o (buffer: ')
		Process char 1958 => n (buffer: 'o)
		Process char 1959 => e (buffer: 'on)
		Process char 1960 => ' (buffer: 'one)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('one')
	Process char 1961 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 1962 => \n (buffer: )
	Process char 1963 =>   (buffer: \n)
	Process char 1964 =>   (buffer: \n )
	Process char 1965 =>   (buffer: \n  )
	Process char 1966 =>   (buffer: \n   )
	Process char 1967 =>   (buffer: \n    )
	Process char 1968 =>   (buffer: \n     )
	Process char 1969 =>   (buffer: \n      )
	Process char 1970 =>   (buffer: \n       )
	Process char 1971 => i (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 1972 => f (buffer: i)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => if 
		=> Looking ahead 2 chars => if (
		=> Looking ahead 3 chars => if (b
		=> Looking ahead 4 chars => if (bl
		=> Looking ahead 5 chars => if (bla
		=> Looking ahead 6 chars => if (blah
		=> Looking ahead 7 chars => if (blah)
		* look ahead found nothing *
	=> Added token T_IF (if)
	Process char 1973 =>   (buffer: )
	Process char 1974 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (b
		=> Looking ahead 2 chars => (bl
		=> Looking ahead 3 chars => (bla
		=> Looking ahead 4 chars => (blah
		=> Looking ahead 5 chars => (blah)
		=> Looking ahead 6 chars => (blah) 
		=> Looking ahead 7 chars => (blah) {
		=> Looking ahead 8 chars => (blah) {\n
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 1975 => b (buffer: )
	Process char 1976 => l (buffer: b)
	Process char 1977 => a (buffer: bl)
	Process char 1978 => h (buffer: bla)
	Process char 1979 => ) (buffer: blah)
	=> Added token T_STRING (blah)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n     
		=> Looking ahead 9 chars => ) {\n      
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 1980 =>   (buffer: )
	Process char 1981 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n     
		=> Looking ahead 7 chars => {\n      
		=> Looking ahead 8 chars => {\n       
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 1982 => \n (buffer: )
	Process char 1983 =>   (buffer: \n)
	Process char 1984 =>   (buffer: \n )
	Process char 1985 =>   (buffer: \n  )
	Process char 1986 =>   (buffer: \n   )
	Process char 1987 =>   (buffer: \n    )
	Process char 1988 =>   (buffer: \n     )
	Process char 1989 =>   (buffer: \n      )
	Process char 1990 =>   (buffer: \n       )
	Process char 1991 => } (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\n 
		=> Looking ahead 4 chars => }\n\n  
		=> Looking ahead 5 chars => }\n\n   
		=> Looking ahead 6 chars => }\n\n    
		=> Looking ahead 7 chars => }\n\n    b
		=> Looking ahead 8 chars => }\n\n    br
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 1992 => \n (buffer: )
	Process char 1993 => \n (buffer: \n)
	Process char 1994 =>   (buffer: \n\n)
	Process char 1995 =>   (buffer: \n\n )
	Process char 1996 =>   (buffer: \n\n  )
	Process char 1997 =>   (buffer: \n\n   )
	Process char 1998 => b (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 1999 => r (buffer: b)
	Process char 2000 => e (buffer: br)
	Process char 2001 => a (buffer: bre)
	Process char 2002 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2003 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2004 => \n (buffer: )
	Process char 2005 => \n (buffer: \n)
	Process char 2006 =>   (buffer: \n\n)
	Process char 2007 =>   (buffer: \n\n )
	Process char 2008 =>   (buffer: \n\n  )
	Process char 2009 =>   (buffer: \n\n   )
	Process char 2010 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 2011 => e (buffer: d)
	Process char 2012 => f (buffer: de)
	Process char 2013 => a (buffer: def)
	Process char 2014 => u (buffer: defa)
	Process char 2015 => l (buffer: defau)
	Process char 2016 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 2017 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2018 => \n (buffer: )
	Process char 2019 =>   (buffer: \n)
	Process char 2020 =>   (buffer: \n )
	Process char 2021 =>   (buffer: \n  )
	Process char 2022 =>   (buffer: \n   )
	Process char 2023 =>   (buffer: \n    )
	Process char 2024 =>   (buffer: \n     )
	Process char 2025 =>   (buffer: \n      )
	Process char 2026 =>   (buffer: \n       )
	Process char 2027 => / (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	* token possibly starts a regular expression *
	* found end of regular expression at token 2028 *
	* tokens after regular expression do not look correct *
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 2027 *
	Process char 2028 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // N
		=> Looking ahead 3 chars => // No
		=> Looking ahead 4 chars => // No 
		=> Looking ahead 5 chars => // No d
		=> Looking ahead 6 chars => // No de
		=> Looking ahead 7 chars => // No def
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 2029 =>   (buffer: )
		Process char 2030 => N (buffer:  )
		Process char 2031 => o (buffer:  N)
		Process char 2032 =>   (buffer:  No)
		Process char 2033 => d (buffer:  No )
		Process char 2034 => e (buffer:  No d)
		Process char 2035 => f (buffer:  No de)
		Process char 2036 => a (buffer:  No def)
		Process char 2037 => u (buffer:  No defa)
		Process char 2038 => l (buffer:  No defau)
		Process char 2039 => t (buffer:  No defaul)
		Process char 2040 => . (buffer:  No default)
	=> Added token T_STRING ( No default)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\n 
		=> Looking ahead 3 chars => .\n  
		=> Looking ahead 4 chars => .\n   
		=> Looking ahead 5 chars => .\n    
		=> Looking ahead 6 chars => .\n    b
		=> Looking ahead 7 chars => .\n    br
		=> Looking ahead 8 chars => .\n    bre
		=> Looking ahead 9 chars => .\n    brea
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 2041 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 2042 =>   (buffer: )
	Process char 2043 =>   (buffer:  )
	Process char 2044 =>   (buffer:   )
	Process char 2045 =>   (buffer:    )
	Process char 2046 => b (buffer:     )
	=> Added token T_WHITESPACE (    )
	Process char 2047 => r (buffer: b)
	Process char 2048 => e (buffer: br)
	Process char 2049 => a (buffer: bre)
	Process char 2050 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2051 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\ns
		=> Looking ahead 6 chars => ;\n}\n\nsw
		=> Looking ahead 7 chars => ;\n}\n\nswi
		=> Looking ahead 8 chars => ;\n}\n\nswit
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2052 => \n (buffer: )
	Process char 2053 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\ns
		=> Looking ahead 4 chars => }\n\nsw
		=> Looking ahead 5 chars => }\n\nswi
		=> Looking ahead 6 chars => }\n\nswit
		=> Looking ahead 7 chars => }\n\nswitc
		=> Looking ahead 8 chars => }\n\nswitch
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 2054 => \n (buffer: )
	Process char 2055 => \n (buffer: \n)
	Process char 2056 => s (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 2057 => w (buffer: s)
	Process char 2058 => i (buffer: sw)
	Process char 2059 => t (buffer: swi)
	Process char 2060 => c (buffer: swit)
	Process char 2061 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (n
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 2062 =>   (buffer: )
	Process char 2063 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (n
		=> Looking ahead 2 chars => (na
		=> Looking ahead 3 chars => (nam
		=> Looking ahead 4 chars => (name
		=> Looking ahead 5 chars => (name)
		=> Looking ahead 6 chars => (name) 
		=> Looking ahead 7 chars => (name) {
		=> Looking ahead 8 chars => (name) {\n
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 2064 => n (buffer: )
	Process char 2065 => a (buffer: n)
	Process char 2066 => m (buffer: na)
	Process char 2067 => e (buffer: nam)
	Process char 2068 => ) (buffer: name)
	=> Added token T_STRING (name)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 2069 =>   (buffer: )
	Process char 2070 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 2071 => \n (buffer: )
	Process char 2072 =>   (buffer: \n)
	Process char 2073 =>   (buffer: \n )
	Process char 2074 =>   (buffer: \n  )
	Process char 2075 =>   (buffer: \n   )
	Process char 2076 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2077 => a (buffer: c)
	Process char 2078 => s (buffer: ca)
	Process char 2079 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case "
		=> Looking ahead 3 chars => case "1
		=> Looking ahead 4 chars => case "1"
		=> Looking ahead 5 chars => case "1":
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 2080 =>   (buffer: )
	Process char 2081 => " (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 2082 => 1 (buffer: ")
		Process char 2083 => " (buffer: "1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ("1")
	Process char 2084 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2085 => \n (buffer: )
	Process char 2086 =>   (buffer: \n)
	Process char 2087 =>   (buffer: \n )
	Process char 2088 =>   (buffer: \n  )
	Process char 2089 =>   (buffer: \n   )
	Process char 2090 =>   (buffer: \n    )
	Process char 2091 =>   (buffer: \n     )
	Process char 2092 =>   (buffer: \n      )
	Process char 2093 =>   (buffer: \n       )
	Process char 2094 => s (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 2095 => w (buffer: s)
	Process char 2096 => i (buffer: sw)
	Process char 2097 => t (buffer: swi)
	Process char 2098 => c (buffer: swit)
	Process char 2099 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (n
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 2100 =>   (buffer: )
	Process char 2101 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (n
		=> Looking ahead 2 chars => (na
		=> Looking ahead 3 chars => (nam
		=> Looking ahead 4 chars => (name
		=> Looking ahead 5 chars => (name2
		=> Looking ahead 6 chars => (name2)
		=> Looking ahead 7 chars => (name2) 
		=> Looking ahead 8 chars => (name2) {
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 2102 => n (buffer: )
	Process char 2103 => a (buffer: n)
	Process char 2104 => m (buffer: na)
	Process char 2105 => e (buffer: nam)
	Process char 2106 => 2 (buffer: name)
	Process char 2107 => ) (buffer: name2)
	=> Added token T_STRING (name2)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n     
		=> Looking ahead 9 chars => ) {\n      
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 2108 =>   (buffer: )
	Process char 2109 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n     
		=> Looking ahead 7 chars => {\n      
		=> Looking ahead 8 chars => {\n       
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 2110 => \n (buffer: )
	Process char 2111 =>   (buffer: \n)
	Process char 2112 =>   (buffer: \n )
	Process char 2113 =>   (buffer: \n  )
	Process char 2114 =>   (buffer: \n   )
	Process char 2115 =>   (buffer: \n    )
	Process char 2116 =>   (buffer: \n     )
	Process char 2117 =>   (buffer: \n      )
	Process char 2118 =>   (buffer: \n       )
	Process char 2119 =>   (buffer: \n        )
	Process char 2120 =>   (buffer: \n         )
	Process char 2121 =>   (buffer: \n          )
	Process char 2122 =>   (buffer: \n           )
	Process char 2123 => c (buffer: \n            )
	=> Added token T_WHITESPACE (\n            )
	Process char 2124 => a (buffer: c)
	Process char 2125 => s (buffer: ca)
	Process char 2126 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case "
		=> Looking ahead 3 chars => case "1
		=> Looking ahead 4 chars => case "1"
		=> Looking ahead 5 chars => case "1":
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 2127 =>   (buffer: )
	Process char 2128 => " (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 2129 => 1 (buffer: ")
		Process char 2130 => " (buffer: "1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ("1")
	Process char 2131 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2132 => \n (buffer: )
	Process char 2133 =>   (buffer: \n)
	Process char 2134 =>   (buffer: \n )
	Process char 2135 =>   (buffer: \n  )
	Process char 2136 =>   (buffer: \n   )
	Process char 2137 =>   (buffer: \n    )
	Process char 2138 =>   (buffer: \n     )
	Process char 2139 =>   (buffer: \n      )
	Process char 2140 =>   (buffer: \n       )
	Process char 2141 =>   (buffer: \n        )
	Process char 2142 =>   (buffer: \n         )
	Process char 2143 =>   (buffer: \n          )
	Process char 2144 =>   (buffer: \n           )
	Process char 2145 =>   (buffer: \n            )
	Process char 2146 =>   (buffer: \n             )
	Process char 2147 =>   (buffer: \n              )
	Process char 2148 =>   (buffer: \n               )
	Process char 2149 => r (buffer: \n                )
	=> Added token T_WHITESPACE (\n                )
	Process char 2150 => e (buffer: r)
	Process char 2151 => t (buffer: re)
	Process char 2152 => u (buffer: ret)
	Process char 2153 => r (buffer: retu)
	Process char 2154 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return 
		=> Looking ahead 2 chars => return t
		=> Looking ahead 3 chars => return tr
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 2155 =>   (buffer: )
	Process char 2156 => t (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 2157 => r (buffer: t)
	Process char 2158 => u (buffer: tr)
	Process char 2159 => e (buffer: tru)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => true;
		=> Looking ahead 2 chars => true;\n
		=> Looking ahead 3 chars => true;\n 
		=> Looking ahead 4 chars => true;\n  
		=> Looking ahead 5 chars => true;\n   
		* look ahead found nothing *
	=> Added token T_TRUE (true)
	Process char 2160 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n     
		=> Looking ahead 7 chars => ;\n      
		=> Looking ahead 8 chars => ;\n       
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2161 => \n (buffer: )
	Process char 2162 =>   (buffer: \n)
	Process char 2163 =>   (buffer: \n )
	Process char 2164 =>   (buffer: \n  )
	Process char 2165 =>   (buffer: \n   )
	Process char 2166 =>   (buffer: \n    )
	Process char 2167 =>   (buffer: \n     )
	Process char 2168 =>   (buffer: \n      )
	Process char 2169 =>   (buffer: \n       )
	Process char 2170 =>   (buffer: \n        )
	Process char 2171 =>   (buffer: \n         )
	Process char 2172 =>   (buffer: \n          )
	Process char 2173 =>   (buffer: \n           )
	Process char 2174 => b (buffer: \n            )
	=> Added token T_WHITESPACE (\n            )
	Process char 2175 => r (buffer: b)
	Process char 2176 => e (buffer: br)
	Process char 2177 => a (buffer: bre)
	Process char 2178 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2179 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n     
		=> Looking ahead 8 chars => ;\n\n      
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2180 => \n (buffer: )
	Process char 2181 => \n (buffer: \n)
	Process char 2182 =>   (buffer: \n\n)
	Process char 2183 =>   (buffer: \n\n )
	Process char 2184 =>   (buffer: \n\n  )
	Process char 2185 =>   (buffer: \n\n   )
	Process char 2186 =>   (buffer: \n\n    )
	Process char 2187 =>   (buffer: \n\n     )
	Process char 2188 =>   (buffer: \n\n      )
	Process char 2189 =>   (buffer: \n\n       )
	Process char 2190 =>   (buffer: \n\n        )
	Process char 2191 =>   (buffer: \n\n         )
	Process char 2192 =>   (buffer: \n\n          )
	Process char 2193 =>   (buffer: \n\n           )
	Process char 2194 => c (buffer: \n\n            )
	=> Added token T_WHITESPACE (\n\n            )
	Process char 2195 => a (buffer: c)
	Process char 2196 => s (buffer: ca)
	Process char 2197 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case "
		=> Looking ahead 3 chars => case "2
		=> Looking ahead 4 chars => case "2"
		=> Looking ahead 5 chars => case "2":
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 2198 =>   (buffer: )
	Process char 2199 => " (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 2200 => 2 (buffer: ")
		Process char 2201 => " (buffer: "2)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ("2")
	Process char 2202 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2203 => \n (buffer: )
	Process char 2204 =>   (buffer: \n)
	Process char 2205 =>   (buffer: \n )
	Process char 2206 =>   (buffer: \n  )
	Process char 2207 =>   (buffer: \n   )
	Process char 2208 =>   (buffer: \n    )
	Process char 2209 =>   (buffer: \n     )
	Process char 2210 =>   (buffer: \n      )
	Process char 2211 =>   (buffer: \n       )
	Process char 2212 =>   (buffer: \n        )
	Process char 2213 =>   (buffer: \n         )
	Process char 2214 =>   (buffer: \n          )
	Process char 2215 =>   (buffer: \n           )
	Process char 2216 => r (buffer: \n            )
	=> Added token T_WHITESPACE (\n            )
	Process char 2217 => e (buffer: r)
	Process char 2218 => t (buffer: re)
	Process char 2219 => u (buffer: ret)
	Process char 2220 => r (buffer: retu)
	Process char 2221 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return 
		=> Looking ahead 2 chars => return t
		=> Looking ahead 3 chars => return tr
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 2222 =>   (buffer: )
	Process char 2223 => t (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 2224 => r (buffer: t)
	Process char 2225 => u (buffer: tr)
	Process char 2226 => e (buffer: tru)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => true;
		=> Looking ahead 2 chars => true;\n
		=> Looking ahead 3 chars => true;\n 
		=> Looking ahead 4 chars => true;\n  
		=> Looking ahead 5 chars => true;\n   
		* look ahead found nothing *
	=> Added token T_TRUE (true)
	Process char 2227 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n     
		=> Looking ahead 7 chars => ;\n      
		=> Looking ahead 8 chars => ;\n       
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2228 => \n (buffer: )
	Process char 2229 =>   (buffer: \n)
	Process char 2230 =>   (buffer: \n )
	Process char 2231 =>   (buffer: \n  )
	Process char 2232 =>   (buffer: \n   )
	Process char 2233 =>   (buffer: \n    )
	Process char 2234 =>   (buffer: \n     )
	Process char 2235 =>   (buffer: \n      )
	Process char 2236 =>   (buffer: \n       )
	Process char 2237 =>   (buffer: \n        )
	Process char 2238 =>   (buffer: \n         )
	Process char 2239 =>   (buffer: \n          )
	Process char 2240 =>   (buffer: \n           )
	Process char 2241 => b (buffer: \n            )
	=> Added token T_WHITESPACE (\n            )
	Process char 2242 => r (buffer: b)
	Process char 2243 => e (buffer: br)
	Process char 2244 => a (buffer: bre)
	Process char 2245 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2246 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n     
		=> Looking ahead 8 chars => ;\n\n      
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2247 => \n (buffer: )
	Process char 2248 => \n (buffer: \n)
	Process char 2249 =>   (buffer: \n\n)
	Process char 2250 =>   (buffer: \n\n )
	Process char 2251 =>   (buffer: \n\n  )
	Process char 2252 =>   (buffer: \n\n   )
	Process char 2253 =>   (buffer: \n\n    )
	Process char 2254 =>   (buffer: \n\n     )
	Process char 2255 =>   (buffer: \n\n      )
	Process char 2256 =>   (buffer: \n\n       )
	Process char 2257 =>   (buffer: \n\n        )
	Process char 2258 =>   (buffer: \n\n         )
	Process char 2259 =>   (buffer: \n\n          )
	Process char 2260 =>   (buffer: \n\n           )
	Process char 2261 => d (buffer: \n\n            )
	=> Added token T_WHITESPACE (\n\n            )
	Process char 2262 => e (buffer: d)
	Process char 2263 => f (buffer: de)
	Process char 2264 => a (buffer: def)
	Process char 2265 => u (buffer: defa)
	Process char 2266 => l (buffer: defau)
	Process char 2267 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 2268 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2269 => \n (buffer: )
	Process char 2270 =>   (buffer: \n)
	Process char 2271 =>   (buffer: \n )
	Process char 2272 =>   (buffer: \n  )
	Process char 2273 =>   (buffer: \n   )
	Process char 2274 =>   (buffer: \n    )
	Process char 2275 =>   (buffer: \n     )
	Process char 2276 =>   (buffer: \n      )
	Process char 2277 =>   (buffer: \n       )
	Process char 2278 =>   (buffer: \n        )
	Process char 2279 =>   (buffer: \n         )
	Process char 2280 =>   (buffer: \n          )
	Process char 2281 =>   (buffer: \n           )
	Process char 2282 =>   (buffer: \n            )
	Process char 2283 =>   (buffer: \n             )
	Process char 2284 =>   (buffer: \n              )
	Process char 2285 =>   (buffer: \n               )
	Process char 2286 => / (buffer: \n                )
	=> Added token T_WHITESPACE (\n                )
	* token possibly starts a regular expression *
	* found end of regular expression at token 2287 *
	* tokens after regular expression do not look correct *
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 2286 *
	Process char 2287 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // N
		=> Looking ahead 3 chars => // No
		=> Looking ahead 4 chars => // No 
		=> Looking ahead 5 chars => // No d
		=> Looking ahead 6 chars => // No de
		=> Looking ahead 7 chars => // No def
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 2288 =>   (buffer: )
		Process char 2289 => N (buffer:  )
		Process char 2290 => o (buffer:  N)
		Process char 2291 =>   (buffer:  No)
		Process char 2292 => d (buffer:  No )
		Process char 2293 => e (buffer:  No d)
		Process char 2294 => f (buffer:  No de)
		Process char 2295 => a (buffer:  No def)
		Process char 2296 => u (buffer:  No defa)
		Process char 2297 => l (buffer:  No defau)
		Process char 2298 => t (buffer:  No defaul)
		Process char 2299 => . (buffer:  No default)
	=> Added token T_STRING ( No default)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\n 
		=> Looking ahead 3 chars => .\n  
		=> Looking ahead 4 chars => .\n   
		=> Looking ahead 5 chars => .\n    
		=> Looking ahead 6 chars => .\n     
		=> Looking ahead 7 chars => .\n      
		=> Looking ahead 8 chars => .\n       
		=> Looking ahead 9 chars => .\n        
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 2300 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 2301 =>   (buffer: )
	Process char 2302 =>   (buffer:  )
	Process char 2303 =>   (buffer:   )
	Process char 2304 =>   (buffer:    )
	Process char 2305 =>   (buffer:     )
	Process char 2306 =>   (buffer:      )
	Process char 2307 =>   (buffer:       )
	Process char 2308 =>   (buffer:        )
	Process char 2309 =>   (buffer:         )
	Process char 2310 =>   (buffer:          )
	Process char 2311 =>   (buffer:           )
	Process char 2312 =>   (buffer:            )
	Process char 2313 => b (buffer:             )
	=> Added token T_WHITESPACE (            )
	Process char 2314 => r (buffer: b)
	Process char 2315 => e (buffer: br)
	Process char 2316 => a (buffer: bre)
	Process char 2317 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n 
		=> Looking ahead 4 chars => break;\n  
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2318 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n     
		=> Looking ahead 7 chars => ;\n      
		=> Looking ahead 8 chars => ;\n       
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2319 => \n (buffer: )
	Process char 2320 =>   (buffer: \n)
	Process char 2321 =>   (buffer: \n )
	Process char 2322 =>   (buffer: \n  )
	Process char 2323 =>   (buffer: \n   )
	Process char 2324 =>   (buffer: \n    )
	Process char 2325 =>   (buffer: \n     )
	Process char 2326 =>   (buffer: \n      )
	Process char 2327 =>   (buffer: \n       )
	Process char 2328 => } (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n 
		=> Looking ahead 3 chars => }\n  
		=> Looking ahead 4 chars => }\n   
		=> Looking ahead 5 chars => }\n    
		=> Looking ahead 6 chars => }\n    b
		=> Looking ahead 7 chars => }\n    br
		=> Looking ahead 8 chars => }\n    bre
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 2329 => \n (buffer: )
	Process char 2330 =>   (buffer: \n)
	Process char 2331 =>   (buffer: \n )
	Process char 2332 =>   (buffer: \n  )
	Process char 2333 =>   (buffer: \n   )
	Process char 2334 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2335 => r (buffer: b)
	Process char 2336 => e (buffer: br)
	Process char 2337 => a (buffer: bre)
	Process char 2338 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2339 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2340 => \n (buffer: )
	Process char 2341 => \n (buffer: \n)
	Process char 2342 =>   (buffer: \n\n)
	Process char 2343 =>   (buffer: \n\n )
	Process char 2344 =>   (buffer: \n\n  )
	Process char 2345 =>   (buffer: \n\n   )
	Process char 2346 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 2347 => a (buffer: c)
	Process char 2348 => s (buffer: ca)
	Process char 2349 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case "
		=> Looking ahead 3 chars => case "2
		=> Looking ahead 4 chars => case "2"
		=> Looking ahead 5 chars => case "2":
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 2350 =>   (buffer: )
	Process char 2351 => " (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 2352 => 2 (buffer: ")
		Process char 2353 => " (buffer: "2)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ("2")
	Process char 2354 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\ns
		=> Looking ahead 3 chars => :\nsw
		=> Looking ahead 4 chars => :\nswi
		=> Looking ahead 5 chars => :\nswit
		=> Looking ahead 6 chars => :\nswitc
		=> Looking ahead 7 chars => :\nswitch
		=> Looking ahead 8 chars => :\nswitch 
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2355 => \n (buffer: )
	Process char 2356 => s (buffer: \n)
	=> Added token T_WHITESPACE (\n)
	Process char 2357 => w (buffer: s)
	Process char 2358 => i (buffer: sw)
	Process char 2359 => t (buffer: swi)
	Process char 2360 => c (buffer: swit)
	Process char 2361 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (n
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 2362 =>   (buffer: )
	Process char 2363 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (n
		=> Looking ahead 2 chars => (na
		=> Looking ahead 3 chars => (nam
		=> Looking ahead 4 chars => (name
		=> Looking ahead 5 chars => (name2
		=> Looking ahead 6 chars => (name2)
		=> Looking ahead 7 chars => (name2) 
		=> Looking ahead 8 chars => (name2) {
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 2364 => n (buffer: )
	Process char 2365 => a (buffer: n)
	Process char 2366 => m (buffer: na)
	Process char 2367 => e (buffer: nam)
	Process char 2368 => 2 (buffer: name)
	Process char 2369 => ) (buffer: name2)
	=> Added token T_STRING (name2)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 2370 =>   (buffer: )
	Process char 2371 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 2372 => \n (buffer: )
	Process char 2373 =>   (buffer: \n)
	Process char 2374 =>   (buffer: \n )
	Process char 2375 =>   (buffer: \n  )
	Process char 2376 =>   (buffer: \n   )
	Process char 2377 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2378 => a (buffer: c)
	Process char 2379 => s (buffer: ca)
	Process char 2380 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case "
		=> Looking ahead 3 chars => case "1
		=> Looking ahead 4 chars => case "1"
		=> Looking ahead 5 chars => case "1":
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 2381 =>   (buffer: )
	Process char 2382 => " (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 2383 => 1 (buffer: ")
		Process char 2384 => " (buffer: "1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ("1")
	Process char 2385 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2386 => \n (buffer: )
	Process char 2387 =>   (buffer: \n)
	Process char 2388 =>   (buffer: \n )
	Process char 2389 =>   (buffer: \n  )
	Process char 2390 =>   (buffer: \n   )
	Process char 2391 =>   (buffer: \n    )
	Process char 2392 =>   (buffer: \n     )
	Process char 2393 =>   (buffer: \n      )
	Process char 2394 =>   (buffer: \n       )
	Process char 2395 => r (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 2396 => e (buffer: r)
	Process char 2397 => t (buffer: re)
	Process char 2398 => u (buffer: ret)
	Process char 2399 => r (buffer: retu)
	Process char 2400 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return 
		=> Looking ahead 2 chars => return t
		=> Looking ahead 3 chars => return tr
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 2401 =>   (buffer: )
	Process char 2402 => t (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 2403 => r (buffer: t)
	Process char 2404 => u (buffer: tr)
	Process char 2405 => e (buffer: tru)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => true;
		=> Looking ahead 2 chars => true;\n
		=> Looking ahead 3 chars => true;\n 
		=> Looking ahead 4 chars => true;\n  
		=> Looking ahead 5 chars => true;\n   
		* look ahead found nothing *
	=> Added token T_TRUE (true)
	Process char 2406 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2407 => \n (buffer: )
	Process char 2408 =>   (buffer: \n)
	Process char 2409 =>   (buffer: \n )
	Process char 2410 =>   (buffer: \n  )
	Process char 2411 =>   (buffer: \n   )
	Process char 2412 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2413 => r (buffer: b)
	Process char 2414 => e (buffer: br)
	Process char 2415 => a (buffer: bre)
	Process char 2416 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2417 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2418 => \n (buffer: )
	Process char 2419 => \n (buffer: \n)
	Process char 2420 =>   (buffer: \n\n)
	Process char 2421 =>   (buffer: \n\n )
	Process char 2422 =>   (buffer: \n\n  )
	Process char 2423 =>   (buffer: \n\n   )
	Process char 2424 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 2425 => a (buffer: c)
	Process char 2426 => s (buffer: ca)
	Process char 2427 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case "
		=> Looking ahead 3 chars => case "2
		=> Looking ahead 4 chars => case "2"
		=> Looking ahead 5 chars => case "2":
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 2428 =>   (buffer: )
	Process char 2429 => " (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 2430 => 2 (buffer: ")
		Process char 2431 => " (buffer: "2)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ("2")
	Process char 2432 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    r
		=> Looking ahead 7 chars => :\n    re
		=> Looking ahead 8 chars => :\n    ret
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2433 => \n (buffer: )
	Process char 2434 =>   (buffer: \n)
	Process char 2435 =>   (buffer: \n )
	Process char 2436 =>   (buffer: \n  )
	Process char 2437 =>   (buffer: \n   )
	Process char 2438 => r (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2439 => e (buffer: r)
	Process char 2440 => t (buffer: re)
	Process char 2441 => u (buffer: ret)
	Process char 2442 => r (buffer: retu)
	Process char 2443 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return 
		=> Looking ahead 2 chars => return t
		=> Looking ahead 3 chars => return tr
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 2444 =>   (buffer: )
	Process char 2445 => t (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 2446 => r (buffer: t)
	Process char 2447 => u (buffer: tr)
	Process char 2448 => e (buffer: tru)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => true;
		=> Looking ahead 2 chars => true;\n
		=> Looking ahead 3 chars => true;\n 
		=> Looking ahead 4 chars => true;\n  
		=> Looking ahead 5 chars => true;\n   
		* look ahead found nothing *
	=> Added token T_TRUE (true)
	Process char 2449 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2450 => \n (buffer: )
	Process char 2451 =>   (buffer: \n)
	Process char 2452 =>   (buffer: \n )
	Process char 2453 =>   (buffer: \n  )
	Process char 2454 =>   (buffer: \n   )
	Process char 2455 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2456 => r (buffer: b)
	Process char 2457 => e (buffer: br)
	Process char 2458 => a (buffer: bre)
	Process char 2459 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2460 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2461 => \n (buffer: )
	Process char 2462 => \n (buffer: \n)
	Process char 2463 =>   (buffer: \n\n)
	Process char 2464 =>   (buffer: \n\n )
	Process char 2465 =>   (buffer: \n\n  )
	Process char 2466 =>   (buffer: \n\n   )
	Process char 2467 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 2468 => e (buffer: d)
	Process char 2469 => f (buffer: de)
	Process char 2470 => a (buffer: def)
	Process char 2471 => u (buffer: defa)
	Process char 2472 => l (buffer: defau)
	Process char 2473 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 2474 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2475 => \n (buffer: )
	Process char 2476 =>   (buffer: \n)
	Process char 2477 =>   (buffer: \n )
	Process char 2478 =>   (buffer: \n  )
	Process char 2479 =>   (buffer: \n   )
	Process char 2480 =>   (buffer: \n    )
	Process char 2481 =>   (buffer: \n     )
	Process char 2482 =>   (buffer: \n      )
	Process char 2483 =>   (buffer: \n       )
	Process char 2484 => / (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	* token possibly starts a regular expression *
	* found end of regular expression at token 2485 *
	* tokens after regular expression do not look correct *
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 2484 *
	Process char 2485 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // N
		=> Looking ahead 3 chars => // No
		=> Looking ahead 4 chars => // No 
		=> Looking ahead 5 chars => // No d
		=> Looking ahead 6 chars => // No de
		=> Looking ahead 7 chars => // No def
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 2486 =>   (buffer: )
		Process char 2487 => N (buffer:  )
		Process char 2488 => o (buffer:  N)
		Process char 2489 =>   (buffer:  No)
		Process char 2490 => d (buffer:  No )
		Process char 2491 => e (buffer:  No d)
		Process char 2492 => f (buffer:  No de)
		Process char 2493 => a (buffer:  No def)
		Process char 2494 => u (buffer:  No defa)
		Process char 2495 => l (buffer:  No defau)
		Process char 2496 => t (buffer:  No defaul)
		Process char 2497 => . (buffer:  No default)
	=> Added token T_STRING ( No default)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\n 
		=> Looking ahead 3 chars => .\n  
		=> Looking ahead 4 chars => .\n   
		=> Looking ahead 5 chars => .\n    
		=> Looking ahead 6 chars => .\n    b
		=> Looking ahead 7 chars => .\n    br
		=> Looking ahead 8 chars => .\n    bre
		=> Looking ahead 9 chars => .\n    brea
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 2498 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 2499 =>   (buffer: )
	Process char 2500 =>   (buffer:  )
	Process char 2501 =>   (buffer:   )
	Process char 2502 =>   (buffer:    )
	Process char 2503 => b (buffer:     )
	=> Added token T_WHITESPACE (    )
	Process char 2504 => r (buffer: b)
	Process char 2505 => e (buffer: br)
	Process char 2506 => a (buffer: bre)
	Process char 2507 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2508 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n 
		=> Looking ahead 5 chars => ;\n}\n  
		=> Looking ahead 6 chars => ;\n}\n   
		=> Looking ahead 7 chars => ;\n}\n    
		=> Looking ahead 8 chars => ;\n}\n    b
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2509 => \n (buffer: )
	Process char 2510 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n 
		=> Looking ahead 3 chars => }\n  
		=> Looking ahead 4 chars => }\n   
		=> Looking ahead 5 chars => }\n    
		=> Looking ahead 6 chars => }\n    b
		=> Looking ahead 7 chars => }\n    br
		=> Looking ahead 8 chars => }\n    bre
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 2511 => \n (buffer: )
	Process char 2512 =>   (buffer: \n)
	Process char 2513 =>   (buffer: \n )
	Process char 2514 =>   (buffer: \n  )
	Process char 2515 =>   (buffer: \n   )
	Process char 2516 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2517 => r (buffer: b)
	Process char 2518 => e (buffer: br)
	Process char 2519 => a (buffer: bre)
	Process char 2520 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2521 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\ns
		=> Looking ahead 6 chars => ;\n}\n\nsw
		=> Looking ahead 7 chars => ;\n}\n\nswi
		=> Looking ahead 8 chars => ;\n}\n\nswit
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2522 => \n (buffer: )
	Process char 2523 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\ns
		=> Looking ahead 4 chars => }\n\nsw
		=> Looking ahead 5 chars => }\n\nswi
		=> Looking ahead 6 chars => }\n\nswit
		=> Looking ahead 7 chars => }\n\nswitc
		=> Looking ahead 8 chars => }\n\nswitch
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 2524 => \n (buffer: )
	Process char 2525 => \n (buffer: \n)
	Process char 2526 => s (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 2527 => w (buffer: s)
	Process char 2528 => i (buffer: sw)
	Process char 2529 => t (buffer: swi)
	Process char 2530 => c (buffer: swit)
	Process char 2531 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (n
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 2532 =>   (buffer: )
	Process char 2533 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (n
		=> Looking ahead 2 chars => (na
		=> Looking ahead 3 chars => (nam
		=> Looking ahead 4 chars => (name
		=> Looking ahead 5 chars => (name)
		=> Looking ahead 6 chars => (name) 
		=> Looking ahead 7 chars => (name) {
		=> Looking ahead 8 chars => (name) {\n
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 2534 => n (buffer: )
	Process char 2535 => a (buffer: n)
	Process char 2536 => m (buffer: na)
	Process char 2537 => e (buffer: nam)
	Process char 2538 => ) (buffer: name)
	=> Added token T_STRING (name)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 2539 =>   (buffer: )
	Process char 2540 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 2541 => \n (buffer: )
	Process char 2542 =>   (buffer: \n)
	Process char 2543 =>   (buffer: \n )
	Process char 2544 =>   (buffer: \n  )
	Process char 2545 =>   (buffer: \n   )
	Process char 2546 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2547 => a (buffer: c)
	Process char 2548 => s (buffer: ca)
	Process char 2549 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case "
		=> Looking ahead 3 chars => case "1
		=> Looking ahead 4 chars => case "1"
		=> Looking ahead 5 chars => case "1":
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 2550 =>   (buffer: )
	Process char 2551 => " (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 2552 => 1 (buffer: ")
		Process char 2553 => " (buffer: "1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ("1")
	Process char 2554 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2555 => \n (buffer: )
	Process char 2556 =>   (buffer: \n)
	Process char 2557 =>   (buffer: \n )
	Process char 2558 =>   (buffer: \n  )
	Process char 2559 =>   (buffer: \n   )
	Process char 2560 =>   (buffer: \n    )
	Process char 2561 =>   (buffer: \n     )
	Process char 2562 =>   (buffer: \n      )
	Process char 2563 =>   (buffer: \n       )
	Process char 2564 => s (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 2565 => w (buffer: s)
	Process char 2566 => i (buffer: sw)
	Process char 2567 => t (buffer: swi)
	Process char 2568 => c (buffer: swit)
	Process char 2569 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (n
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 2570 =>   (buffer: )
	Process char 2571 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (n
		=> Looking ahead 2 chars => (na
		=> Looking ahead 3 chars => (nam
		=> Looking ahead 4 chars => (name
		=> Looking ahead 5 chars => (name2
		=> Looking ahead 6 chars => (name2)
		=> Looking ahead 7 chars => (name2) 
		=> Looking ahead 8 chars => (name2) {
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 2572 => n (buffer: )
	Process char 2573 => a (buffer: n)
	Process char 2574 => m (buffer: na)
	Process char 2575 => e (buffer: nam)
	Process char 2576 => 2 (buffer: name)
	Process char 2577 => ) (buffer: name2)
	=> Added token T_STRING (name2)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n     
		=> Looking ahead 9 chars => ) {\n      
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 2578 =>   (buffer: )
	Process char 2579 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n     
		=> Looking ahead 7 chars => {\n      
		=> Looking ahead 8 chars => {\n       
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 2580 => \n (buffer: )
	Process char 2581 =>   (buffer: \n)
	Process char 2582 =>   (buffer: \n )
	Process char 2583 =>   (buffer: \n  )
	Process char 2584 =>   (buffer: \n   )
	Process char 2585 =>   (buffer: \n    )
	Process char 2586 =>   (buffer: \n     )
	Process char 2587 =>   (buffer: \n      )
	Process char 2588 =>   (buffer: \n       )
	Process char 2589 =>   (buffer: \n        )
	Process char 2590 =>   (buffer: \n         )
	Process char 2591 =>   (buffer: \n          )
	Process char 2592 =>   (buffer: \n           )
	Process char 2593 => c (buffer: \n            )
	=> Added token T_WHITESPACE (\n            )
	Process char 2594 => a (buffer: c)
	Process char 2595 => s (buffer: ca)
	Process char 2596 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case "
		=> Looking ahead 3 chars => case "1
		=> Looking ahead 4 chars => case "1"
		=> Looking ahead 5 chars => case "1":
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 2597 =>   (buffer: )
	Process char 2598 => " (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 2599 => 1 (buffer: ")
		Process char 2600 => " (buffer: "1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ("1")
	Process char 2601 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2602 => \n (buffer: )
	Process char 2603 =>   (buffer: \n)
	Process char 2604 =>   (buffer: \n )
	Process char 2605 =>   (buffer: \n  )
	Process char 2606 =>   (buffer: \n   )
	Process char 2607 =>   (buffer: \n    )
	Process char 2608 =>   (buffer: \n     )
	Process char 2609 =>   (buffer: \n      )
	Process char 2610 =>   (buffer: \n       )
	Process char 2611 =>   (buffer: \n        )
	Process char 2612 =>   (buffer: \n         )
	Process char 2613 =>   (buffer: \n          )
	Process char 2614 =>   (buffer: \n           )
	Process char 2615 => r (buffer: \n            )
	=> Added token T_WHITESPACE (\n            )
	Process char 2616 => e (buffer: r)
	Process char 2617 => t (buffer: re)
	Process char 2618 => u (buffer: ret)
	Process char 2619 => r (buffer: retu)
	Process char 2620 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return 
		=> Looking ahead 2 chars => return t
		=> Looking ahead 3 chars => return tr
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 2621 =>   (buffer: )
	Process char 2622 => t (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 2623 => r (buffer: t)
	Process char 2624 => u (buffer: tr)
	Process char 2625 => e (buffer: tru)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => true;
		=> Looking ahead 2 chars => true;\n
		=> Looking ahead 3 chars => true;\n\n
		=> Looking ahead 4 chars => true;\n\n 
		=> Looking ahead 5 chars => true;\n\n  
		* look ahead found nothing *
	=> Added token T_TRUE (true)
	Process char 2626 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n     
		=> Looking ahead 8 chars => ;\n\n      
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2627 => \n (buffer: )
	Process char 2628 => \n (buffer: \n)
	Process char 2629 =>   (buffer: \n\n)
	Process char 2630 =>   (buffer: \n\n )
	Process char 2631 =>   (buffer: \n\n  )
	Process char 2632 =>   (buffer: \n\n   )
	Process char 2633 =>   (buffer: \n\n    )
	Process char 2634 =>   (buffer: \n\n     )
	Process char 2635 =>   (buffer: \n\n      )
	Process char 2636 =>   (buffer: \n\n       )
	Process char 2637 =>   (buffer: \n\n        )
	Process char 2638 =>   (buffer: \n\n         )
	Process char 2639 =>   (buffer: \n\n          )
	Process char 2640 =>   (buffer: \n\n           )
	Process char 2641 => d (buffer: \n\n            )
	=> Added token T_WHITESPACE (\n\n            )
	Process char 2642 => e (buffer: d)
	Process char 2643 => f (buffer: de)
	Process char 2644 => a (buffer: def)
	Process char 2645 => u (buffer: defa)
	Process char 2646 => l (buffer: defau)
	Process char 2647 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 2648 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2649 => \n (buffer: )
	Process char 2650 =>   (buffer: \n)
	Process char 2651 =>   (buffer: \n )
	Process char 2652 =>   (buffer: \n  )
	Process char 2653 =>   (buffer: \n   )
	Process char 2654 =>   (buffer: \n    )
	Process char 2655 =>   (buffer: \n     )
	Process char 2656 =>   (buffer: \n      )
	Process char 2657 =>   (buffer: \n       )
	Process char 2658 =>   (buffer: \n        )
	Process char 2659 =>   (buffer: \n         )
	Process char 2660 =>   (buffer: \n          )
	Process char 2661 =>   (buffer: \n           )
	Process char 2662 =>   (buffer: \n            )
	Process char 2663 =>   (buffer: \n             )
	Process char 2664 =>   (buffer: \n              )
	Process char 2665 =>   (buffer: \n               )
	Process char 2666 => / (buffer: \n                )
	=> Added token T_WHITESPACE (\n                )
	* token possibly starts a regular expression *
	* found end of regular expression at token 2667 *
	* tokens after regular expression do not look correct *
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 2666 *
	Process char 2667 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // N
		=> Looking ahead 3 chars => // No
		=> Looking ahead 4 chars => // No 
		=> Looking ahead 5 chars => // No d
		=> Looking ahead 6 chars => // No de
		=> Looking ahead 7 chars => // No def
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 2668 =>   (buffer: )
		Process char 2669 => N (buffer:  )
		Process char 2670 => o (buffer:  N)
		Process char 2671 =>   (buffer:  No)
		Process char 2672 => d (buffer:  No )
		Process char 2673 => e (buffer:  No d)
		Process char 2674 => f (buffer:  No de)
		Process char 2675 => a (buffer:  No def)
		Process char 2676 => u (buffer:  No defa)
		Process char 2677 => l (buffer:  No defau)
		Process char 2678 => t (buffer:  No defaul)
		Process char 2679 => . (buffer:  No default)
	=> Added token T_STRING ( No default)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\n 
		=> Looking ahead 3 chars => .\n  
		=> Looking ahead 4 chars => .\n   
		=> Looking ahead 5 chars => .\n    
		=> Looking ahead 6 chars => .\n     
		=> Looking ahead 7 chars => .\n      
		=> Looking ahead 8 chars => .\n       
		=> Looking ahead 9 chars => .\n        
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 2680 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 2681 =>   (buffer: )
	Process char 2682 =>   (buffer:  )
	Process char 2683 =>   (buffer:   )
	Process char 2684 =>   (buffer:    )
	Process char 2685 =>   (buffer:     )
	Process char 2686 =>   (buffer:      )
	Process char 2687 =>   (buffer:       )
	Process char 2688 =>   (buffer:        )
	Process char 2689 =>   (buffer:         )
	Process char 2690 =>   (buffer:          )
	Process char 2691 =>   (buffer:           )
	Process char 2692 =>   (buffer:            )
	Process char 2693 => b (buffer:             )
	=> Added token T_WHITESPACE (            )
	Process char 2694 => r (buffer: b)
	Process char 2695 => e (buffer: br)
	Process char 2696 => a (buffer: bre)
	Process char 2697 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n 
		=> Looking ahead 4 chars => break;\n  
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2698 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n     
		=> Looking ahead 7 chars => ;\n      
		=> Looking ahead 8 chars => ;\n       
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2699 => \n (buffer: )
	Process char 2700 =>   (buffer: \n)
	Process char 2701 =>   (buffer: \n )
	Process char 2702 =>   (buffer: \n  )
	Process char 2703 =>   (buffer: \n   )
	Process char 2704 =>   (buffer: \n    )
	Process char 2705 =>   (buffer: \n     )
	Process char 2706 =>   (buffer: \n      )
	Process char 2707 =>   (buffer: \n       )
	Process char 2708 => } (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n 
		=> Looking ahead 3 chars => }\n  
		=> Looking ahead 4 chars => }\n   
		=> Looking ahead 5 chars => }\n    
		=> Looking ahead 6 chars => }\n    b
		=> Looking ahead 7 chars => }\n    br
		=> Looking ahead 8 chars => }\n    bre
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 2709 => \n (buffer: )
	Process char 2710 =>   (buffer: \n)
	Process char 2711 =>   (buffer: \n )
	Process char 2712 =>   (buffer: \n  )
	Process char 2713 =>   (buffer: \n   )
	Process char 2714 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2715 => r (buffer: b)
	Process char 2716 => e (buffer: br)
	Process char 2717 => a (buffer: bre)
	Process char 2718 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2719 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2720 => \n (buffer: )
	Process char 2721 => \n (buffer: \n)
	Process char 2722 =>   (buffer: \n\n)
	Process char 2723 =>   (buffer: \n\n )
	Process char 2724 =>   (buffer: \n\n  )
	Process char 2725 =>   (buffer: \n\n   )
	Process char 2726 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 2727 => e (buffer: d)
	Process char 2728 => f (buffer: de)
	Process char 2729 => a (buffer: def)
	Process char 2730 => u (buffer: defa)
	Process char 2731 => l (buffer: defau)
	Process char 2732 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 2733 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2734 => \n (buffer: )
	Process char 2735 =>   (buffer: \n)
	Process char 2736 =>   (buffer: \n )
	Process char 2737 =>   (buffer: \n  )
	Process char 2738 =>   (buffer: \n   )
	Process char 2739 =>   (buffer: \n    )
	Process char 2740 =>   (buffer: \n     )
	Process char 2741 =>   (buffer: \n      )
	Process char 2742 =>   (buffer: \n       )
	Process char 2743 => / (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	* token possibly starts a regular expression *
	* found end of regular expression at token 2744 *
	* tokens after regular expression do not look correct *
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 2743 *
	Process char 2744 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // N
		=> Looking ahead 3 chars => // No
		=> Looking ahead 4 chars => // No 
		=> Looking ahead 5 chars => // No d
		=> Looking ahead 6 chars => // No de
		=> Looking ahead 7 chars => // No def
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 2745 =>   (buffer: )
		Process char 2746 => N (buffer:  )
		Process char 2747 => o (buffer:  N)
		Process char 2748 =>   (buffer:  No)
		Process char 2749 => d (buffer:  No )
		Process char 2750 => e (buffer:  No d)
		Process char 2751 => f (buffer:  No de)
		Process char 2752 => a (buffer:  No def)
		Process char 2753 => u (buffer:  No defa)
		Process char 2754 => l (buffer:  No defau)
		Process char 2755 => t (buffer:  No defaul)
		Process char 2756 => . (buffer:  No default)
	=> Added token T_STRING ( No default)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\n 
		=> Looking ahead 3 chars => .\n  
		=> Looking ahead 4 chars => .\n   
		=> Looking ahead 5 chars => .\n    
		=> Looking ahead 6 chars => .\n    b
		=> Looking ahead 7 chars => .\n    br
		=> Looking ahead 8 chars => .\n    bre
		=> Looking ahead 9 chars => .\n    brea
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 2757 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 2758 =>   (buffer: )
	Process char 2759 =>   (buffer:  )
	Process char 2760 =>   (buffer:   )
	Process char 2761 =>   (buffer:    )
	Process char 2762 => b (buffer:     )
	=> Added token T_WHITESPACE (    )
	Process char 2763 => r (buffer: b)
	Process char 2764 => e (buffer: br)
	Process char 2765 => a (buffer: bre)
	Process char 2766 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2767 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\ns
		=> Looking ahead 6 chars => ;\n}\n\nsw
		=> Looking ahead 7 chars => ;\n}\n\nswi
		=> Looking ahead 8 chars => ;\n}\n\nswit
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2768 => \n (buffer: )
	Process char 2769 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\ns
		=> Looking ahead 4 chars => }\n\nsw
		=> Looking ahead 5 chars => }\n\nswi
		=> Looking ahead 6 chars => }\n\nswit
		=> Looking ahead 7 chars => }\n\nswitc
		=> Looking ahead 8 chars => }\n\nswitch
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 2770 => \n (buffer: )
	Process char 2771 => \n (buffer: \n)
	Process char 2772 => s (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 2773 => w (buffer: s)
	Process char 2774 => i (buffer: sw)
	Process char 2775 => t (buffer: swi)
	Process char 2776 => c (buffer: swit)
	Process char 2777 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (n
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 2778 =>   (buffer: )
	Process char 2779 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (n
		=> Looking ahead 2 chars => (na
		=> Looking ahead 3 chars => (nam
		=> Looking ahead 4 chars => (name
		=> Looking ahead 5 chars => (name2
		=> Looking ahead 6 chars => (name2)
		=> Looking ahead 7 chars => (name2) 
		=> Looking ahead 8 chars => (name2) {
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 2780 => n (buffer: )
	Process char 2781 => a (buffer: n)
	Process char 2782 => m (buffer: na)
	Process char 2783 => e (buffer: nam)
	Process char 2784 => 2 (buffer: name)
	Process char 2785 => ) (buffer: name2)
	=> Added token T_STRING (name2)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    d
		=> Looking ahead 9 chars => ) {\n    de
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 2786 =>   (buffer: )
	Process char 2787 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    d
		=> Looking ahead 7 chars => {\n    de
		=> Looking ahead 8 chars => {\n    def
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 2788 => \n (buffer: )
	Process char 2789 =>   (buffer: \n)
	Process char 2790 =>   (buffer: \n )
	Process char 2791 =>   (buffer: \n  )
	Process char 2792 =>   (buffer: \n   )
	Process char 2793 => d (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2794 => e (buffer: d)
	Process char 2795 => f (buffer: de)
	Process char 2796 => a (buffer: def)
	Process char 2797 => u (buffer: defa)
	Process char 2798 => l (buffer: defau)
	Process char 2799 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 2800 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2801 => \n (buffer: )
	Process char 2802 =>   (buffer: \n)
	Process char 2803 =>   (buffer: \n )
	Process char 2804 =>   (buffer: \n  )
	Process char 2805 =>   (buffer: \n   )
	Process char 2806 =>   (buffer: \n    )
	Process char 2807 =>   (buffer: \n     )
	Process char 2808 =>   (buffer: \n      )
	Process char 2809 =>   (buffer: \n       )
	Process char 2810 => / (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	* token possibly starts a regular expression *
	* found end of regular expression at token 2811 *
	* tokens after regular expression do not look correct *
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 2810 *
	Process char 2811 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // N
		=> Looking ahead 3 chars => // No
		=> Looking ahead 4 chars => // No 
		=> Looking ahead 5 chars => // No d
		=> Looking ahead 6 chars => // No de
		=> Looking ahead 7 chars => // No def
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 2812 =>   (buffer: )
		Process char 2813 => N (buffer:  )
		Process char 2814 => o (buffer:  N)
		Process char 2815 =>   (buffer:  No)
		Process char 2816 => d (buffer:  No )
		Process char 2817 => e (buffer:  No d)
		Process char 2818 => f (buffer:  No de)
		Process char 2819 => a (buffer:  No def)
		Process char 2820 => u (buffer:  No defa)
		Process char 2821 => l (buffer:  No defau)
		Process char 2822 => t (buffer:  No defaul)
		Process char 2823 => . (buffer:  No default)
	=> Added token T_STRING ( No default)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\n 
		=> Looking ahead 3 chars => .\n  
		=> Looking ahead 4 chars => .\n   
		=> Looking ahead 5 chars => .\n    
		=> Looking ahead 6 chars => .\n    b
		=> Looking ahead 7 chars => .\n    br
		=> Looking ahead 8 chars => .\n    bre
		=> Looking ahead 9 chars => .\n    brea
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 2824 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 2825 =>   (buffer: )
	Process char 2826 =>   (buffer:  )
	Process char 2827 =>   (buffer:   )
	Process char 2828 =>   (buffer:    )
	Process char 2829 => b (buffer:     )
	=> Added token T_WHITESPACE (    )
	Process char 2830 => r (buffer: b)
	Process char 2831 => e (buffer: br)
	Process char 2832 => a (buffer: bre)
	Process char 2833 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2834 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\ns
		=> Looking ahead 6 chars => ;\n}\n\nsw
		=> Looking ahead 7 chars => ;\n}\n\nswi
		=> Looking ahead 8 chars => ;\n}\n\nswit
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2835 => \n (buffer: )
	Process char 2836 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\ns
		=> Looking ahead 4 chars => }\n\nsw
		=> Looking ahead 5 chars => }\n\nswi
		=> Looking ahead 6 chars => }\n\nswit
		=> Looking ahead 7 chars => }\n\nswitc
		=> Looking ahead 8 chars => }\n\nswitch
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 2837 => \n (buffer: )
	Process char 2838 => \n (buffer: \n)
	Process char 2839 => s (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 2840 => w (buffer: s)
	Process char 2841 => i (buffer: sw)
	Process char 2842 => t (buffer: swi)
	Process char 2843 => c (buffer: swit)
	Process char 2844 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (f
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 2845 =>   (buffer: )
	Process char 2846 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (f
		=> Looking ahead 2 chars => (fo
		=> Looking ahead 3 chars => (foo
		=> Looking ahead 4 chars => (foo)
		=> Looking ahead 5 chars => (foo) 
		=> Looking ahead 6 chars => (foo) {
		=> Looking ahead 7 chars => (foo) {\n
		=> Looking ahead 8 chars => (foo) {\n 
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 2847 => f (buffer: )
	Process char 2848 => o (buffer: f)
	Process char 2849 => o (buffer: fo)
	Process char 2850 => ) (buffer: foo)
	=> Added token T_STRING (foo)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 2851 =>   (buffer: )
	Process char 2852 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 2853 => \n (buffer: )
	Process char 2854 =>   (buffer: \n)
	Process char 2855 =>   (buffer: \n )
	Process char 2856 =>   (buffer: \n  )
	Process char 2857 =>   (buffer: \n   )
	Process char 2858 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2859 => a (buffer: c)
	Process char 2860 => s (buffer: ca)
	Process char 2861 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case "
		=> Looking ahead 3 chars => case "1
		=> Looking ahead 4 chars => case "1"
		=> Looking ahead 5 chars => case "1":
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 2862 =>   (buffer: )
	Process char 2863 => " (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 2864 => 1 (buffer: ")
		Process char 2865 => " (buffer: "1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ("1")
	Process char 2866 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    r
		=> Looking ahead 7 chars => :\n    re
		=> Looking ahead 8 chars => :\n    ret
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2867 => \n (buffer: )
	Process char 2868 =>   (buffer: \n)
	Process char 2869 =>   (buffer: \n )
	Process char 2870 =>   (buffer: \n  )
	Process char 2871 =>   (buffer: \n   )
	Process char 2872 => r (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2873 => e (buffer: r)
	Process char 2874 => t (buffer: re)
	Process char 2875 => u (buffer: ret)
	Process char 2876 => r (buffer: retu)
	Process char 2877 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return 
		=> Looking ahead 2 chars => return t
		=> Looking ahead 3 chars => return tr
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 2878 =>   (buffer: )
	Process char 2879 => t (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 2880 => r (buffer: t)
	Process char 2881 => u (buffer: tr)
	Process char 2882 => e (buffer: tru)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => true;
		=> Looking ahead 2 chars => true;\n
		=> Looking ahead 3 chars => true;\n\n
		=> Looking ahead 4 chars => true;\n\n 
		=> Looking ahead 5 chars => true;\n\n  
		* look ahead found nothing *
	=> Added token T_TRUE (true)
	Process char 2883 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2884 => \n (buffer: )
	Process char 2885 => \n (buffer: \n)
	Process char 2886 =>   (buffer: \n\n)
	Process char 2887 =>   (buffer: \n\n )
	Process char 2888 =>   (buffer: \n\n  )
	Process char 2889 =>   (buffer: \n\n   )
	Process char 2890 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 2891 => e (buffer: d)
	Process char 2892 => f (buffer: de)
	Process char 2893 => a (buffer: def)
	Process char 2894 => u (buffer: defa)
	Process char 2895 => l (buffer: defau)
	Process char 2896 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 2897 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 2898 => \n (buffer: )
	Process char 2899 =>   (buffer: \n)
	Process char 2900 =>   (buffer: \n )
	Process char 2901 =>   (buffer: \n  )
	Process char 2902 =>   (buffer: \n   )
	Process char 2903 =>   (buffer: \n    )
	Process char 2904 =>   (buffer: \n     )
	Process char 2905 =>   (buffer: \n      )
	Process char 2906 =>   (buffer: \n       )
	Process char 2907 => i (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 2908 => f (buffer: i)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => if 
		=> Looking ahead 2 chars => if (
		=> Looking ahead 3 chars => if (f
		=> Looking ahead 4 chars => if (fo
		=> Looking ahead 5 chars => if (foo
		=> Looking ahead 6 chars => if (foo 
		=> Looking ahead 7 chars => if (foo =
		* look ahead found nothing *
	=> Added token T_IF (if)
	Process char 2909 =>   (buffer: )
	Process char 2910 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (f
		=> Looking ahead 2 chars => (fo
		=> Looking ahead 3 chars => (foo
		=> Looking ahead 4 chars => (foo 
		=> Looking ahead 5 chars => (foo =
		=> Looking ahead 6 chars => (foo ==
		=> Looking ahead 7 chars => (foo ===
		=> Looking ahead 8 chars => (foo === 
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 2911 => f (buffer: )
	Process char 2912 => o (buffer: f)
	Process char 2913 => o (buffer: fo)
	Process char 2914 =>   (buffer: foo)
	=> Added token T_STRING (foo)
	Process char 2915 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ==
		* look ahead found more specific token (T_IS_EQUAL), ignoring 2915 *
	Process char 2916 => = (buffer: =)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => ===
		* look ahead found more specific token (T_IS_IDENTICAL), ignoring 2916 *
	Process char 2917 => = (buffer: ==)
		* buffer possibly contains token, looking ahead 6 chars *
		=> Looking ahead 1 chars => === 
		=> Looking ahead 2 chars => === f
		=> Looking ahead 3 chars => === fa
		=> Looking ahead 4 chars => === fal
		=> Looking ahead 5 chars => === fals
		=> Looking ahead 6 chars => === false
		* look ahead found nothing *
	=> Added token T_IS_IDENTICAL (===)
	Process char 2918 =>   (buffer: )
	Process char 2919 => f (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 2920 => a (buffer: f)
	Process char 2921 => l (buffer: fa)
	Process char 2922 => s (buffer: fal)
	Process char 2923 => e (buffer: fals)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => false)
		=> Looking ahead 2 chars => false) 
		=> Looking ahead 3 chars => false) {
		=> Looking ahead 4 chars => false) {\n
		* look ahead found nothing *
	=> Added token T_FALSE (false)
	Process char 2924 => ) (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n     
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 2925 =>   (buffer: )
	Process char 2926 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n     
		=> Looking ahead 7 chars => {\n      
		=> Looking ahead 8 chars => {\n       
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 2927 => \n (buffer: )
	Process char 2928 =>   (buffer: \n)
	Process char 2929 =>   (buffer: \n )
	Process char 2930 =>   (buffer: \n  )
	Process char 2931 =>   (buffer: \n   )
	Process char 2932 =>   (buffer: \n    )
	Process char 2933 =>   (buffer: \n     )
	Process char 2934 =>   (buffer: \n      )
	Process char 2935 =>   (buffer: \n       )
	Process char 2936 =>   (buffer: \n        )
	Process char 2937 =>   (buffer: \n         )
	Process char 2938 =>   (buffer: \n          )
	Process char 2939 =>   (buffer: \n           )
	Process char 2940 => b (buffer: \n            )
	=> Added token T_WHITESPACE (\n            )
	Process char 2941 => r (buffer: b)
	Process char 2942 => e (buffer: br)
	Process char 2943 => a (buffer: bre)
	Process char 2944 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n 
		=> Looking ahead 4 chars => break;\n  
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2945 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n     
		=> Looking ahead 7 chars => ;\n      
		=> Looking ahead 8 chars => ;\n       
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2946 => \n (buffer: )
	Process char 2947 =>   (buffer: \n)
	Process char 2948 =>   (buffer: \n )
	Process char 2949 =>   (buffer: \n  )
	Process char 2950 =>   (buffer: \n   )
	Process char 2951 =>   (buffer: \n    )
	Process char 2952 =>   (buffer: \n     )
	Process char 2953 =>   (buffer: \n      )
	Process char 2954 =>   (buffer: \n       )
	Process char 2955 => } (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n 
		=> Looking ahead 3 chars => }\n  
		=> Looking ahead 4 chars => }\n   
		=> Looking ahead 5 chars => }\n    
		=> Looking ahead 6 chars => }\n    b
		=> Looking ahead 7 chars => }\n    br
		=> Looking ahead 8 chars => }\n    bre
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 2956 => \n (buffer: )
	Process char 2957 =>   (buffer: \n)
	Process char 2958 =>   (buffer: \n )
	Process char 2959 =>   (buffer: \n  )
	Process char 2960 =>   (buffer: \n   )
	Process char 2961 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 2962 => r (buffer: b)
	Process char 2963 => e (buffer: br)
	Process char 2964 => a (buffer: bre)
	Process char 2965 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n}
		=> Looking ahead 4 chars => break;\n}\n
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 2966 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\n/
		=> Looking ahead 6 chars => ;\n}\n\n//
		=> Looking ahead 7 chars => ;\n}\n\n// 
		=> Looking ahead 8 chars => ;\n}\n\n// V
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 2967 => \n (buffer: )
	Process char 2968 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\n/
		=> Looking ahead 4 chars => }\n\n//
		=> Looking ahead 5 chars => }\n\n// 
		=> Looking ahead 6 chars => }\n\n// V
		=> Looking ahead 7 chars => }\n\n// Va
		=> Looking ahead 8 chars => }\n\n// Val
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 2969 => \n (buffer: )
	Process char 2970 => \n (buffer: \n)
	Process char 2971 => / (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 2971 *
	Process char 2972 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // V
		=> Looking ahead 3 chars => // Va
		=> Looking ahead 4 chars => // Val
		=> Looking ahead 5 chars => // Vali
		=> Looking ahead 6 chars => // Valid
		=> Looking ahead 7 chars => // Valid 
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 2973 =>   (buffer: )
		Process char 2974 => V (buffer:  )
		Process char 2975 => a (buffer:  V)
		Process char 2976 => l (buffer:  Va)
		Process char 2977 => i (buffer:  Val)
		Process char 2978 => d (buffer:  Vali)
		Process char 2979 =>   (buffer:  Valid)
		Process char 2980 => S (buffer:  Valid )
		Process char 2981 => W (buffer:  Valid S)
		Process char 2982 => I (buffer:  Valid SW)
		Process char 2983 => T (buffer:  Valid SWI)
		Process char 2984 => C (buffer:  Valid SWIT)
		Process char 2985 => H (buffer:  Valid SWITC)
		Process char 2986 =>   (buffer:  Valid SWITCH)
		Process char 2987 => s (buffer:  Valid SWITCH )
		Process char 2988 => t (buffer:  Valid SWITCH s)
		Process char 2989 => a (buffer:  Valid SWITCH st)
		Process char 2990 => t (buffer:  Valid SWITCH sta)
		Process char 2991 => e (buffer:  Valid SWITCH stat)
		Process char 2992 => m (buffer:  Valid SWITCH state)
		Process char 2993 => e (buffer:  Valid SWITCH statem)
		Process char 2994 => n (buffer:  Valid SWITCH stateme)
		Process char 2995 => t (buffer:  Valid SWITCH statemen)
		Process char 2996 => . (buffer:  Valid SWITCH statement)
	=> Added token T_STRING ( Valid SWITCH statement)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => .\n
		=> Looking ahead 2 chars => .\ns
		=> Looking ahead 3 chars => .\nsw
		=> Looking ahead 4 chars => .\nswi
		=> Looking ahead 5 chars => .\nswit
		=> Looking ahead 6 chars => .\nswitc
		=> Looking ahead 7 chars => .\nswitch
		=> Looking ahead 8 chars => .\nswitch 
		=> Looking ahead 9 chars => .\nswitch (
		* look ahead found nothing *
	=> Added token T_OBJECT_OPERATOR (.)
		Process char 2997 => \n (buffer: )
		* found end of comment *
	=> Added token T_STRING (\n)
	Process char 2998 => s (buffer: )
	Process char 2999 => w (buffer: s)
	Process char 3000 => i (buffer: sw)
	Process char 3001 => t (buffer: swi)
	Process char 3002 => c (buffer: swit)
	Process char 3003 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (s
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 3004 =>   (buffer: )
	Process char 3005 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (s
		=> Looking ahead 2 chars => (so
		=> Looking ahead 3 chars => (som
		=> Looking ahead 4 chars => (some
		=> Looking ahead 5 chars => (somet
		=> Looking ahead 6 chars => (someth
		=> Looking ahead 7 chars => (somethi
		=> Looking ahead 8 chars => (somethin
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 3006 => s (buffer: )
	Process char 3007 => o (buffer: s)
	Process char 3008 => m (buffer: so)
	Process char 3009 => e (buffer: som)
	Process char 3010 => t (buffer: some)
	Process char 3011 => h (buffer: somet)
	Process char 3012 => i (buffer: someth)
	Process char 3013 => n (buffer: somethi)
	Process char 3014 => g (buffer: somethin)
	Process char 3015 => ) (buffer: something)
	=> Added token T_STRING (something)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 3016 =>   (buffer: )
	Process char 3017 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 3018 => \n (buffer: )
	Process char 3019 =>   (buffer: \n)
	Process char 3020 =>   (buffer: \n )
	Process char 3021 =>   (buffer: \n  )
	Process char 3022 =>   (buffer: \n   )
	Process char 3023 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3024 => a (buffer: c)
	Process char 3025 => s (buffer: ca)
	Process char 3026 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '1
		=> Looking ahead 4 chars => case '1'
		=> Looking ahead 5 chars => case '1':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 3027 =>   (buffer: )
	Process char 3028 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3029 => 1 (buffer: ')
		Process char 3030 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 3031 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 3032 => \n (buffer: )
	Process char 3033 =>   (buffer: \n)
	Process char 3034 =>   (buffer: \n )
	Process char 3035 =>   (buffer: \n  )
	Process char 3036 =>   (buffer: \n   )
	Process char 3037 =>   (buffer: \n    )
	Process char 3038 =>   (buffer: \n     )
	Process char 3039 =>   (buffer: \n      )
	Process char 3040 =>   (buffer: \n       )
	Process char 3041 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 3042 => y (buffer: m)
	Process char 3043 => v (buffer: my)
	Process char 3044 => a (buffer: myv)
	Process char 3045 => r (buffer: myva)
	Process char 3046 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 3047 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '1
		=> Looking ahead 4 chars => = '1'
		=> Looking ahead 5 chars => = '1';
		=> Looking ahead 6 chars => = '1';\n
		=> Looking ahead 7 chars => = '1';\n 
		=> Looking ahead 8 chars => = '1';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 3048 =>   (buffer: )
	Process char 3049 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3050 => 1 (buffer: ')
		Process char 3051 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 3052 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    r
		=> Looking ahead 7 chars => ;\n    re
		=> Looking ahead 8 chars => ;\n    ret
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3053 => \n (buffer: )
	Process char 3054 =>   (buffer: \n)
	Process char 3055 =>   (buffer: \n )
	Process char 3056 =>   (buffer: \n  )
	Process char 3057 =>   (buffer: \n   )
	Process char 3058 => r (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3059 => e (buffer: r)
	Process char 3060 => t (buffer: re)
	Process char 3061 => u (buffer: ret)
	Process char 3062 => r (buffer: retu)
	Process char 3063 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return 
		=> Looking ahead 2 chars => return '
		=> Looking ahead 3 chars => return '1
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 3064 =>   (buffer: )
	Process char 3065 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3066 => 1 (buffer: ')
		Process char 3067 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 3068 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3069 => \n (buffer: )
	Process char 3070 => \n (buffer: \n)
	Process char 3071 =>   (buffer: \n\n)
	Process char 3072 =>   (buffer: \n\n )
	Process char 3073 =>   (buffer: \n\n  )
	Process char 3074 =>   (buffer: \n\n   )
	Process char 3075 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 3076 => a (buffer: c)
	Process char 3077 => s (buffer: ca)
	Process char 3078 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '2
		=> Looking ahead 4 chars => case '2'
		=> Looking ahead 5 chars => case '2':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 3079 =>   (buffer: )
	Process char 3080 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3081 => 2 (buffer: ')
		Process char 3082 => ' (buffer: '2)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('2')
	Process char 3083 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    c
		=> Looking ahead 7 chars => :\n    ca
		=> Looking ahead 8 chars => :\n    cas
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 3084 => \n (buffer: )
	Process char 3085 =>   (buffer: \n)
	Process char 3086 =>   (buffer: \n )
	Process char 3087 =>   (buffer: \n  )
	Process char 3088 =>   (buffer: \n   )
	Process char 3089 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3090 => a (buffer: c)
	Process char 3091 => s (buffer: ca)
	Process char 3092 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '3
		=> Looking ahead 4 chars => case '3'
		=> Looking ahead 5 chars => case '3':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 3093 =>   (buffer: )
	Process char 3094 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3095 => 3 (buffer: ')
		Process char 3096 => ' (buffer: '3)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('3')
	Process char 3097 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 3098 => \n (buffer: )
	Process char 3099 =>   (buffer: \n)
	Process char 3100 =>   (buffer: \n )
	Process char 3101 =>   (buffer: \n  )
	Process char 3102 =>   (buffer: \n   )
	Process char 3103 =>   (buffer: \n    )
	Process char 3104 =>   (buffer: \n     )
	Process char 3105 =>   (buffer: \n      )
	Process char 3106 =>   (buffer: \n       )
	Process char 3107 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 3108 => y (buffer: m)
	Process char 3109 => v (buffer: my)
	Process char 3110 => a (buffer: myv)
	Process char 3111 => r (buffer: myva)
	Process char 3112 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 3113 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '5
		=> Looking ahead 4 chars => = '5'
		=> Looking ahead 5 chars => = '5';
		=> Looking ahead 6 chars => = '5';\n
		=> Looking ahead 7 chars => = '5';\n 
		=> Looking ahead 8 chars => = '5';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 3114 =>   (buffer: )
	Process char 3115 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3116 => 5 (buffer: ')
		Process char 3117 => ' (buffer: '5)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('5')
	Process char 3118 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    r
		=> Looking ahead 7 chars => ;\n    re
		=> Looking ahead 8 chars => ;\n    ret
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3119 => \n (buffer: )
	Process char 3120 =>   (buffer: \n)
	Process char 3121 =>   (buffer: \n )
	Process char 3122 =>   (buffer: \n  )
	Process char 3123 =>   (buffer: \n   )
	Process char 3124 => r (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3125 => e (buffer: r)
	Process char 3126 => t (buffer: re)
	Process char 3127 => u (buffer: ret)
	Process char 3128 => r (buffer: retu)
	Process char 3129 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return 
		=> Looking ahead 2 chars => return '
		=> Looking ahead 3 chars => return '2
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 3130 =>   (buffer: )
	Process char 3131 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3132 => 2 (buffer: ')
		Process char 3133 => ' (buffer: '2)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('2')
	Process char 3134 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3135 => \n (buffer: )
	Process char 3136 => \n (buffer: \n)
	Process char 3137 =>   (buffer: \n\n)
	Process char 3138 =>   (buffer: \n\n )
	Process char 3139 =>   (buffer: \n\n  )
	Process char 3140 =>   (buffer: \n\n   )
	Process char 3141 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 3142 => a (buffer: c)
	Process char 3143 => s (buffer: ca)
	Process char 3144 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '4
		=> Looking ahead 4 chars => case '4'
		=> Looking ahead 5 chars => case '4':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 3145 =>   (buffer: )
	Process char 3146 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3147 => 4 (buffer: ')
		Process char 3148 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 3149 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 3150 => \n (buffer: )
	Process char 3151 =>   (buffer: \n)
	Process char 3152 =>   (buffer: \n )
	Process char 3153 =>   (buffer: \n  )
	Process char 3154 =>   (buffer: \n   )
	Process char 3155 =>   (buffer: \n    )
	Process char 3156 =>   (buffer: \n     )
	Process char 3157 =>   (buffer: \n      )
	Process char 3158 =>   (buffer: \n       )
	Process char 3159 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 3160 => y (buffer: m)
	Process char 3161 => v (buffer: my)
	Process char 3162 => a (buffer: myv)
	Process char 3163 => r (buffer: myva)
	Process char 3164 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 3165 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '4
		=> Looking ahead 4 chars => = '4'
		=> Looking ahead 5 chars => = '4';
		=> Looking ahead 6 chars => = '4';\n
		=> Looking ahead 7 chars => = '4';\n 
		=> Looking ahead 8 chars => = '4';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 3166 =>   (buffer: )
	Process char 3167 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3168 => 4 (buffer: ')
		Process char 3169 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 3170 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    r
		=> Looking ahead 7 chars => ;\n    re
		=> Looking ahead 8 chars => ;\n    ret
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3171 => \n (buffer: )
	Process char 3172 =>   (buffer: \n)
	Process char 3173 =>   (buffer: \n )
	Process char 3174 =>   (buffer: \n  )
	Process char 3175 =>   (buffer: \n   )
	Process char 3176 => r (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3177 => e (buffer: r)
	Process char 3178 => t (buffer: re)
	Process char 3179 => u (buffer: ret)
	Process char 3180 => r (buffer: retu)
	Process char 3181 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return 
		=> Looking ahead 2 chars => return '
		=> Looking ahead 3 chars => return '3
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 3182 =>   (buffer: )
	Process char 3183 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3184 => 3 (buffer: ')
		Process char 3185 => ' (buffer: '3)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('3')
	Process char 3186 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3187 => \n (buffer: )
	Process char 3188 => \n (buffer: \n)
	Process char 3189 =>   (buffer: \n\n)
	Process char 3190 =>   (buffer: \n\n )
	Process char 3191 =>   (buffer: \n\n  )
	Process char 3192 =>   (buffer: \n\n   )
	Process char 3193 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 3194 => e (buffer: d)
	Process char 3195 => f (buffer: de)
	Process char 3196 => a (buffer: def)
	Process char 3197 => u (buffer: defa)
	Process char 3198 => l (buffer: defau)
	Process char 3199 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 3200 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 3201 => \n (buffer: )
	Process char 3202 =>   (buffer: \n)
	Process char 3203 =>   (buffer: \n )
	Process char 3204 =>   (buffer: \n  )
	Process char 3205 =>   (buffer: \n   )
	Process char 3206 =>   (buffer: \n    )
	Process char 3207 =>   (buffer: \n     )
	Process char 3208 =>   (buffer: \n      )
	Process char 3209 =>   (buffer: \n       )
	Process char 3210 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 3211 => y (buffer: m)
	Process char 3212 => v (buffer: my)
	Process char 3213 => a (buffer: myv)
	Process char 3214 => r (buffer: myva)
	Process char 3215 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 3216 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = n
		=> Looking ahead 3 chars => = nu
		=> Looking ahead 4 chars => = nul
		=> Looking ahead 5 chars => = null
		=> Looking ahead 6 chars => = null;
		=> Looking ahead 7 chars => = null;\n
		=> Looking ahead 8 chars => = null;\n 
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 3217 =>   (buffer: )
	Process char 3218 => n (buffer:  )
	=> Added token T_WHITESPACE ( )
	Process char 3219 => u (buffer: n)
	Process char 3220 => l (buffer: nu)
	Process char 3221 => l (buffer: nul)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => null;
		=> Looking ahead 2 chars => null;\n
		=> Looking ahead 3 chars => null;\n 
		=> Looking ahead 4 chars => null;\n  
		=> Looking ahead 5 chars => null;\n   
		* look ahead found nothing *
	=> Added token T_NULL (null)
	Process char 3222 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    r
		=> Looking ahead 7 chars => ;\n    re
		=> Looking ahead 8 chars => ;\n    ret
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3223 => \n (buffer: )
	Process char 3224 =>   (buffer: \n)
	Process char 3225 =>   (buffer: \n )
	Process char 3226 =>   (buffer: \n  )
	Process char 3227 =>   (buffer: \n   )
	Process char 3228 => r (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3229 => e (buffer: r)
	Process char 3230 => t (buffer: re)
	Process char 3231 => u (buffer: ret)
	Process char 3232 => r (buffer: retu)
	Process char 3233 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return 
		=> Looking ahead 2 chars => return '
		=> Looking ahead 3 chars => return '4
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 3234 =>   (buffer: )
	Process char 3235 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3236 => 4 (buffer: ')
		Process char 3237 => ' (buffer: '4)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('4')
	Process char 3238 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\ns
		=> Looking ahead 6 chars => ;\n}\n\nsw
		=> Looking ahead 7 chars => ;\n}\n\nswi
		=> Looking ahead 8 chars => ;\n}\n\nswit
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3239 => \n (buffer: )
	Process char 3240 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\ns
		=> Looking ahead 4 chars => }\n\nsw
		=> Looking ahead 5 chars => }\n\nswi
		=> Looking ahead 6 chars => }\n\nswit
		=> Looking ahead 7 chars => }\n\nswitc
		=> Looking ahead 8 chars => }\n\nswitch
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 3241 => \n (buffer: )
	Process char 3242 => \n (buffer: \n)
	Process char 3243 => s (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 3244 => w (buffer: s)
	Process char 3245 => i (buffer: sw)
	Process char 3246 => t (buffer: swi)
	Process char 3247 => c (buffer: swit)
	Process char 3248 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (s
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 3249 =>   (buffer: )
	Process char 3250 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (s
		=> Looking ahead 2 chars => (so
		=> Looking ahead 3 chars => (som
		=> Looking ahead 4 chars => (some
		=> Looking ahead 5 chars => (somet
		=> Looking ahead 6 chars => (someth
		=> Looking ahead 7 chars => (somethi
		=> Looking ahead 8 chars => (somethin
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 3251 => s (buffer: )
	Process char 3252 => o (buffer: s)
	Process char 3253 => m (buffer: so)
	Process char 3254 => e (buffer: som)
	Process char 3255 => t (buffer: some)
	Process char 3256 => h (buffer: somet)
	Process char 3257 => i (buffer: someth)
	Process char 3258 => n (buffer: somethi)
	Process char 3259 => g (buffer: somethin)
	Process char 3260 => ) (buffer: something)
	=> Added token T_STRING (something)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 3261 =>   (buffer: )
	Process char 3262 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 3263 => \n (buffer: )
	Process char 3264 =>   (buffer: \n)
	Process char 3265 =>   (buffer: \n )
	Process char 3266 =>   (buffer: \n  )
	Process char 3267 =>   (buffer: \n   )
	Process char 3268 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3269 => a (buffer: c)
	Process char 3270 => s (buffer: ca)
	Process char 3271 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '1
		=> Looking ahead 4 chars => case '1'
		=> Looking ahead 5 chars => case '1':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 3272 =>   (buffer: )
	Process char 3273 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3274 => 1 (buffer: ')
		Process char 3275 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 3276 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 3277 => \n (buffer: )
	Process char 3278 =>   (buffer: \n)
	Process char 3279 =>   (buffer: \n )
	Process char 3280 =>   (buffer: \n  )
	Process char 3281 =>   (buffer: \n   )
	Process char 3282 =>   (buffer: \n    )
	Process char 3283 =>   (buffer: \n     )
	Process char 3284 =>   (buffer: \n      )
	Process char 3285 =>   (buffer: \n       )
	Process char 3286 => m (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 3287 => y (buffer: m)
	Process char 3288 => v (buffer: my)
	Process char 3289 => a (buffer: myv)
	Process char 3290 => r (buffer: myva)
	Process char 3291 =>   (buffer: myvar)
	=> Added token T_STRING (myvar)
	Process char 3292 => = (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => = 
		=> Looking ahead 2 chars => = '
		=> Looking ahead 3 chars => = '1
		=> Looking ahead 4 chars => = '1'
		=> Looking ahead 5 chars => = '1';
		=> Looking ahead 6 chars => = '1';\n
		=> Looking ahead 7 chars => = '1';\n 
		=> Looking ahead 8 chars => = '1';\n  
		* look ahead found nothing *
	=> Added token T_EQUAL (=)
	Process char 3293 =>   (buffer: )
	Process char 3294 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3295 => 1 (buffer: ')
		Process char 3296 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 3297 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3298 => \n (buffer: )
	Process char 3299 =>   (buffer: \n)
	Process char 3300 =>   (buffer: \n )
	Process char 3301 =>   (buffer: \n  )
	Process char 3302 =>   (buffer: \n   )
	Process char 3303 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3304 => r (buffer: b)
	Process char 3305 => e (buffer: br)
	Process char 3306 => a (buffer: bre)
	Process char 3307 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 3308 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    c
		=> Looking ahead 8 chars => ;\n\n    ca
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3309 => \n (buffer: )
	Process char 3310 => \n (buffer: \n)
	Process char 3311 =>   (buffer: \n\n)
	Process char 3312 =>   (buffer: \n\n )
	Process char 3313 =>   (buffer: \n\n  )
	Process char 3314 =>   (buffer: \n\n   )
	Process char 3315 => c (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 3316 => a (buffer: c)
	Process char 3317 => s (buffer: ca)
	Process char 3318 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '2
		=> Looking ahead 4 chars => case '2'
		=> Looking ahead 5 chars => case '2':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 3319 =>   (buffer: )
	Process char 3320 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3321 => 2 (buffer: ')
		Process char 3322 => ' (buffer: '2)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('2')
	Process char 3323 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 3324 => \n (buffer: )
	Process char 3325 =>   (buffer: \n)
	Process char 3326 =>   (buffer: \n )
	Process char 3327 =>   (buffer: \n  )
	Process char 3328 =>   (buffer: \n   )
	Process char 3329 =>   (buffer: \n    )
	Process char 3330 =>   (buffer: \n     )
	Process char 3331 =>   (buffer: \n      )
	Process char 3332 =>   (buffer: \n       )
	Process char 3333 => t (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 3334 => h (buffer: t)
	Process char 3335 => r (buffer: th)
	Process char 3336 => o (buffer: thr)
	Process char 3337 => w (buffer: thro)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => throw 
		=> Looking ahead 2 chars => throw '
		=> Looking ahead 3 chars => throw 'm
		=> Looking ahead 4 chars => throw 'me
		* look ahead found nothing *
	=> Added token T_THROW (throw)
	Process char 3338 =>   (buffer: )
	Process char 3339 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3340 => m (buffer: ')
		Process char 3341 => e (buffer: 'm)
		Process char 3342 => s (buffer: 'me)
		Process char 3343 => s (buffer: 'mes)
		Process char 3344 => a (buffer: 'mess)
		Process char 3345 => g (buffer: 'messa)
		Process char 3346 => e (buffer: 'messag)
		Process char 3347 => ' (buffer: 'message)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('message')
	Process char 3348 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3349 => \n (buffer: )
	Process char 3350 => \n (buffer: \n)
	Process char 3351 =>   (buffer: \n\n)
	Process char 3352 =>   (buffer: \n\n )
	Process char 3353 =>   (buffer: \n\n  )
	Process char 3354 =>   (buffer: \n\n   )
	Process char 3355 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 3356 => e (buffer: d)
	Process char 3357 => f (buffer: de)
	Process char 3358 => a (buffer: def)
	Process char 3359 => u (buffer: defa)
	Process char 3360 => l (buffer: defau)
	Process char 3361 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 3362 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n    t
		=> Looking ahead 7 chars => :\n    th
		=> Looking ahead 8 chars => :\n    thr
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 3363 => \n (buffer: )
	Process char 3364 =>   (buffer: \n)
	Process char 3365 =>   (buffer: \n )
	Process char 3366 =>   (buffer: \n  )
	Process char 3367 =>   (buffer: \n   )
	Process char 3368 => t (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3369 => h (buffer: t)
	Process char 3370 => r (buffer: th)
	Process char 3371 => o (buffer: thr)
	Process char 3372 => w (buffer: thro)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => throw 
		=> Looking ahead 2 chars => throw '
		=> Looking ahead 3 chars => throw 'm
		=> Looking ahead 4 chars => throw 'me
		* look ahead found nothing *
	=> Added token T_THROW (throw)
	Process char 3373 =>   (buffer: )
	Process char 3374 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3375 => m (buffer: ')
		Process char 3376 => e (buffer: 'm)
		Process char 3377 => s (buffer: 'me)
		Process char 3378 => s (buffer: 'mes)
		Process char 3379 => a (buffer: 'mess)
		Process char 3380 => g (buffer: 'messa)
		Process char 3381 => e (buffer: 'messag)
		Process char 3382 => ' (buffer: 'message)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('message')
	Process char 3383 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\ns
		=> Looking ahead 6 chars => ;\n}\n\nsw
		=> Looking ahead 7 chars => ;\n}\n\nswi
		=> Looking ahead 8 chars => ;\n}\n\nswit
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3384 => \n (buffer: )
	Process char 3385 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\ns
		=> Looking ahead 4 chars => }\n\nsw
		=> Looking ahead 5 chars => }\n\nswi
		=> Looking ahead 6 chars => }\n\nswit
		=> Looking ahead 7 chars => }\n\nswitc
		=> Looking ahead 8 chars => }\n\nswitch
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 3386 => \n (buffer: )
	Process char 3387 => \n (buffer: \n)
	Process char 3388 => s (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 3389 => w (buffer: s)
	Process char 3390 => i (buffer: sw)
	Process char 3391 => t (buffer: swi)
	Process char 3392 => c (buffer: swit)
	Process char 3393 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (s
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 3394 =>   (buffer: )
	Process char 3395 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (s
		=> Looking ahead 2 chars => (so
		=> Looking ahead 3 chars => (som
		=> Looking ahead 4 chars => (some
		=> Looking ahead 5 chars => (somet
		=> Looking ahead 6 chars => (someth
		=> Looking ahead 7 chars => (somethi
		=> Looking ahead 8 chars => (somethin
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 3396 => s (buffer: )
	Process char 3397 => o (buffer: s)
	Process char 3398 => m (buffer: so)
	Process char 3399 => e (buffer: som)
	Process char 3400 => t (buffer: some)
	Process char 3401 => h (buffer: somet)
	Process char 3402 => i (buffer: someth)
	Process char 3403 => n (buffer: somethi)
	Process char 3404 => g (buffer: somethin)
	Process char 3405 => ) (buffer: something)
	=> Added token T_STRING (something)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 3406 =>   (buffer: )
	Process char 3407 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 3408 => \n (buffer: )
	Process char 3409 =>   (buffer: \n)
	Process char 3410 =>   (buffer: \n )
	Process char 3411 =>   (buffer: \n  )
	Process char 3412 =>   (buffer: \n   )
	Process char 3413 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3414 => a (buffer: c)
	Process char 3415 => s (buffer: ca)
	Process char 3416 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '1
		=> Looking ahead 4 chars => case '1'
		=> Looking ahead 5 chars => case '1';
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 3417 =>   (buffer: )
	Process char 3418 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3419 => 1 (buffer: ')
		Process char 3420 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 3421 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n     
		=> Looking ahead 7 chars => ;\n      
		=> Looking ahead 8 chars => ;\n       
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3422 => \n (buffer: )
	Process char 3423 =>   (buffer: \n)
	Process char 3424 =>   (buffer: \n )
	Process char 3425 =>   (buffer: \n  )
	Process char 3426 =>   (buffer: \n   )
	Process char 3427 =>   (buffer: \n    )
	Process char 3428 =>   (buffer: \n     )
	Process char 3429 =>   (buffer: \n      )
	Process char 3430 =>   (buffer: \n       )
	Process char 3431 => p (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 3432 => r (buffer: p)
	Process char 3433 => i (buffer: pr)
	Process char 3434 => n (buffer: pri)
	Process char 3435 => t (buffer: prin)
	Process char 3436 => ( (buffer: print)
	=> Added token T_STRING (print)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ('
		=> Looking ahead 2 chars => ('o
		=> Looking ahead 3 chars => ('on
		=> Looking ahead 4 chars => ('one
		=> Looking ahead 5 chars => ('one'
		=> Looking ahead 6 chars => ('one')
		=> Looking ahead 7 chars => ('one');
		=> Looking ahead 8 chars => ('one');\n
		=> Looking ahead 9 chars => ('one');\n 
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 3437 => ' (buffer: )
		* looking for string closer *
		Process char 3438 => o (buffer: ')
		Process char 3439 => n (buffer: 'o)
		Process char 3440 => e (buffer: 'on)
		Process char 3441 => ' (buffer: 'one)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('one')
	Process char 3442 => ) (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => );
		=> Looking ahead 2 chars => );\n
		=> Looking ahead 3 chars => );\n 
		=> Looking ahead 4 chars => );\n  
		=> Looking ahead 5 chars => );\n   
		=> Looking ahead 6 chars => );\n    
		=> Looking ahead 7 chars => );\n    b
		=> Looking ahead 8 chars => );\n    br
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 3443 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    b
		=> Looking ahead 7 chars => ;\n    br
		=> Looking ahead 8 chars => ;\n    bre
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3444 => \n (buffer: )
	Process char 3445 =>   (buffer: \n)
	Process char 3446 =>   (buffer: \n )
	Process char 3447 =>   (buffer: \n  )
	Process char 3448 =>   (buffer: \n   )
	Process char 3449 => b (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3450 => r (buffer: b)
	Process char 3451 => e (buffer: br)
	Process char 3452 => a (buffer: bre)
	Process char 3453 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n 
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 3454 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n 
		=> Looking ahead 4 chars => ;\n\n  
		=> Looking ahead 5 chars => ;\n\n   
		=> Looking ahead 6 chars => ;\n\n    
		=> Looking ahead 7 chars => ;\n\n    d
		=> Looking ahead 8 chars => ;\n\n    de
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3455 => \n (buffer: )
	Process char 3456 => \n (buffer: \n)
	Process char 3457 =>   (buffer: \n\n)
	Process char 3458 =>   (buffer: \n\n )
	Process char 3459 =>   (buffer: \n\n  )
	Process char 3460 =>   (buffer: \n\n   )
	Process char 3461 => d (buffer: \n\n    )
	=> Added token T_WHITESPACE (\n\n    )
	Process char 3462 => e (buffer: d)
	Process char 3463 => f (buffer: de)
	Process char 3464 => a (buffer: def)
	Process char 3465 => u (buffer: defa)
	Process char 3466 => l (buffer: defau)
	Process char 3467 => t (buffer: defaul)
		* buffer possibly contains token, looking ahead 2 chars *
		=> Looking ahead 1 chars => default:
		=> Looking ahead 2 chars => default:\n
		* look ahead found nothing *
	=> Added token T_DEFAULT (default)
	Process char 3468 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 3469 => \n (buffer: )
	Process char 3470 =>   (buffer: \n)
	Process char 3471 =>   (buffer: \n )
	Process char 3472 =>   (buffer: \n  )
	Process char 3473 =>   (buffer: \n   )
	Process char 3474 =>   (buffer: \n    )
	Process char 3475 =>   (buffer: \n     )
	Process char 3476 =>   (buffer: \n      )
	Process char 3477 =>   (buffer: \n       )
	Process char 3478 => p (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 3479 => r (buffer: p)
	Process char 3480 => i (buffer: pr)
	Process char 3481 => n (buffer: pri)
	Process char 3482 => t (buffer: prin)
	Process char 3483 => ( (buffer: print)
	=> Added token T_STRING (print)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ('
		=> Looking ahead 2 chars => ('d
		=> Looking ahead 3 chars => ('de
		=> Looking ahead 4 chars => ('def
		=> Looking ahead 5 chars => ('defa
		=> Looking ahead 6 chars => ('defau
		=> Looking ahead 7 chars => ('defaul
		=> Looking ahead 8 chars => ('default
		=> Looking ahead 9 chars => ('default'
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 3484 => ' (buffer: )
		* looking for string closer *
		Process char 3485 => d (buffer: ')
		Process char 3486 => e (buffer: 'd)
		Process char 3487 => f (buffer: 'de)
		Process char 3488 => a (buffer: 'def)
		Process char 3489 => u (buffer: 'defa)
		Process char 3490 => l (buffer: 'defau)
		Process char 3491 => t (buffer: 'defaul)
		Process char 3492 => ' (buffer: 'default)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('default')
	Process char 3493 => ) (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => );
		=> Looking ahead 2 chars => );\n
		=> Looking ahead 3 chars => );\n 
		=> Looking ahead 4 chars => );\n  
		=> Looking ahead 5 chars => );\n   
		=> Looking ahead 6 chars => );\n    
		=> Looking ahead 7 chars => );\n    r
		=> Looking ahead 8 chars => );\n    re
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 3494 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n 
		=> Looking ahead 3 chars => ;\n  
		=> Looking ahead 4 chars => ;\n   
		=> Looking ahead 5 chars => ;\n    
		=> Looking ahead 6 chars => ;\n    r
		=> Looking ahead 7 chars => ;\n    re
		=> Looking ahead 8 chars => ;\n    ret
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3495 => \n (buffer: )
	Process char 3496 =>   (buffer: \n)
	Process char 3497 =>   (buffer: \n )
	Process char 3498 =>   (buffer: \n  )
	Process char 3499 =>   (buffer: \n   )
	Process char 3500 => r (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3501 => e (buffer: r)
	Process char 3502 => t (buffer: re)
	Process char 3503 => u (buffer: ret)
	Process char 3504 => r (buffer: retu)
	Process char 3505 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return;
		=> Looking ahead 2 chars => return;\n
		=> Looking ahead 3 chars => return;\n}
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 3506 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n}
		=> Looking ahead 3 chars => ;\n}\n
		=> Looking ahead 4 chars => ;\n}\n\n
		=> Looking ahead 5 chars => ;\n}\n\ns
		=> Looking ahead 6 chars => ;\n}\n\nsw
		=> Looking ahead 7 chars => ;\n}\n\nswi
		=> Looking ahead 8 chars => ;\n}\n\nswit
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3507 => \n (buffer: )
	Process char 3508 => } (buffer: \n)
	=> Added token T_WHITESPACE (\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		=> Looking ahead 2 chars => }\n\n
		=> Looking ahead 3 chars => }\n\ns
		=> Looking ahead 4 chars => }\n\nsw
		=> Looking ahead 5 chars => }\n\nswi
		=> Looking ahead 6 chars => }\n\nswit
		=> Looking ahead 7 chars => }\n\nswitc
		=> Looking ahead 8 chars => }\n\nswitch
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 3509 => \n (buffer: )
	Process char 3510 => \n (buffer: \n)
	Process char 3511 => s (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
	Process char 3512 => w (buffer: s)
	Process char 3513 => i (buffer: sw)
	Process char 3514 => t (buffer: swi)
	Process char 3515 => c (buffer: swit)
	Process char 3516 => h (buffer: switc)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => switch 
		=> Looking ahead 2 chars => switch (
		=> Looking ahead 3 chars => switch (f
		* look ahead found nothing *
	=> Added token T_SWITCH (switch)
	Process char 3517 =>   (buffer: )
	Process char 3518 => ( (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => (f
		=> Looking ahead 2 chars => (fo
		=> Looking ahead 3 chars => (foo
		=> Looking ahead 4 chars => (foo)
		=> Looking ahead 5 chars => (foo) 
		=> Looking ahead 6 chars => (foo) {
		=> Looking ahead 7 chars => (foo) {\n
		=> Looking ahead 8 chars => (foo) {\n 
		* look ahead found nothing *
	=> Added token T_OPEN_PARENTHESIS (()
	Process char 3519 => f (buffer: )
	Process char 3520 => o (buffer: f)
	Process char 3521 => o (buffer: fo)
	Process char 3522 => ) (buffer: foo)
	=> Added token T_STRING (foo)
		* char is token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ) 
		=> Looking ahead 2 chars => ) {
		=> Looking ahead 3 chars => ) {\n
		=> Looking ahead 4 chars => ) {\n 
		=> Looking ahead 5 chars => ) {\n  
		=> Looking ahead 6 chars => ) {\n   
		=> Looking ahead 7 chars => ) {\n    
		=> Looking ahead 8 chars => ) {\n    c
		=> Looking ahead 9 chars => ) {\n    ca
		* look ahead found nothing *
	=> Added token T_CLOSE_PARENTHESIS ())
	Process char 3523 =>   (buffer: )
	Process char 3524 => { (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => {\n
		=> Looking ahead 2 chars => {\n 
		=> Looking ahead 3 chars => {\n  
		=> Looking ahead 4 chars => {\n   
		=> Looking ahead 5 chars => {\n    
		=> Looking ahead 6 chars => {\n    c
		=> Looking ahead 7 chars => {\n    ca
		=> Looking ahead 8 chars => {\n    cas
		* look ahead found nothing *
	=> Added token T_OPEN_CURLY_BRACKET ({)
	Process char 3525 => \n (buffer: )
	Process char 3526 =>   (buffer: \n)
	Process char 3527 =>   (buffer: \n )
	Process char 3528 =>   (buffer: \n  )
	Process char 3529 =>   (buffer: \n   )
	Process char 3530 => c (buffer: \n    )
	=> Added token T_WHITESPACE (\n    )
	Process char 3531 => a (buffer: c)
	Process char 3532 => s (buffer: ca)
	Process char 3533 => e (buffer: cas)
		* buffer possibly contains token, looking ahead 5 chars *
		=> Looking ahead 1 chars => case 
		=> Looking ahead 2 chars => case '
		=> Looking ahead 3 chars => case '1
		=> Looking ahead 4 chars => case '1'
		=> Looking ahead 5 chars => case '1':
		* look ahead found nothing *
	=> Added token T_CASE (case)
	Process char 3534 =>   (buffer: )
	Process char 3535 => ' (buffer:  )
	=> Added token T_WHITESPACE ( )
		* looking for string closer *
		Process char 3536 => 1 (buffer: ')
		Process char 3537 => ' (buffer: '1)
		* found end of string *
	=> Added token T_CONSTANT_ENCAPSED_STRING ('1')
	Process char 3538 => : (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => :\n
		=> Looking ahead 2 chars => :\n 
		=> Looking ahead 3 chars => :\n  
		=> Looking ahead 4 chars => :\n   
		=> Looking ahead 5 chars => :\n    
		=> Looking ahead 6 chars => :\n     
		=> Looking ahead 7 chars => :\n      
		=> Looking ahead 8 chars => :\n       
		* look ahead found nothing *
	=> Added token T_COLON (:)
	Process char 3539 => \n (buffer: )
	Process char 3540 =>   (buffer: \n)
	Process char 3541 =>   (buffer: \n )
	Process char 3542 =>   (buffer: \n  )
	Process char 3543 =>   (buffer: \n   )
	Process char 3544 =>   (buffer: \n    )
	Process char 3545 =>   (buffer: \n     )
	Process char 3546 =>   (buffer: \n      )
	Process char 3547 =>   (buffer: \n       )
	Process char 3548 => r (buffer: \n        )
	=> Added token T_WHITESPACE (\n        )
	Process char 3549 => e (buffer: r)
	Process char 3550 => t (buffer: re)
	Process char 3551 => u (buffer: ret)
	Process char 3552 => r (buffer: retu)
	Process char 3553 => n (buffer: retur)
		* buffer possibly contains token, looking ahead 3 chars *
		=> Looking ahead 1 chars => return;
		=> Looking ahead 2 chars => return; 
		=> Looking ahead 3 chars => return; /
		* look ahead found nothing *
	=> Added token T_RETURN (return)
	Process char 3554 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ; 
		=> Looking ahead 2 chars => ; /
		=> Looking ahead 3 chars => ; //
		=> Looking ahead 4 chars => ; // 
		=> Looking ahead 5 chars => ; // c
		=> Looking ahead 6 chars => ; // co
		=> Looking ahead 7 chars => ; // com
		=> Looking ahead 8 chars => ; // comm
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3555 =>   (buffer: )
	Process char 3556 => / (buffer:  )
	=> Added token T_WHITESPACE ( )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => //
		* look ahead found more specific token (T_COMMENT), ignoring 3556 *
	Process char 3557 => / (buffer: /)
		* buffer possibly contains token, looking ahead 7 chars *
		=> Looking ahead 1 chars => // 
		=> Looking ahead 2 chars => // c
		=> Looking ahead 3 chars => // co
		=> Looking ahead 4 chars => // com
		=> Looking ahead 5 chars => // comm
		=> Looking ahead 6 chars => // comme
		=> Looking ahead 7 chars => // commen
		* look ahead found nothing *
	=> Added token T_COMMENT (//)
		* looking for end of comment *
		Process char 3558 =>   (buffer: )
		Process char 3559 => c (buffer:  )
		Process char 3560 => o (buffer:  c)
		Process char 3561 => m (buffer:  co)
		Process char 3562 => m (buffer:  com)
		Process char 3563 => e (buffer:  comm)
		Process char 3564 => n (buffer:  comme)
		Process char 3565 => t (buffer:  commen)
		Process char 3566 => \n (buffer:  comment)
		* found end of comment *
	=> Added token T_STRING ( comment\n)
	Process char 3567 =>   (buffer: )
	Process char 3568 =>   (buffer:  )
	Process char 3569 =>   (buffer:   )
	Process char 3570 =>   (buffer:    )
	Process char 3571 => b (buffer:     )
	=> Added token T_WHITESPACE (    )
	Process char 3572 => r (buffer: b)
	Process char 3573 => e (buffer: br)
	Process char 3574 => a (buffer: bre)
	Process char 3575 => k (buffer: brea)
		* buffer possibly contains token, looking ahead 4 chars *
		=> Looking ahead 1 chars => break;
		=> Looking ahead 2 chars => break;\n
		=> Looking ahead 3 chars => break;\n\n
		=> Looking ahead 4 chars => break;\n\n}
		* look ahead found nothing *
	=> Added token T_BREAK (break)
	Process char 3576 => ; (buffer: )
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => ;\n
		=> Looking ahead 2 chars => ;\n\n
		=> Looking ahead 3 chars => ;\n\n}
		=> Looking ahead 4 chars => ;\n\n}\n
		* look ahead found nothing *
	=> Added token T_SEMICOLON (;)
	Process char 3577 => \n (buffer: )
	Process char 3578 => \n (buffer: \n)
	Process char 3579 => } (buffer: \n\n)
	=> Added token T_WHITESPACE (\n\n)
		* buffer possibly contains token, looking ahead 8 chars *
		=> Looking ahead 1 chars => }\n
		* look ahead found nothing *
	=> Added token T_CLOSE_CURLY_BRACKET (})
	Process char 3580 => \n (buffer: )
	=> Added token T_WHITESPACE (\n)
	*** END TOKENIZING ***
	*** START TOKEN MAP ***
	=> Found curly bracket opener at 10
	=> Found curly bracket closer at 91 for 10
	=> Found curly bracket opener at 101
	=> Found curly bracket closer at 179 for 101
	=> Found curly bracket opener at 189
	=> Found curly bracket closer at 210 for 189
	=> Found curly bracket opener at 220
	=> Found curly bracket closer at 293 for 220
	=> Found curly bracket opener at 303
	=> Found curly bracket closer at 368 for 303
	=> Found curly bracket opener at 378
	=> Found curly bracket closer at 461 for 378
	=> Found curly bracket opener at 471
	=> Found curly bracket closer at 498 for 471
	=> Found curly bracket opener at 508
	=> Found curly bracket closer at 533 for 508
	=> Found curly bracket opener at 543
	=> Found curly bracket closer at 606 for 543
	=> Found curly bracket opener at 615
	=> Found curly bracket closer at 674 for 615
	=> Found curly bracket opener at 683
		=> Found curly bracket opener at 698
		=> Found curly bracket closer at 701 for 698
	=> Found curly bracket closer at 719 for 683
	=> Found curly bracket opener at 728
		=> Found curly bracket opener at 743
		=> Found curly bracket closer at 790 for 743
		=> Found curly bracket opener at 809
		=> Found curly bracket closer at 855 for 809
	=> Found curly bracket closer at 861 for 728
	=> Found curly bracket opener at 870
		=> Found curly bracket opener at 885
		=> Found curly bracket closer at 911 for 885
	=> Found curly bracket closer at 928 for 870
	=> Found curly bracket opener at 937
	=> Found curly bracket closer at 949 for 937
	=> Found curly bracket opener at 958
		=> Found curly bracket opener at 988
		=> Found curly bracket closer at 995 for 988
	=> Found curly bracket closer at 1001 for 958
	=> Found curly bracket opener at 1011
	=> Found curly bracket closer at 1100 for 1011
	=> Found curly bracket opener at 1109
	=> Found curly bracket closer at 1153 for 1109
	=> Found curly bracket opener at 1162
	=> Found curly bracket closer at 1197 for 1162
	=> Found curly bracket opener at 1206
	=> Found curly bracket closer at 1224 for 1206
	*** END TOKEN MAP ***
	*** START SCOPE MAP ***
	Start scope map at 4:T_SWITCH => switch
	=> Begin scope map recursion at token 4 with depth 1
	Process token 5 on line 4 []: T_WHITESPACE =>  
	Process token 6 on line 4 []: T_OPEN_PARENTHESIS => (
	Process token 7 on line 4 []: T_STRING => something
	Process token 8 on line 4 []: T_CLOSE_PARENTHESIS => )
	Process token 9 on line 4 []: T_WHITESPACE =>  
	Process token 10 on line 4 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 4:T_SWITCH
	Process token 11 on line 4 [opener:10;]: T_WHITESPACE => \n
	Process token 12 on line 5 [opener:10;]: T_WHITESPACE =>     
	Process token 13 on line 5 [opener:10;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 13 with depth 1
	Process token 14 on line 5 []: T_WHITESPACE =>  
	Process token 15 on line 5 []: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 16 on line 5 []: T_COLON => :
	=> Found scope opener for 13:T_CASE
	Process token 17 on line 5 [opener:16;]: T_WHITESPACE => \n
	Process token 18 on line 6 [opener:16;]: T_WHITESPACE =>         
	Process token 19 on line 6 [opener:16;]: T_STRING => myvar
	Process token 20 on line 6 [opener:16;]: T_WHITESPACE =>  
	Process token 21 on line 6 [opener:16;]: T_EQUAL => =
	Process token 22 on line 6 [opener:16;]: T_WHITESPACE =>  
	Process token 23 on line 6 [opener:16;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 24 on line 6 [opener:16;]: T_SEMICOLON => ;
	Process token 25 on line 6 [opener:16;]: T_WHITESPACE => \n
	Process token 26 on line 7 [opener:16;]: T_WHITESPACE =>     
	Process token 27 on line 7 [opener:16;]: T_BREAK => break
	=> Found scope closer (27:T_BREAK) for 13:T_CASE
	Process token 17 on line 5 [opener:10;]: T_WHITESPACE => \n
	Process token 18 on line 6 [opener:10;]: T_WHITESPACE =>         
	Process token 19 on line 6 [opener:10;]: T_STRING => myvar
	Process token 20 on line 6 [opener:10;]: T_WHITESPACE =>  
	Process token 21 on line 6 [opener:10;]: T_EQUAL => =
	Process token 22 on line 6 [opener:10;]: T_WHITESPACE =>  
	Process token 23 on line 6 [opener:10;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 24 on line 6 [opener:10;]: T_SEMICOLON => ;
	Process token 25 on line 6 [opener:10;]: T_WHITESPACE => \n
	Process token 26 on line 7 [opener:10;]: T_WHITESPACE =>     
	Process token 27 on line 7 [opener:10;]: T_BREAK => break
	Process token 28 on line 7 [opener:10;]: T_SEMICOLON => ;
	Process token 29 on line 7 [opener:10;]: T_WHITESPACE => \n
	Process token 30 on line 8 [opener:10;]: T_WHITESPACE => \n
	Process token 31 on line 9 [opener:10;]: T_WHITESPACE =>     
	Process token 32 on line 9 [opener:10;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 32 with depth 1
	Process token 33 on line 9 []: T_WHITESPACE =>  
	Process token 34 on line 9 []: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 35 on line 9 []: T_COLON => :
	=> Found scope opener for 32:T_CASE
	Process token 36 on line 9 [opener:35;]: T_WHITESPACE => \n
	Process token 37 on line 10 [opener:35;]: T_WHITESPACE =>     
	Process token 38 on line 10 [opener:35;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 38 with depth 1
	Process token 39 on line 10 []: T_WHITESPACE =>  
	Process token 40 on line 10 []: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 41 on line 10 []: T_COLON => :
	=> Found scope opener for 38:T_CASE
	Process token 42 on line 10 [opener:41;]: T_WHITESPACE => \n
	Process token 43 on line 11 [opener:41;]: T_WHITESPACE =>         
	Process token 44 on line 11 [opener:41;]: T_STRING => myvar
	Process token 45 on line 11 [opener:41;]: T_WHITESPACE =>  
	Process token 46 on line 11 [opener:41;]: T_EQUAL => =
	Process token 47 on line 11 [opener:41;]: T_WHITESPACE =>  
	Process token 48 on line 11 [opener:41;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 49 on line 11 [opener:41;]: T_SEMICOLON => ;
	Process token 50 on line 11 [opener:41;]: T_WHITESPACE => \n
	Process token 51 on line 12 [opener:41;]: T_WHITESPACE =>     
	Process token 52 on line 12 [opener:41;]: T_BREAK => break
	=> Found scope closer (52:T_BREAK) for 38:T_CASE
	Process token 42 on line 10 [opener:35;]: T_WHITESPACE => \n
	Process token 43 on line 11 [opener:35;]: T_WHITESPACE =>         
	Process token 44 on line 11 [opener:35;]: T_STRING => myvar
	Process token 45 on line 11 [opener:35;]: T_WHITESPACE =>  
	Process token 46 on line 11 [opener:35;]: T_EQUAL => =
	Process token 47 on line 11 [opener:35;]: T_WHITESPACE =>  
	Process token 48 on line 11 [opener:35;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 49 on line 11 [opener:35;]: T_SEMICOLON => ;
	Process token 50 on line 11 [opener:35;]: T_WHITESPACE => \n
	Process token 51 on line 12 [opener:35;]: T_WHITESPACE =>     
	Process token 52 on line 12 [opener:35;]: T_BREAK => break
	=> Found scope closer (52:T_BREAK) for 32:T_CASE
	Process token 36 on line 9 [opener:10;]: T_WHITESPACE => \n
	Process token 37 on line 10 [opener:10;]: T_WHITESPACE =>     
	Process token 38 on line 10 [opener:10;]: T_CASE => case
	* token is an opening condition *
	* already processed, skipping *
	Process token 39 on line 10 [opener:10;]: T_WHITESPACE =>  
	Process token 40 on line 10 [opener:10;]: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 41 on line 10 [opener:10;]: T_COLON => :
	Process token 42 on line 10 [opener:10;]: T_WHITESPACE => \n
	Process token 43 on line 11 [opener:10;]: T_WHITESPACE =>         
	Process token 44 on line 11 [opener:10;]: T_STRING => myvar
	Process token 45 on line 11 [opener:10;]: T_WHITESPACE =>  
	Process token 46 on line 11 [opener:10;]: T_EQUAL => =
	Process token 47 on line 11 [opener:10;]: T_WHITESPACE =>  
	Process token 48 on line 11 [opener:10;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 49 on line 11 [opener:10;]: T_SEMICOLON => ;
	Process token 50 on line 11 [opener:10;]: T_WHITESPACE => \n
	Process token 51 on line 12 [opener:10;]: T_WHITESPACE =>     
	Process token 52 on line 12 [opener:10;]: T_BREAK => break
	Process token 53 on line 12 [opener:10;]: T_SEMICOLON => ;
	Process token 54 on line 12 [opener:10;]: T_WHITESPACE => \n
	Process token 55 on line 13 [opener:10;]: T_WHITESPACE => \n
	Process token 56 on line 14 [opener:10;]: T_WHITESPACE =>     
	Process token 57 on line 14 [opener:10;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 57 with depth 1
	Process token 58 on line 14 []: T_WHITESPACE =>  
	Process token 59 on line 14 []: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 60 on line 14 []: T_COLON => :
	=> Found scope opener for 57:T_CASE
	Process token 61 on line 14 [opener:60;]: T_WHITESPACE => \n
	Process token 62 on line 15 [opener:60;]: T_WHITESPACE =>         
	Process token 63 on line 15 [opener:60;]: T_STRING => myvar
	Process token 64 on line 15 [opener:60;]: T_WHITESPACE =>  
	Process token 65 on line 15 [opener:60;]: T_EQUAL => =
	Process token 66 on line 15 [opener:60;]: T_WHITESPACE =>  
	Process token 67 on line 15 [opener:60;]: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 68 on line 15 [opener:60;]: T_SEMICOLON => ;
	Process token 69 on line 15 [opener:60;]: T_WHITESPACE => \n
	Process token 70 on line 16 [opener:60;]: T_WHITESPACE =>     
	Process token 71 on line 16 [opener:60;]: T_BREAK => break
	=> Found scope closer (71:T_BREAK) for 57:T_CASE
	Process token 61 on line 14 [opener:10;]: T_WHITESPACE => \n
	Process token 62 on line 15 [opener:10;]: T_WHITESPACE =>         
	Process token 63 on line 15 [opener:10;]: T_STRING => myvar
	Process token 64 on line 15 [opener:10;]: T_WHITESPACE =>  
	Process token 65 on line 15 [opener:10;]: T_EQUAL => =
	Process token 66 on line 15 [opener:10;]: T_WHITESPACE =>  
	Process token 67 on line 15 [opener:10;]: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 68 on line 15 [opener:10;]: T_SEMICOLON => ;
	Process token 69 on line 15 [opener:10;]: T_WHITESPACE => \n
	Process token 70 on line 16 [opener:10;]: T_WHITESPACE =>     
	Process token 71 on line 16 [opener:10;]: T_BREAK => break
	Process token 72 on line 16 [opener:10;]: T_SEMICOLON => ;
	Process token 73 on line 16 [opener:10;]: T_WHITESPACE => \n
	Process token 74 on line 17 [opener:10;]: T_WHITESPACE => \n
	Process token 75 on line 18 [opener:10;]: T_WHITESPACE =>     
	Process token 76 on line 18 [opener:10;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 76 with depth 1
	Process token 77 on line 18 []: T_COLON => :
	=> Found scope opener for 76:T_DEFAULT
	Process token 78 on line 18 [opener:77;]: T_WHITESPACE => \n
	Process token 79 on line 19 [opener:77;]: T_WHITESPACE =>         
	Process token 80 on line 19 [opener:77;]: T_STRING => myvar
	Process token 81 on line 19 [opener:77;]: T_WHITESPACE =>  
	Process token 82 on line 19 [opener:77;]: T_EQUAL => =
	Process token 83 on line 19 [opener:77;]: T_WHITESPACE =>  
	Process token 84 on line 19 [opener:77;]: T_NULL => null
	Process token 85 on line 19 [opener:77;]: T_SEMICOLON => ;
	Process token 86 on line 19 [opener:77;]: T_WHITESPACE => \n
	Process token 87 on line 20 [opener:77;]: T_WHITESPACE =>     
	Process token 88 on line 20 [opener:77;]: T_BREAK => break
	=> Found scope closer (88:T_BREAK) for 76:T_DEFAULT
	Process token 78 on line 18 [opener:10;]: T_WHITESPACE => \n
	Process token 79 on line 19 [opener:10;]: T_WHITESPACE =>         
	Process token 80 on line 19 [opener:10;]: T_STRING => myvar
	Process token 81 on line 19 [opener:10;]: T_WHITESPACE =>  
	Process token 82 on line 19 [opener:10;]: T_EQUAL => =
	Process token 83 on line 19 [opener:10;]: T_WHITESPACE =>  
	Process token 84 on line 19 [opener:10;]: T_NULL => null
	Process token 85 on line 19 [opener:10;]: T_SEMICOLON => ;
	Process token 86 on line 19 [opener:10;]: T_WHITESPACE => \n
	Process token 87 on line 20 [opener:10;]: T_WHITESPACE =>     
	Process token 88 on line 20 [opener:10;]: T_BREAK => break
	Process token 89 on line 20 [opener:10;]: T_SEMICOLON => ;
	Process token 90 on line 20 [opener:10;]: T_WHITESPACE => \n
	Process token 91 on line 21 [opener:10;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (91:T_CLOSE_CURLY_BRACKET) for 4:T_SWITCH
	Start scope map at 95:T_SWITCH => switch
	=> Begin scope map recursion at token 95 with depth 1
	Process token 96 on line 24 []: T_WHITESPACE =>  
	Process token 97 on line 24 []: T_OPEN_PARENTHESIS => (
	Process token 98 on line 24 []: T_STRING => something
	Process token 99 on line 24 []: T_CLOSE_PARENTHESIS => )
	Process token 100 on line 24 []: T_WHITESPACE =>  
	Process token 101 on line 24 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 95:T_SWITCH
	Process token 102 on line 24 [opener:101;]: T_WHITESPACE => \n
	Process token 103 on line 25 [opener:101;]: T_WHITESPACE =>     
	Process token 104 on line 25 [opener:101;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 104 with depth 1
	Process token 105 on line 25 []: T_WHITESPACE =>  
	Process token 106 on line 25 []: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 107 on line 25 []: T_COLON => :
	=> Found scope opener for 104:T_CASE
	Process token 108 on line 25 [opener:107;]: T_WHITESPACE => \n
	Process token 109 on line 26 [opener:107;]: T_WHITESPACE =>         
	Process token 110 on line 26 [opener:107;]: T_STRING => myvar
	Process token 111 on line 26 [opener:107;]: T_WHITESPACE =>  
	Process token 112 on line 26 [opener:107;]: T_EQUAL => =
	Process token 113 on line 26 [opener:107;]: T_WHITESPACE =>  
	Process token 114 on line 26 [opener:107;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 115 on line 26 [opener:107;]: T_SEMICOLON => ;
	Process token 116 on line 26 [opener:107;]: T_WHITESPACE => \n
	Process token 117 on line 27 [opener:107;]: T_WHITESPACE =>         
	Process token 118 on line 27 [opener:107;]: T_BREAK => break
	=> Found scope closer (118:T_BREAK) for 104:T_CASE
	Process token 108 on line 25 [opener:101;]: T_WHITESPACE => \n
	Process token 109 on line 26 [opener:101;]: T_WHITESPACE =>         
	Process token 110 on line 26 [opener:101;]: T_STRING => myvar
	Process token 111 on line 26 [opener:101;]: T_WHITESPACE =>  
	Process token 112 on line 26 [opener:101;]: T_EQUAL => =
	Process token 113 on line 26 [opener:101;]: T_WHITESPACE =>  
	Process token 114 on line 26 [opener:101;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 115 on line 26 [opener:101;]: T_SEMICOLON => ;
	Process token 116 on line 26 [opener:101;]: T_WHITESPACE => \n
	Process token 117 on line 27 [opener:101;]: T_WHITESPACE =>         
	Process token 118 on line 27 [opener:101;]: T_BREAK => break
	Process token 119 on line 27 [opener:101;]: T_SEMICOLON => ;
	Process token 120 on line 27 [opener:101;]: T_WHITESPACE => \n
	Process token 121 on line 28 [opener:101;]: T_WHITESPACE => \n
	Process token 122 on line 29 [opener:101;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 122 with depth 1
	Process token 123 on line 29 []: T_WHITESPACE =>  
	Process token 124 on line 29 []: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 125 on line 29 []: T_COLON => :
	=> Found scope opener for 122:T_CASE
	Process token 126 on line 29 [opener:125;]: T_WHITESPACE => \n
	Process token 127 on line 30 [opener:125;]: T_WHITESPACE =>     
	Process token 128 on line 30 [opener:125;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 128 with depth 1
	Process token 129 on line 30 []: T_WHITESPACE =>  
	Process token 130 on line 30 []: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 131 on line 30 []: T_COLON => :
	=> Found scope opener for 128:T_CASE
	Process token 132 on line 30 [opener:131;]: T_WHITESPACE => \n
	Process token 133 on line 31 [opener:131;]: T_WHITESPACE =>         
	Process token 134 on line 31 [opener:131;]: T_STRING => myvar
	Process token 135 on line 31 [opener:131;]: T_WHITESPACE =>  
	Process token 136 on line 31 [opener:131;]: T_EQUAL => =
	Process token 137 on line 31 [opener:131;]: T_WHITESPACE =>  
	Process token 138 on line 31 [opener:131;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 139 on line 31 [opener:131;]: T_SEMICOLON => ;
	Process token 140 on line 31 [opener:131;]: T_WHITESPACE => \n
	Process token 141 on line 32 [opener:131;]: T_WHITESPACE =>     
	Process token 142 on line 32 [opener:131;]: T_BREAK => break
	=> Found scope closer (142:T_BREAK) for 128:T_CASE
	Process token 132 on line 30 [opener:125;]: T_WHITESPACE => \n
	Process token 133 on line 31 [opener:125;]: T_WHITESPACE =>         
	Process token 134 on line 31 [opener:125;]: T_STRING => myvar
	Process token 135 on line 31 [opener:125;]: T_WHITESPACE =>  
	Process token 136 on line 31 [opener:125;]: T_EQUAL => =
	Process token 137 on line 31 [opener:125;]: T_WHITESPACE =>  
	Process token 138 on line 31 [opener:125;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 139 on line 31 [opener:125;]: T_SEMICOLON => ;
	Process token 140 on line 31 [opener:125;]: T_WHITESPACE => \n
	Process token 141 on line 32 [opener:125;]: T_WHITESPACE =>     
	Process token 142 on line 32 [opener:125;]: T_BREAK => break
	=> Found scope closer (142:T_BREAK) for 122:T_CASE
	Process token 126 on line 29 [opener:101;]: T_WHITESPACE => \n
	Process token 127 on line 30 [opener:101;]: T_WHITESPACE =>     
	Process token 128 on line 30 [opener:101;]: T_CASE => case
	* token is an opening condition *
	* already processed, skipping *
	Process token 129 on line 30 [opener:101;]: T_WHITESPACE =>  
	Process token 130 on line 30 [opener:101;]: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 131 on line 30 [opener:101;]: T_COLON => :
	Process token 132 on line 30 [opener:101;]: T_WHITESPACE => \n
	Process token 133 on line 31 [opener:101;]: T_WHITESPACE =>         
	Process token 134 on line 31 [opener:101;]: T_STRING => myvar
	Process token 135 on line 31 [opener:101;]: T_WHITESPACE =>  
	Process token 136 on line 31 [opener:101;]: T_EQUAL => =
	Process token 137 on line 31 [opener:101;]: T_WHITESPACE =>  
	Process token 138 on line 31 [opener:101;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 139 on line 31 [opener:101;]: T_SEMICOLON => ;
	Process token 140 on line 31 [opener:101;]: T_WHITESPACE => \n
	Process token 141 on line 32 [opener:101;]: T_WHITESPACE =>     
	Process token 142 on line 32 [opener:101;]: T_BREAK => break
	Process token 143 on line 32 [opener:101;]: T_SEMICOLON => ;
	Process token 144 on line 32 [opener:101;]: T_WHITESPACE => \n
	Process token 145 on line 33 [opener:101;]: T_WHITESPACE => \n
	Process token 146 on line 34 [opener:101;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 146 with depth 1
	Process token 147 on line 34 []: T_WHITESPACE =>  
	Process token 148 on line 34 []: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 149 on line 34 []: T_COLON => :
	=> Found scope opener for 146:T_CASE
	Process token 150 on line 34 [opener:149;]: T_WHITESPACE => \n
	Process token 151 on line 35 [opener:149;]: T_WHITESPACE =>     
	Process token 152 on line 35 [opener:149;]: T_STRING => myvar
	Process token 153 on line 35 [opener:149;]: T_WHITESPACE =>  
	Process token 154 on line 35 [opener:149;]: T_EQUAL => =
	Process token 155 on line 35 [opener:149;]: T_WHITESPACE =>  
	Process token 156 on line 35 [opener:149;]: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 157 on line 35 [opener:149;]: T_SEMICOLON => ;
	Process token 158 on line 35 [opener:149;]: T_WHITESPACE => \n
	Process token 159 on line 36 [opener:149;]: T_BREAK => break
	=> Found scope closer (159:T_BREAK) for 146:T_CASE
	Process token 150 on line 34 [opener:101;]: T_WHITESPACE => \n
	Process token 151 on line 35 [opener:101;]: T_WHITESPACE =>     
	Process token 152 on line 35 [opener:101;]: T_STRING => myvar
	Process token 153 on line 35 [opener:101;]: T_WHITESPACE =>  
	Process token 154 on line 35 [opener:101;]: T_EQUAL => =
	Process token 155 on line 35 [opener:101;]: T_WHITESPACE =>  
	Process token 156 on line 35 [opener:101;]: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 157 on line 35 [opener:101;]: T_SEMICOLON => ;
	Process token 158 on line 35 [opener:101;]: T_WHITESPACE => \n
	Process token 159 on line 36 [opener:101;]: T_BREAK => break
	Process token 160 on line 36 [opener:101;]: T_SEMICOLON => ;
	Process token 161 on line 36 [opener:101;]: T_WHITESPACE => \n
	Process token 162 on line 37 [opener:101;]: T_WHITESPACE => \n
	Process token 163 on line 38 [opener:101;]: T_WHITESPACE =>     
	Process token 164 on line 38 [opener:101;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 164 with depth 1
	Process token 165 on line 38 []: T_COLON => :
	=> Found scope opener for 164:T_DEFAULT
	Process token 166 on line 38 [opener:165;]: T_WHITESPACE => \n
	Process token 167 on line 39 [opener:165;]: T_WHITESPACE =>         
	Process token 168 on line 39 [opener:165;]: T_STRING => myvar
	Process token 169 on line 39 [opener:165;]: T_WHITESPACE =>  
	Process token 170 on line 39 [opener:165;]: T_EQUAL => =
	Process token 171 on line 39 [opener:165;]: T_WHITESPACE =>  
	Process token 172 on line 39 [opener:165;]: T_NULL => null
	Process token 173 on line 39 [opener:165;]: T_SEMICOLON => ;
	Process token 174 on line 39 [opener:165;]: T_WHITESPACE => \n
	Process token 175 on line 40 [opener:165;]: T_WHITESPACE =>     
	Process token 176 on line 40 [opener:165;]: T_BREAK => break
	=> Found scope closer (176:T_BREAK) for 164:T_DEFAULT
	Process token 166 on line 38 [opener:101;]: T_WHITESPACE => \n
	Process token 167 on line 39 [opener:101;]: T_WHITESPACE =>         
	Process token 168 on line 39 [opener:101;]: T_STRING => myvar
	Process token 169 on line 39 [opener:101;]: T_WHITESPACE =>  
	Process token 170 on line 39 [opener:101;]: T_EQUAL => =
	Process token 171 on line 39 [opener:101;]: T_WHITESPACE =>  
	Process token 172 on line 39 [opener:101;]: T_NULL => null
	Process token 173 on line 39 [opener:101;]: T_SEMICOLON => ;
	Process token 174 on line 39 [opener:101;]: T_WHITESPACE => \n
	Process token 175 on line 40 [opener:101;]: T_WHITESPACE =>     
	Process token 176 on line 40 [opener:101;]: T_BREAK => break
	Process token 177 on line 40 [opener:101;]: T_SEMICOLON => ;
	Process token 178 on line 40 [opener:101;]: T_WHITESPACE => \n
	Process token 179 on line 41 [opener:101;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (179:T_CLOSE_CURLY_BRACKET) for 95:T_SWITCH
	Start scope map at 183:T_SWITCH => switch
	=> Begin scope map recursion at token 183 with depth 1
	Process token 184 on line 44 []: T_WHITESPACE =>  
	Process token 185 on line 44 []: T_OPEN_PARENTHESIS => (
	Process token 186 on line 44 []: T_STRING => something
	Process token 187 on line 44 []: T_CLOSE_PARENTHESIS => )
	Process token 188 on line 44 []: T_WHITESPACE =>  
	Process token 189 on line 44 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 183:T_SWITCH
	Process token 190 on line 44 [opener:189;]: T_WHITESPACE => \n
	Process token 191 on line 45 [opener:189;]: T_WHITESPACE =>     
	Process token 192 on line 45 [opener:189;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 192 with depth 1
	Process token 193 on line 45 []: T_WHITESPACE =>  
	Process token 194 on line 45 []: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 195 on line 45 []: T_COLON => :
	=> Found scope opener for 192:T_CASE
	Process token 196 on line 45 [opener:195;]: T_WHITESPACE => \n
	Process token 197 on line 46 [opener:195;]: T_WHITESPACE =>         
	Process token 198 on line 46 [opener:195;]: T_STRING => myvar
	Process token 199 on line 46 [opener:195;]: T_WHITESPACE =>  
	Process token 200 on line 46 [opener:195;]: T_EQUAL => =
	Process token 201 on line 46 [opener:195;]: T_WHITESPACE =>  
	Process token 202 on line 46 [opener:195;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 203 on line 46 [opener:195;]: T_SEMICOLON => ;
	Process token 204 on line 46 [opener:195;]: T_WHITESPACE => \n
	Process token 205 on line 47 [opener:195;]: T_WHITESPACE =>     
	Process token 206 on line 47 [opener:195;]: T_BREAK => break
	=> Found scope closer (206:T_BREAK) for 192:T_CASE
	Process token 196 on line 45 [opener:189;]: T_WHITESPACE => \n
	Process token 197 on line 46 [opener:189;]: T_WHITESPACE =>         
	Process token 198 on line 46 [opener:189;]: T_STRING => myvar
	Process token 199 on line 46 [opener:189;]: T_WHITESPACE =>  
	Process token 200 on line 46 [opener:189;]: T_EQUAL => =
	Process token 201 on line 46 [opener:189;]: T_WHITESPACE =>  
	Process token 202 on line 46 [opener:189;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 203 on line 46 [opener:189;]: T_SEMICOLON => ;
	Process token 204 on line 46 [opener:189;]: T_WHITESPACE => \n
	Process token 205 on line 47 [opener:189;]: T_WHITESPACE =>     
	Process token 206 on line 47 [opener:189;]: T_BREAK => break
	Process token 207 on line 47 [opener:189;]: T_SEMICOLON => ;
	Process token 208 on line 47 [opener:189;]: T_WHITESPACE => \n
	Process token 209 on line 48 [opener:189;]: T_WHITESPACE =>     
	Process token 210 on line 48 [opener:189;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (210:T_CLOSE_CURLY_BRACKET) for 183:T_SWITCH
	Start scope map at 214:T_SWITCH => switch
	=> Begin scope map recursion at token 214 with depth 1
	Process token 215 on line 51 []: T_WHITESPACE =>  
	Process token 216 on line 51 []: T_OPEN_PARENTHESIS => (
	Process token 217 on line 51 []: T_STRING => something
	Process token 218 on line 51 []: T_CLOSE_PARENTHESIS => )
	Process token 219 on line 51 []: T_WHITESPACE =>  
	Process token 220 on line 51 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 214:T_SWITCH
	Process token 221 on line 51 [opener:220;]: T_WHITESPACE => \n
	Process token 222 on line 52 [opener:220;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 222 with depth 1
	Process token 223 on line 52 []: T_WHITESPACE =>  
	Process token 224 on line 52 []: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 225 on line 52 []: T_COLON => :
	=> Found scope opener for 222:T_CASE
	Process token 226 on line 52 [opener:225;]: T_WHITESPACE => \n
	Process token 227 on line 53 [opener:225;]: T_WHITESPACE =>     
	Process token 228 on line 53 [opener:225;]: T_STRING => myvar
	Process token 229 on line 53 [opener:225;]: T_WHITESPACE =>  
	Process token 230 on line 53 [opener:225;]: T_EQUAL => =
	Process token 231 on line 53 [opener:225;]: T_WHITESPACE =>  
	Process token 232 on line 53 [opener:225;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 233 on line 53 [opener:225;]: T_SEMICOLON => ;
	Process token 234 on line 53 [opener:225;]: T_WHITESPACE => \n
	Process token 235 on line 54 [opener:225;]: T_WHITESPACE =>     
	Process token 236 on line 54 [opener:225;]: T_BREAK => break
	=> Found scope closer (236:T_BREAK) for 222:T_CASE
	Process token 226 on line 52 [opener:220;]: T_WHITESPACE => \n
	Process token 227 on line 53 [opener:220;]: T_WHITESPACE =>     
	Process token 228 on line 53 [opener:220;]: T_STRING => myvar
	Process token 229 on line 53 [opener:220;]: T_WHITESPACE =>  
	Process token 230 on line 53 [opener:220;]: T_EQUAL => =
	Process token 231 on line 53 [opener:220;]: T_WHITESPACE =>  
	Process token 232 on line 53 [opener:220;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 233 on line 53 [opener:220;]: T_SEMICOLON => ;
	Process token 234 on line 53 [opener:220;]: T_WHITESPACE => \n
	Process token 235 on line 54 [opener:220;]: T_WHITESPACE =>     
	Process token 236 on line 54 [opener:220;]: T_BREAK => break
	Process token 237 on line 54 [opener:220;]: T_SEMICOLON => ;
	Process token 238 on line 54 [opener:220;]: T_WHITESPACE => \n
	Process token 239 on line 55 [opener:220;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 239 with depth 1
	Process token 240 on line 55 []: T_WHITESPACE =>  
	Process token 241 on line 55 []: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 242 on line 55 []: T_COLON => :
	=> Found scope opener for 239:T_CASE
	Process token 243 on line 55 [opener:242;]: T_WHITESPACE => \n
	Process token 244 on line 56 [opener:242;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 244 with depth 1
	Process token 245 on line 56 []: T_WHITESPACE =>  
	Process token 246 on line 56 []: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 247 on line 56 []: T_COLON => :
	=> Found scope opener for 244:T_CASE
	Process token 248 on line 56 [opener:247;]: T_WHITESPACE => \n
	Process token 249 on line 57 [opener:247;]: T_WHITESPACE =>     
	Process token 250 on line 57 [opener:247;]: T_STRING => myvar
	Process token 251 on line 57 [opener:247;]: T_WHITESPACE =>  
	Process token 252 on line 57 [opener:247;]: T_EQUAL => =
	Process token 253 on line 57 [opener:247;]: T_WHITESPACE =>  
	Process token 254 on line 57 [opener:247;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 255 on line 57 [opener:247;]: T_SEMICOLON => ;
	Process token 256 on line 57 [opener:247;]: T_WHITESPACE => \n
	Process token 257 on line 58 [opener:247;]: T_WHITESPACE =>     
	Process token 258 on line 58 [opener:247;]: T_BREAK => break
	=> Found scope closer (258:T_BREAK) for 244:T_CASE
	Process token 248 on line 56 [opener:242;]: T_WHITESPACE => \n
	Process token 249 on line 57 [opener:242;]: T_WHITESPACE =>     
	Process token 250 on line 57 [opener:242;]: T_STRING => myvar
	Process token 251 on line 57 [opener:242;]: T_WHITESPACE =>  
	Process token 252 on line 57 [opener:242;]: T_EQUAL => =
	Process token 253 on line 57 [opener:242;]: T_WHITESPACE =>  
	Process token 254 on line 57 [opener:242;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 255 on line 57 [opener:242;]: T_SEMICOLON => ;
	Process token 256 on line 57 [opener:242;]: T_WHITESPACE => \n
	Process token 257 on line 58 [opener:242;]: T_WHITESPACE =>     
	Process token 258 on line 58 [opener:242;]: T_BREAK => break
	=> Found scope closer (258:T_BREAK) for 239:T_CASE
	Process token 243 on line 55 [opener:220;]: T_WHITESPACE => \n
	Process token 244 on line 56 [opener:220;]: T_CASE => case
	* token is an opening condition *
	* already processed, skipping *
	Process token 245 on line 56 [opener:220;]: T_WHITESPACE =>  
	Process token 246 on line 56 [opener:220;]: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 247 on line 56 [opener:220;]: T_COLON => :
	Process token 248 on line 56 [opener:220;]: T_WHITESPACE => \n
	Process token 249 on line 57 [opener:220;]: T_WHITESPACE =>     
	Process token 250 on line 57 [opener:220;]: T_STRING => myvar
	Process token 251 on line 57 [opener:220;]: T_WHITESPACE =>  
	Process token 252 on line 57 [opener:220;]: T_EQUAL => =
	Process token 253 on line 57 [opener:220;]: T_WHITESPACE =>  
	Process token 254 on line 57 [opener:220;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 255 on line 57 [opener:220;]: T_SEMICOLON => ;
	Process token 256 on line 57 [opener:220;]: T_WHITESPACE => \n
	Process token 257 on line 58 [opener:220;]: T_WHITESPACE =>     
	Process token 258 on line 58 [opener:220;]: T_BREAK => break
	Process token 259 on line 58 [opener:220;]: T_SEMICOLON => ;
	Process token 260 on line 58 [opener:220;]: T_WHITESPACE => \n
	Process token 261 on line 59 [opener:220;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 261 with depth 1
	Process token 262 on line 59 []: T_WHITESPACE =>  
	Process token 263 on line 59 []: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 264 on line 59 []: T_COLON => :
	=> Found scope opener for 261:T_CASE
	Process token 265 on line 59 [opener:264;]: T_WHITESPACE => \n
	Process token 266 on line 60 [opener:264;]: T_WHITESPACE =>     
	Process token 267 on line 60 [opener:264;]: T_STRING => myvar
	Process token 268 on line 60 [opener:264;]: T_WHITESPACE =>  
	Process token 269 on line 60 [opener:264;]: T_EQUAL => =
	Process token 270 on line 60 [opener:264;]: T_WHITESPACE =>  
	Process token 271 on line 60 [opener:264;]: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 272 on line 60 [opener:264;]: T_SEMICOLON => ;
	Process token 273 on line 60 [opener:264;]: T_WHITESPACE => \n
	Process token 274 on line 61 [opener:264;]: T_WHITESPACE =>     
	Process token 275 on line 61 [opener:264;]: T_BREAK => break
	=> Found scope closer (275:T_BREAK) for 261:T_CASE
	Process token 265 on line 59 [opener:220;]: T_WHITESPACE => \n
	Process token 266 on line 60 [opener:220;]: T_WHITESPACE =>     
	Process token 267 on line 60 [opener:220;]: T_STRING => myvar
	Process token 268 on line 60 [opener:220;]: T_WHITESPACE =>  
	Process token 269 on line 60 [opener:220;]: T_EQUAL => =
	Process token 270 on line 60 [opener:220;]: T_WHITESPACE =>  
	Process token 271 on line 60 [opener:220;]: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 272 on line 60 [opener:220;]: T_SEMICOLON => ;
	Process token 273 on line 60 [opener:220;]: T_WHITESPACE => \n
	Process token 274 on line 61 [opener:220;]: T_WHITESPACE =>     
	Process token 275 on line 61 [opener:220;]: T_BREAK => break
	Process token 276 on line 61 [opener:220;]: T_SEMICOLON => ;
	Process token 277 on line 61 [opener:220;]: T_WHITESPACE => \n
	Process token 278 on line 62 [opener:220;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 278 with depth 1
	Process token 279 on line 62 []: T_COLON => :
	=> Found scope opener for 278:T_DEFAULT
	Process token 280 on line 62 [opener:279;]: T_WHITESPACE => \n
	Process token 281 on line 63 [opener:279;]: T_WHITESPACE =>     
	Process token 282 on line 63 [opener:279;]: T_STRING => myvar
	Process token 283 on line 63 [opener:279;]: T_WHITESPACE =>  
	Process token 284 on line 63 [opener:279;]: T_EQUAL => =
	Process token 285 on line 63 [opener:279;]: T_WHITESPACE =>  
	Process token 286 on line 63 [opener:279;]: T_NULL => null
	Process token 287 on line 63 [opener:279;]: T_SEMICOLON => ;
	Process token 288 on line 63 [opener:279;]: T_WHITESPACE => \n
	Process token 289 on line 64 [opener:279;]: T_WHITESPACE =>     
	Process token 290 on line 64 [opener:279;]: T_BREAK => break
	=> Found scope closer (290:T_BREAK) for 278:T_DEFAULT
	Process token 280 on line 62 [opener:220;]: T_WHITESPACE => \n
	Process token 281 on line 63 [opener:220;]: T_WHITESPACE =>     
	Process token 282 on line 63 [opener:220;]: T_STRING => myvar
	Process token 283 on line 63 [opener:220;]: T_WHITESPACE =>  
	Process token 284 on line 63 [opener:220;]: T_EQUAL => =
	Process token 285 on line 63 [opener:220;]: T_WHITESPACE =>  
	Process token 286 on line 63 [opener:220;]: T_NULL => null
	Process token 287 on line 63 [opener:220;]: T_SEMICOLON => ;
	Process token 288 on line 63 [opener:220;]: T_WHITESPACE => \n
	Process token 289 on line 64 [opener:220;]: T_WHITESPACE =>     
	Process token 290 on line 64 [opener:220;]: T_BREAK => break
	Process token 291 on line 64 [opener:220;]: T_SEMICOLON => ;
	Process token 292 on line 64 [opener:220;]: T_WHITESPACE => \n
	Process token 293 on line 65 [opener:220;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (293:T_CLOSE_CURLY_BRACKET) for 214:T_SWITCH
	Start scope map at 297:T_SWITCH => switch
	=> Begin scope map recursion at token 297 with depth 1
	Process token 298 on line 68 []: T_WHITESPACE =>  
	Process token 299 on line 68 []: T_OPEN_PARENTHESIS => (
	Process token 300 on line 68 []: T_STRING => something
	Process token 301 on line 68 []: T_CLOSE_PARENTHESIS => )
	Process token 302 on line 68 []: T_WHITESPACE =>  
	Process token 303 on line 68 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 297:T_SWITCH
	Process token 304 on line 68 [opener:303;]: T_WHITESPACE => \n
	Process token 305 on line 69 [opener:303;]: T_WHITESPACE =>     
	Process token 306 on line 69 [opener:303;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 306 with depth 1
	Process token 307 on line 69 []: T_WHITESPACE =>  
	Process token 308 on line 69 []: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 309 on line 69 []: T_COLON => :
	=> Found scope opener for 306:T_CASE
	Process token 310 on line 69 [opener:309;]: T_WHITESPACE => \n
	Process token 311 on line 70 [opener:309;]: T_WHITESPACE =>         
	Process token 312 on line 70 [opener:309;]: T_STRING => myvar
	Process token 313 on line 70 [opener:309;]: T_WHITESPACE =>  
	Process token 314 on line 70 [opener:309;]: T_EQUAL => =
	Process token 315 on line 70 [opener:309;]: T_WHITESPACE =>  
	Process token 316 on line 70 [opener:309;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 317 on line 70 [opener:309;]: T_SEMICOLON => ;
	Process token 318 on line 70 [opener:309;]: T_WHITESPACE => \n
	Process token 319 on line 71 [opener:309;]: T_WHITESPACE => \n
	Process token 320 on line 72 [opener:309;]: T_WHITESPACE =>     
	Process token 321 on line 72 [opener:309;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 321 with depth 1
	Process token 322 on line 72 []: T_WHITESPACE =>  
	Process token 323 on line 72 []: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 324 on line 72 []: T_COLON => :
	=> Found scope opener for 321:T_CASE
	Process token 325 on line 72 [opener:324;]: T_WHITESPACE => \n
	Process token 326 on line 73 [opener:324;]: T_WHITESPACE =>     
	Process token 327 on line 73 [opener:324;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 327 with depth 1
	Process token 328 on line 73 []: T_WHITESPACE =>  
	Process token 329 on line 73 []: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 330 on line 73 []: T_COLON => :
	=> Found scope opener for 327:T_CASE
	Process token 331 on line 73 [opener:330;]: T_WHITESPACE => \n
	Process token 332 on line 74 [opener:330;]: T_WHITESPACE =>         
	Process token 333 on line 74 [opener:330;]: T_STRING => myvar
	Process token 334 on line 74 [opener:330;]: T_WHITESPACE =>  
	Process token 335 on line 74 [opener:330;]: T_EQUAL => =
	Process token 336 on line 74 [opener:330;]: T_WHITESPACE =>  
	Process token 337 on line 74 [opener:330;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 338 on line 74 [opener:330;]: T_SEMICOLON => ;
	Process token 339 on line 74 [opener:330;]: T_WHITESPACE => \n
	Process token 340 on line 75 [opener:330;]: T_WHITESPACE => \n
	Process token 341 on line 76 [opener:330;]: T_WHITESPACE =>     
	Process token 342 on line 76 [opener:330;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 342 with depth 1
	Process token 343 on line 76 []: T_WHITESPACE =>  
	Process token 344 on line 76 []: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 345 on line 76 []: T_COLON => :
	=> Found scope opener for 342:T_CASE
	Process token 346 on line 76 [opener:345;]: T_WHITESPACE => \n
	Process token 347 on line 77 [opener:345;]: T_WHITESPACE =>         
	Process token 348 on line 77 [opener:345;]: T_STRING => myvar
	Process token 349 on line 77 [opener:345;]: T_WHITESPACE =>  
	Process token 350 on line 77 [opener:345;]: T_EQUAL => =
	Process token 351 on line 77 [opener:345;]: T_WHITESPACE =>  
	Process token 352 on line 77 [opener:345;]: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 353 on line 77 [opener:345;]: T_SEMICOLON => ;
	Process token 354 on line 77 [opener:345;]: T_WHITESPACE => \n
	Process token 355 on line 78 [opener:345;]: T_WHITESPACE => \n
	Process token 356 on line 79 [opener:345;]: T_WHITESPACE =>     
	Process token 357 on line 79 [opener:345;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 357 with depth 1
	Process token 358 on line 79 []: T_COLON => :
	=> Found scope opener for 357:T_DEFAULT
	Process token 359 on line 79 [opener:358;]: T_WHITESPACE => \n
	Process token 360 on line 80 [opener:358;]: T_WHITESPACE =>         
	Process token 361 on line 80 [opener:358;]: T_STRING => myvar
	Process token 362 on line 80 [opener:358;]: T_WHITESPACE =>  
	Process token 363 on line 80 [opener:358;]: T_EQUAL => =
	Process token 364 on line 80 [opener:358;]: T_WHITESPACE =>  
	Process token 365 on line 80 [opener:358;]: T_NULL => null
	Process token 366 on line 80 [opener:358;]: T_SEMICOLON => ;
	Process token 367 on line 80 [opener:358;]: T_WHITESPACE => \n
	Process token 368 on line 81 [opener:358;]: T_CLOSE_CURLY_BRACKET => }
	=> Found (unexpected) scope closer for 357:T_DEFAULT
	Process token 368 on line 81 [opener:345;]: T_CLOSE_CURLY_BRACKET => }
	=> Found (unexpected) scope closer for 342:T_CASE
	Process token 368 on line 81 [opener:330;]: T_CLOSE_CURLY_BRACKET => }
	=> Found (unexpected) scope closer for 327:T_CASE
	Process token 368 on line 81 [opener:324;]: T_CLOSE_CURLY_BRACKET => }
	=> Found (unexpected) scope closer for 321:T_CASE
	Process token 368 on line 81 [opener:309;]: T_CLOSE_CURLY_BRACKET => }
	=> Found (unexpected) scope closer for 306:T_CASE
	Process token 368 on line 81 [opener:303;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (368:T_CLOSE_CURLY_BRACKET) for 297:T_SWITCH
	Start scope map at 372:T_SWITCH => switch
	=> Begin scope map recursion at token 372 with depth 1
	Process token 373 on line 84 []: T_WHITESPACE =>  
	Process token 374 on line 84 []: T_OPEN_PARENTHESIS => (
	Process token 375 on line 84 []: T_STRING => something
	Process token 376 on line 84 []: T_CLOSE_PARENTHESIS => )
	Process token 377 on line 84 []: T_WHITESPACE =>  
	Process token 378 on line 84 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 372:T_SWITCH
	Process token 379 on line 84 [opener:378;]: T_WHITESPACE => \n
	Process token 380 on line 85 [opener:378;]: T_WHITESPACE =>     
	Process token 381 on line 85 [opener:378;]: T_CASE => Case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 381 with depth 1
	Process token 382 on line 85 []: T_WHITESPACE =>  
	Process token 383 on line 85 []: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 384 on line 85 []: T_WHITESPACE =>  
	Process token 385 on line 85 []: T_COLON => :
	=> Found scope opener for 381:T_CASE
	Process token 386 on line 85 [opener:385;]: T_WHITESPACE => \n
	Process token 387 on line 86 [opener:385;]: T_WHITESPACE =>         
	Process token 388 on line 86 [opener:385;]: T_STRING => myvar
	Process token 389 on line 86 [opener:385;]: T_WHITESPACE =>  
	Process token 390 on line 86 [opener:385;]: T_EQUAL => =
	Process token 391 on line 86 [opener:385;]: T_WHITESPACE =>  
	Process token 392 on line 86 [opener:385;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 393 on line 86 [opener:385;]: T_SEMICOLON => ;
	Process token 394 on line 86 [opener:385;]: T_WHITESPACE => \n
	Process token 395 on line 87 [opener:385;]: T_WHITESPACE => \n
	Process token 396 on line 88 [opener:385;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 396 with depth 1
	Process token 397 on line 88 []: T_WHITESPACE =>   
	Process token 398 on line 88 []: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 399 on line 88 []: T_COLON => :
	=> Found scope opener for 396:T_CASE
	Process token 400 on line 88 [opener:399;]: T_WHITESPACE => \n
	Process token 401 on line 89 [opener:399;]: T_WHITESPACE =>     
	Process token 402 on line 89 [opener:399;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 402 with depth 1
	Process token 403 on line 89 []: T_WHITESPACE =>   
	Process token 404 on line 89 []: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 405 on line 89 []: T_WHITESPACE =>  
	Process token 406 on line 89 []: T_COLON => :
	=> Found scope opener for 402:T_CASE
	Process token 407 on line 89 [opener:406;]: T_WHITESPACE => \n
	Process token 408 on line 90 [opener:406;]: T_WHITESPACE =>         
	Process token 409 on line 90 [opener:406;]: T_STRING => myvar
	Process token 410 on line 90 [opener:406;]: T_WHITESPACE =>  
	Process token 411 on line 90 [opener:406;]: T_EQUAL => =
	Process token 412 on line 90 [opener:406;]: T_WHITESPACE =>  
	Process token 413 on line 90 [opener:406;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 414 on line 90 [opener:406;]: T_SEMICOLON => ;
	Process token 415 on line 90 [opener:406;]: T_WHITESPACE => \n
	Process token 416 on line 91 [opener:406;]: T_WHITESPACE => \n
	Process token 417 on line 92 [opener:406;]: T_WHITESPACE =>     
	Process token 418 on line 92 [opener:406;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 418 with depth 1
	Process token 419 on line 92 []: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 420 on line 92 []: T_COLON => :
	=> Found scope opener for 418:T_CASE
	Process token 421 on line 92 [opener:420;]: T_WHITESPACE => \n
	Process token 422 on line 93 [opener:420;]: T_WHITESPACE =>         
	Process token 423 on line 93 [opener:420;]: T_STRING => myvar
	Process token 424 on line 93 [opener:420;]: T_WHITESPACE =>  
	Process token 425 on line 93 [opener:420;]: T_EQUAL => =
	Process token 426 on line 93 [opener:420;]: T_WHITESPACE =>  
	Process token 427 on line 93 [opener:420;]: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 428 on line 93 [opener:420;]: T_SEMICOLON => ;
	Process token 429 on line 93 [opener:420;]: T_WHITESPACE => \n
	Process token 430 on line 94 [opener:420;]: T_WHITESPACE => \n
	Process token 431 on line 95 [opener:420;]: T_WHITESPACE =>     
	Process token 432 on line 95 [opener:420;]: T_DEFAULT => Default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 432 with depth 1
	Process token 433 on line 95 []: T_WHITESPACE =>  
	Process token 434 on line 95 []: T_COLON => :
	=> Found scope opener for 432:T_DEFAULT
	Process token 435 on line 95 [opener:434;]: T_WHITESPACE => \n
	Process token 436 on line 96 [opener:434;]: T_WHITESPACE =>         
	Process token 437 on line 96 [opener:434;]: T_STRING => myvar
	Process token 438 on line 96 [opener:434;]: T_WHITESPACE =>  
	Process token 439 on line 96 [opener:434;]: T_EQUAL => =
	Process token 440 on line 96 [opener:434;]: T_WHITESPACE =>  
	Process token 441 on line 96 [opener:434;]: T_NULL => null
	Process token 442 on line 96 [opener:434;]: T_SEMICOLON => ;
	Process token 443 on line 96 [opener:434;]: T_WHITESPACE => \n
	Process token 444 on line 97 [opener:434;]: T_WHITESPACE =>         
	Process token 445 on line 97 [opener:434;]: T_STRING => something
	Process token 446 on line 97 [opener:434;]: T_WHITESPACE =>  
	Process token 447 on line 97 [opener:434;]: T_EQUAL => =
	Process token 448 on line 97 [opener:434;]: T_WHITESPACE =>  
	Process token 449 on line 97 [opener:434;]: T_CONSTANT_ENCAPSED_STRING => 'hello'
	Process token 450 on line 97 [opener:434;]: T_SEMICOLON => ;
	Process token 451 on line 97 [opener:434;]: T_WHITESPACE => \n
	Process token 452 on line 98 [opener:434;]: T_WHITESPACE =>         
	Process token 453 on line 98 [opener:434;]: T_STRING => other
	Process token 454 on line 98 [opener:434;]: T_WHITESPACE =>  
	Process token 455 on line 98 [opener:434;]: T_EQUAL => =
	Process token 456 on line 98 [opener:434;]: T_WHITESPACE =>  
	Process token 457 on line 98 [opener:434;]: T_CONSTANT_ENCAPSED_STRING => 'hi'
	Process token 458 on line 98 [opener:434;]: T_SEMICOLON => ;
	Process token 459 on line 98 [opener:434;]: T_WHITESPACE => \n
	Process token 460 on line 99 [opener:434;]: T_WHITESPACE =>     
	Process token 461 on line 99 [opener:434;]: T_CLOSE_CURLY_BRACKET => }
	=> Found (unexpected) scope closer for 432:T_DEFAULT
	Process token 461 on line 99 [opener:420;]: T_CLOSE_CURLY_BRACKET => }
	=> Found (unexpected) scope closer for 418:T_CASE
	Process token 461 on line 99 [opener:406;]: T_CLOSE_CURLY_BRACKET => }
	=> Found (unexpected) scope closer for 402:T_CASE
	Process token 461 on line 99 [opener:399;]: T_CLOSE_CURLY_BRACKET => }
	=> Found (unexpected) scope closer for 396:T_CASE
	Process token 461 on line 99 [opener:385;]: T_CLOSE_CURLY_BRACKET => }
	=> Found (unexpected) scope closer for 381:T_CASE
	Process token 461 on line 99 [opener:378;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (461:T_CLOSE_CURLY_BRACKET) for 372:T_SWITCH
	Start scope map at 465:T_SWITCH => switch
	=> Begin scope map recursion at token 465 with depth 1
	Process token 466 on line 102 []: T_WHITESPACE =>  
	Process token 467 on line 102 []: T_OPEN_PARENTHESIS => (
	Process token 468 on line 102 []: T_STRING => condition
	Process token 469 on line 102 []: T_CLOSE_PARENTHESIS => )
	Process token 470 on line 102 []: T_WHITESPACE =>  
	Process token 471 on line 102 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 465:T_SWITCH
	Process token 472 on line 102 [opener:471;]: T_WHITESPACE => \n
	Process token 473 on line 103 [opener:471;]: T_WHITESPACE =>     
	Process token 474 on line 103 [opener:471;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 474 with depth 1
	Process token 475 on line 103 []: T_WHITESPACE =>  
	Process token 476 on line 103 []: T_CONSTANT_ENCAPSED_STRING => 'string'
	Process token 477 on line 103 []: T_COLON => :
	=> Found scope opener for 474:T_CASE
	Process token 478 on line 103 [opener:477;]: T_WHITESPACE => \n
	Process token 479 on line 104 [opener:477;]: T_WHITESPACE =>         
	Process token 480 on line 104 [opener:477;]: T_STRING => varStr
	Process token 481 on line 104 [opener:477;]: T_WHITESPACE =>  
	Process token 482 on line 104 [opener:477;]: T_EQUAL => =
	Process token 483 on line 104 [opener:477;]: T_WHITESPACE =>  
	Process token 484 on line 104 [opener:477;]: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 485 on line 104 [opener:477;]: T_SEMICOLON => ;
	Process token 486 on line 104 [opener:477;]: T_WHITESPACE => \n
	Process token 487 on line 105 [opener:477;]: T_WHITESPACE => \n
	Process token 488 on line 106 [opener:477;]: T_WHITESPACE =>     
	Process token 489 on line 106 [opener:477;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 489 with depth 1
	Process token 490 on line 106 []: T_COLON => :
	=> Found scope opener for 489:T_DEFAULT
	Process token 491 on line 106 [opener:490;]: T_WHITESPACE => \n
	Process token 492 on line 107 [opener:490;]: T_WHITESPACE =>         
	Process token 493 on line 107 [opener:490;]: T_COMMENT => // Ignore the default.\n
	Process token 494 on line 108 [opener:490;]: T_WHITESPACE =>     
	Process token 495 on line 108 [opener:490;]: T_BREAK => break
	=> Found scope closer (495:T_BREAK) for 489:T_DEFAULT
	Process token 491 on line 106 [opener:477;]: T_WHITESPACE => \n
	Process token 492 on line 107 [opener:477;]: T_WHITESPACE =>         
	Process token 493 on line 107 [opener:477;]: T_COMMENT => // Ignore the default.\n
	Process token 494 on line 108 [opener:477;]: T_WHITESPACE =>     
	Process token 495 on line 108 [opener:477;]: T_BREAK => break
	=> Found scope closer (495:T_BREAK) for 474:T_CASE
	Process token 478 on line 103 [opener:471;]: T_WHITESPACE => \n
	Process token 479 on line 104 [opener:471;]: T_WHITESPACE =>         
	Process token 480 on line 104 [opener:471;]: T_STRING => varStr
	Process token 481 on line 104 [opener:471;]: T_WHITESPACE =>  
	Process token 482 on line 104 [opener:471;]: T_EQUAL => =
	Process token 483 on line 104 [opener:471;]: T_WHITESPACE =>  
	Process token 484 on line 104 [opener:471;]: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 485 on line 104 [opener:471;]: T_SEMICOLON => ;
	Process token 486 on line 104 [opener:471;]: T_WHITESPACE => \n
	Process token 487 on line 105 [opener:471;]: T_WHITESPACE => \n
	Process token 488 on line 106 [opener:471;]: T_WHITESPACE =>     
	Process token 489 on line 106 [opener:471;]: T_DEFAULT => default
	* token is an opening condition *
	* already processed, skipping *
	Process token 490 on line 106 [opener:471;]: T_COLON => :
	Process token 491 on line 106 [opener:471;]: T_WHITESPACE => \n
	Process token 492 on line 107 [opener:471;]: T_WHITESPACE =>         
	Process token 493 on line 107 [opener:471;]: T_COMMENT => // Ignore the default.\n
	Process token 494 on line 108 [opener:471;]: T_WHITESPACE =>     
	Process token 495 on line 108 [opener:471;]: T_BREAK => break
	Process token 496 on line 108 [opener:471;]: T_SEMICOLON => ;
	Process token 497 on line 108 [opener:471;]: T_WHITESPACE => \n
	Process token 498 on line 109 [opener:471;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (498:T_CLOSE_CURLY_BRACKET) for 465:T_SWITCH
	Start scope map at 502:T_SWITCH => switch
	=> Begin scope map recursion at token 502 with depth 1
	Process token 503 on line 112 []: T_WHITESPACE =>  
	Process token 504 on line 112 []: T_OPEN_PARENTHESIS => (
	Process token 505 on line 112 []: T_STRING => condition
	Process token 506 on line 112 []: T_CLOSE_PARENTHESIS => )
	Process token 507 on line 112 []: T_WHITESPACE =>  
	Process token 508 on line 112 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 502:T_SWITCH
	Process token 509 on line 112 [opener:508;]: T_WHITESPACE => \n
	Process token 510 on line 113 [opener:508;]: T_WHITESPACE =>     
	Process token 511 on line 113 [opener:508;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 511 with depth 1
	Process token 512 on line 113 []: T_WHITESPACE =>  
	Process token 513 on line 113 []: T_CONSTANT_ENCAPSED_STRING => 'string'
	Process token 514 on line 113 []: T_COLON => :
	=> Found scope opener for 511:T_CASE
	Process token 515 on line 113 [opener:514;]: T_WHITESPACE => \n
	Process token 516 on line 114 [opener:514;]: T_WHITESPACE =>         
	Process token 517 on line 114 [opener:514;]: T_STRING => varStr
	Process token 518 on line 114 [opener:514;]: T_WHITESPACE =>  
	Process token 519 on line 114 [opener:514;]: T_EQUAL => =
	Process token 520 on line 114 [opener:514;]: T_WHITESPACE =>  
	Process token 521 on line 114 [opener:514;]: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 522 on line 114 [opener:514;]: T_SEMICOLON => ;
	Process token 523 on line 114 [opener:514;]: T_WHITESPACE => \n
	Process token 524 on line 115 [opener:514;]: T_WHITESPACE => \n
	Process token 525 on line 116 [opener:514;]: T_WHITESPACE =>     
	Process token 526 on line 116 [opener:514;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 526 with depth 1
	Process token 527 on line 116 []: T_COLON => :
	=> Found scope opener for 526:T_DEFAULT
	Process token 528 on line 116 [opener:527;]: T_WHITESPACE => \n
	Process token 529 on line 117 [opener:527;]: T_WHITESPACE =>     
	Process token 530 on line 117 [opener:527;]: T_BREAK => break
	=> Found scope closer (530:T_BREAK) for 526:T_DEFAULT
	Process token 528 on line 116 [opener:514;]: T_WHITESPACE => \n
	Process token 529 on line 117 [opener:514;]: T_WHITESPACE =>     
	Process token 530 on line 117 [opener:514;]: T_BREAK => break
	=> Found scope closer (530:T_BREAK) for 511:T_CASE
	Process token 515 on line 113 [opener:508;]: T_WHITESPACE => \n
	Process token 516 on line 114 [opener:508;]: T_WHITESPACE =>         
	Process token 517 on line 114 [opener:508;]: T_STRING => varStr
	Process token 518 on line 114 [opener:508;]: T_WHITESPACE =>  
	Process token 519 on line 114 [opener:508;]: T_EQUAL => =
	Process token 520 on line 114 [opener:508;]: T_WHITESPACE =>  
	Process token 521 on line 114 [opener:508;]: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 522 on line 114 [opener:508;]: T_SEMICOLON => ;
	Process token 523 on line 114 [opener:508;]: T_WHITESPACE => \n
	Process token 524 on line 115 [opener:508;]: T_WHITESPACE => \n
	Process token 525 on line 116 [opener:508;]: T_WHITESPACE =>     
	Process token 526 on line 116 [opener:508;]: T_DEFAULT => default
	* token is an opening condition *
	* already processed, skipping *
	Process token 527 on line 116 [opener:508;]: T_COLON => :
	Process token 528 on line 116 [opener:508;]: T_WHITESPACE => \n
	Process token 529 on line 117 [opener:508;]: T_WHITESPACE =>     
	Process token 530 on line 117 [opener:508;]: T_BREAK => break
	Process token 531 on line 117 [opener:508;]: T_SEMICOLON => ;
	Process token 532 on line 117 [opener:508;]: T_WHITESPACE => \n
	Process token 533 on line 118 [opener:508;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (533:T_CLOSE_CURLY_BRACKET) for 502:T_SWITCH
	Start scope map at 537:T_SWITCH => switch
	=> Begin scope map recursion at token 537 with depth 1
	Process token 538 on line 121 []: T_WHITESPACE =>  
	Process token 539 on line 121 []: T_OPEN_PARENTHESIS => (
	Process token 540 on line 121 []: T_STRING => condition
	Process token 541 on line 121 []: T_CLOSE_PARENTHESIS => )
	Process token 542 on line 121 []: T_WHITESPACE =>  
	Process token 543 on line 121 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 537:T_SWITCH
	Process token 544 on line 121 [opener:543;]: T_WHITESPACE => \n
	Process token 545 on line 122 [opener:543;]: T_WHITESPACE =>     
	Process token 546 on line 122 [opener:543;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 546 with depth 1
	Process token 547 on line 122 []: T_WHITESPACE =>  
	Process token 548 on line 122 []: T_CONSTANT_ENCAPSED_STRING => 'string'
	Process token 549 on line 122 []: T_COLON => :
	=> Found scope opener for 546:T_CASE
	Process token 550 on line 122 [opener:549;]: T_WHITESPACE => \n
	Process token 551 on line 123 [opener:549;]: T_WHITESPACE => \n
	Process token 552 on line 124 [opener:549;]: T_WHITESPACE => \n
	Process token 553 on line 125 [opener:549;]: T_WHITESPACE =>         
	Process token 554 on line 125 [opener:549;]: T_STRING => varStr
	Process token 555 on line 125 [opener:549;]: T_WHITESPACE =>  
	Process token 556 on line 125 [opener:549;]: T_EQUAL => =
	Process token 557 on line 125 [opener:549;]: T_WHITESPACE =>  
	Process token 558 on line 125 [opener:549;]: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 559 on line 125 [opener:549;]: T_SEMICOLON => ;
	Process token 560 on line 125 [opener:549;]: T_WHITESPACE => \n
	Process token 561 on line 126 [opener:549;]: T_WHITESPACE => \n
	Process token 562 on line 127 [opener:549;]: T_WHITESPACE =>     
	Process token 563 on line 127 [opener:549;]: T_BREAK => break
	=> Found scope closer (563:T_BREAK) for 546:T_CASE
	Process token 550 on line 122 [opener:543;]: T_WHITESPACE => \n
	Process token 551 on line 123 [opener:543;]: T_WHITESPACE => \n
	Process token 552 on line 124 [opener:543;]: T_WHITESPACE => \n
	Process token 553 on line 125 [opener:543;]: T_WHITESPACE =>         
	Process token 554 on line 125 [opener:543;]: T_STRING => varStr
	Process token 555 on line 125 [opener:543;]: T_WHITESPACE =>  
	Process token 556 on line 125 [opener:543;]: T_EQUAL => =
	Process token 557 on line 125 [opener:543;]: T_WHITESPACE =>  
	Process token 558 on line 125 [opener:543;]: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 559 on line 125 [opener:543;]: T_SEMICOLON => ;
	Process token 560 on line 125 [opener:543;]: T_WHITESPACE => \n
	Process token 561 on line 126 [opener:543;]: T_WHITESPACE => \n
	Process token 562 on line 127 [opener:543;]: T_WHITESPACE =>     
	Process token 563 on line 127 [opener:543;]: T_BREAK => break
	Process token 564 on line 127 [opener:543;]: T_SEMICOLON => ;
	Process token 565 on line 127 [opener:543;]: T_WHITESPACE => \n
	Process token 566 on line 128 [opener:543;]: T_WHITESPACE => \n
	Process token 567 on line 129 [opener:543;]: T_WHITESPACE => \n
	Process token 568 on line 130 [opener:543;]: T_WHITESPACE =>     
	Process token 569 on line 130 [opener:543;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 569 with depth 1
	Process token 570 on line 130 []: T_WHITESPACE =>  
	Process token 571 on line 130 []: T_CONSTANT_ENCAPSED_STRING => 'bool'
	Process token 572 on line 130 []: T_COLON => :
	=> Found scope opener for 569:T_CASE
	Process token 573 on line 130 [opener:572;]: T_WHITESPACE => \n
	Process token 574 on line 131 [opener:572;]: T_WHITESPACE =>         
	Process token 575 on line 131 [opener:572;]: T_STRING => varStr
	Process token 576 on line 131 [opener:572;]: T_WHITESPACE =>  
	Process token 577 on line 131 [opener:572;]: T_EQUAL => =
	Process token 578 on line 131 [opener:572;]: T_WHITESPACE =>  
	Process token 579 on line 131 [opener:572;]: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 580 on line 131 [opener:572;]: T_SEMICOLON => ;
	Process token 581 on line 131 [opener:572;]: T_WHITESPACE => \n
	Process token 582 on line 132 [opener:572;]: T_WHITESPACE => \n
	Process token 583 on line 133 [opener:572;]: T_WHITESPACE => \n
	Process token 584 on line 134 [opener:572;]: T_WHITESPACE =>     
	Process token 585 on line 134 [opener:572;]: T_BREAK => break
	=> Found scope closer (585:T_BREAK) for 569:T_CASE
	Process token 573 on line 130 [opener:543;]: T_WHITESPACE => \n
	Process token 574 on line 131 [opener:543;]: T_WHITESPACE =>         
	Process token 575 on line 131 [opener:543;]: T_STRING => varStr
	Process token 576 on line 131 [opener:543;]: T_WHITESPACE =>  
	Process token 577 on line 131 [opener:543;]: T_EQUAL => =
	Process token 578 on line 131 [opener:543;]: T_WHITESPACE =>  
	Process token 579 on line 131 [opener:543;]: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 580 on line 131 [opener:543;]: T_SEMICOLON => ;
	Process token 581 on line 131 [opener:543;]: T_WHITESPACE => \n
	Process token 582 on line 132 [opener:543;]: T_WHITESPACE => \n
	Process token 583 on line 133 [opener:543;]: T_WHITESPACE => \n
	Process token 584 on line 134 [opener:543;]: T_WHITESPACE =>     
	Process token 585 on line 134 [opener:543;]: T_BREAK => break
	Process token 586 on line 134 [opener:543;]: T_SEMICOLON => ;
	Process token 587 on line 134 [opener:543;]: T_WHITESPACE => \n
	Process token 588 on line 135 [opener:543;]: T_WHITESPACE =>     
	Process token 589 on line 135 [opener:543;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 589 with depth 1
	Process token 590 on line 135 []: T_COLON => :
	=> Found scope opener for 589:T_DEFAULT
	Process token 591 on line 135 [opener:590;]: T_WHITESPACE => \n
	Process token 592 on line 136 [opener:590;]: T_WHITESPACE => \n
	Process token 593 on line 137 [opener:590;]: T_WHITESPACE =>         
	Process token 594 on line 137 [opener:590;]: T_STRING => varStr
	Process token 595 on line 137 [opener:590;]: T_WHITESPACE =>  
	Process token 596 on line 137 [opener:590;]: T_EQUAL => =
	Process token 597 on line 137 [opener:590;]: T_WHITESPACE =>  
	Process token 598 on line 137 [opener:590;]: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 599 on line 137 [opener:590;]: T_SEMICOLON => ;
	Process token 600 on line 137 [opener:590;]: T_WHITESPACE => \n
	Process token 601 on line 138 [opener:590;]: T_WHITESPACE =>     
	Process token 602 on line 138 [opener:590;]: T_BREAK => break
	=> Found scope closer (602:T_BREAK) for 589:T_DEFAULT
	Process token 591 on line 135 [opener:543;]: T_WHITESPACE => \n
	Process token 592 on line 136 [opener:543;]: T_WHITESPACE => \n
	Process token 593 on line 137 [opener:543;]: T_WHITESPACE =>         
	Process token 594 on line 137 [opener:543;]: T_STRING => varStr
	Process token 595 on line 137 [opener:543;]: T_WHITESPACE =>  
	Process token 596 on line 137 [opener:543;]: T_EQUAL => =
	Process token 597 on line 137 [opener:543;]: T_WHITESPACE =>  
	Process token 598 on line 137 [opener:543;]: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 599 on line 137 [opener:543;]: T_SEMICOLON => ;
	Process token 600 on line 137 [opener:543;]: T_WHITESPACE => \n
	Process token 601 on line 138 [opener:543;]: T_WHITESPACE =>     
	Process token 602 on line 138 [opener:543;]: T_BREAK => break
	Process token 603 on line 138 [opener:543;]: T_SEMICOLON => ;
	Process token 604 on line 138 [opener:543;]: T_WHITESPACE => \n
	Process token 605 on line 139 [opener:543;]: T_WHITESPACE => \n
	Process token 606 on line 140 [opener:543;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (606:T_CLOSE_CURLY_BRACKET) for 537:T_SWITCH
	Start scope map at 609:T_SWITCH => switch
	=> Begin scope map recursion at token 609 with depth 1
	Process token 610 on line 142 []: T_WHITESPACE =>  
	Process token 611 on line 142 []: T_OPEN_PARENTHESIS => (
	Process token 612 on line 142 []: T_VAR => var
	Process token 613 on line 142 []: T_CLOSE_PARENTHESIS => )
	Process token 614 on line 142 []: T_WHITESPACE =>  
	Process token 615 on line 142 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 609:T_SWITCH
	Process token 616 on line 142 [opener:615;]: T_WHITESPACE => \n
	Process token 617 on line 143 [opener:615;]: T_WHITESPACE =>     
	Process token 618 on line 143 [opener:615;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 618 with depth 1
	Process token 619 on line 143 []: T_WHITESPACE =>  
	Process token 620 on line 143 []: T_CONSTANT_ENCAPSED_STRING => 'one'
	Process token 621 on line 143 []: T_COLON => :
	=> Found scope opener for 618:T_CASE
	Process token 622 on line 143 [opener:621;]: T_WHITESPACE => \n
	Process token 623 on line 144 [opener:621;]: T_WHITESPACE =>     
	Process token 624 on line 144 [opener:621;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 624 with depth 1
	Process token 625 on line 144 []: T_WHITESPACE =>  
	Process token 626 on line 144 []: T_CONSTANT_ENCAPSED_STRING => 'two'
	Process token 627 on line 144 []: T_COLON => :
	=> Found scope opener for 624:T_CASE
	Process token 628 on line 144 [opener:627;]: T_WHITESPACE => \n
	Process token 629 on line 145 [opener:627;]: T_WHITESPACE =>     
	Process token 630 on line 145 [opener:627;]: T_BREAK => break
	=> Found scope closer (630:T_BREAK) for 624:T_CASE
	Process token 628 on line 144 [opener:621;]: T_WHITESPACE => \n
	Process token 629 on line 145 [opener:621;]: T_WHITESPACE =>     
	Process token 630 on line 145 [opener:621;]: T_BREAK => break
	=> Found scope closer (630:T_BREAK) for 618:T_CASE
	Process token 622 on line 143 [opener:615;]: T_WHITESPACE => \n
	Process token 623 on line 144 [opener:615;]: T_WHITESPACE =>     
	Process token 624 on line 144 [opener:615;]: T_CASE => case
	* token is an opening condition *
	* already processed, skipping *
	Process token 625 on line 144 [opener:615;]: T_WHITESPACE =>  
	Process token 626 on line 144 [opener:615;]: T_CONSTANT_ENCAPSED_STRING => 'two'
	Process token 627 on line 144 [opener:615;]: T_COLON => :
	Process token 628 on line 144 [opener:615;]: T_WHITESPACE => \n
	Process token 629 on line 145 [opener:615;]: T_WHITESPACE =>     
	Process token 630 on line 145 [opener:615;]: T_BREAK => break
	Process token 631 on line 145 [opener:615;]: T_SEMICOLON => ;
	Process token 632 on line 145 [opener:615;]: T_WHITESPACE => \n
	Process token 633 on line 146 [opener:615;]: T_WHITESPACE => \n
	Process token 634 on line 147 [opener:615;]: T_WHITESPACE =>     
	Process token 635 on line 147 [opener:615;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 635 with depth 1
	Process token 636 on line 147 []: T_WHITESPACE =>  
	Process token 637 on line 147 []: T_CONSTANT_ENCAPSED_STRING => 'three'
	Process token 638 on line 147 []: T_COLON => :
	=> Found scope opener for 635:T_CASE
	Process token 639 on line 147 [opener:638;]: T_WHITESPACE => \n
	Process token 640 on line 148 [opener:638;]: T_WHITESPACE =>         
	Process token 641 on line 148 [opener:638;]: T_COMMENT => // Nothing to do.\n
	Process token 642 on line 149 [opener:638;]: T_WHITESPACE =>     
	Process token 643 on line 149 [opener:638;]: T_BREAK => break
	=> Found scope closer (643:T_BREAK) for 635:T_CASE
	Process token 639 on line 147 [opener:615;]: T_WHITESPACE => \n
	Process token 640 on line 148 [opener:615;]: T_WHITESPACE =>         
	Process token 641 on line 148 [opener:615;]: T_COMMENT => // Nothing to do.\n
	Process token 642 on line 149 [opener:615;]: T_WHITESPACE =>     
	Process token 643 on line 149 [opener:615;]: T_BREAK => break
	Process token 644 on line 149 [opener:615;]: T_SEMICOLON => ;
	Process token 645 on line 149 [opener:615;]: T_WHITESPACE => \n
	Process token 646 on line 150 [opener:615;]: T_WHITESPACE => \n
	Process token 647 on line 151 [opener:615;]: T_WHITESPACE =>     
	Process token 648 on line 151 [opener:615;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 648 with depth 1
	Process token 649 on line 151 []: T_WHITESPACE =>  
	Process token 650 on line 151 []: T_CONSTANT_ENCAPSED_STRING => 'four'
	Process token 651 on line 151 []: T_COLON => :
	=> Found scope opener for 648:T_CASE
	Process token 652 on line 151 [opener:651;]: T_WHITESPACE => \n
	Process token 653 on line 152 [opener:651;]: T_WHITESPACE =>         
	Process token 654 on line 152 [opener:651;]: T_STRING => echo
	Process token 655 on line 152 [opener:651;]: T_WHITESPACE =>  
	Process token 656 on line 152 [opener:651;]: T_STRING => hi
	Process token 657 on line 152 [opener:651;]: T_SEMICOLON => ;
	Process token 658 on line 152 [opener:651;]: T_WHITESPACE => \n
	Process token 659 on line 153 [opener:651;]: T_WHITESPACE =>     
	Process token 660 on line 153 [opener:651;]: T_BREAK => break
	=> Found scope closer (660:T_BREAK) for 648:T_CASE
	Process token 652 on line 151 [opener:615;]: T_WHITESPACE => \n
	Process token 653 on line 152 [opener:615;]: T_WHITESPACE =>         
	Process token 654 on line 152 [opener:615;]: T_STRING => echo
	Process token 655 on line 152 [opener:615;]: T_WHITESPACE =>  
	Process token 656 on line 152 [opener:615;]: T_STRING => hi
	Process token 657 on line 152 [opener:615;]: T_SEMICOLON => ;
	Process token 658 on line 152 [opener:615;]: T_WHITESPACE => \n
	Process token 659 on line 153 [opener:615;]: T_WHITESPACE =>     
	Process token 660 on line 153 [opener:615;]: T_BREAK => break
	Process token 661 on line 153 [opener:615;]: T_SEMICOLON => ;
	Process token 662 on line 153 [opener:615;]: T_WHITESPACE => \n
	Process token 663 on line 154 [opener:615;]: T_WHITESPACE => \n
	Process token 664 on line 155 [opener:615;]: T_WHITESPACE =>     
	Process token 665 on line 155 [opener:615;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 665 with depth 1
	Process token 666 on line 155 []: T_COLON => :
	=> Found scope opener for 665:T_DEFAULT
	Process token 667 on line 155 [opener:666;]: T_WHITESPACE => \n
	Process token 668 on line 156 [opener:666;]: T_WHITESPACE =>         
	Process token 669 on line 156 [opener:666;]: T_COMMENT => // No default.\n
	Process token 670 on line 157 [opener:666;]: T_WHITESPACE =>     
	Process token 671 on line 157 [opener:666;]: T_BREAK => break
	=> Found scope closer (671:T_BREAK) for 665:T_DEFAULT
	Process token 667 on line 155 [opener:615;]: T_WHITESPACE => \n
	Process token 668 on line 156 [opener:615;]: T_WHITESPACE =>         
	Process token 669 on line 156 [opener:615;]: T_COMMENT => // No default.\n
	Process token 670 on line 157 [opener:615;]: T_WHITESPACE =>     
	Process token 671 on line 157 [opener:615;]: T_BREAK => break
	Process token 672 on line 157 [opener:615;]: T_SEMICOLON => ;
	Process token 673 on line 157 [opener:615;]: T_WHITESPACE => \n
	Process token 674 on line 158 [opener:615;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (674:T_CLOSE_CURLY_BRACKET) for 609:T_SWITCH
	Start scope map at 677:T_SWITCH => switch
	=> Begin scope map recursion at token 677 with depth 1
	Process token 678 on line 160 []: T_WHITESPACE =>  
	Process token 679 on line 160 []: T_OPEN_PARENTHESIS => (
	Process token 680 on line 160 []: T_VAR => var
	Process token 681 on line 160 []: T_CLOSE_PARENTHESIS => )
	Process token 682 on line 160 []: T_WHITESPACE =>  
	Process token 683 on line 160 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 677:T_SWITCH
	Process token 684 on line 160 [opener:683;]: T_WHITESPACE => \n
	Process token 685 on line 161 [opener:683;]: T_WHITESPACE =>     
	Process token 686 on line 161 [opener:683;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 686 with depth 1
	Process token 687 on line 161 []: T_WHITESPACE =>  
	Process token 688 on line 161 []: T_CONSTANT_ENCAPSED_STRING => 'one'
	Process token 689 on line 161 []: T_COLON => :
	=> Found scope opener for 686:T_CASE
	Process token 690 on line 161 [opener:689;]: T_WHITESPACE => \n
	Process token 691 on line 162 [opener:689;]: T_WHITESPACE =>         
	Process token 692 on line 162 [opener:689;]: T_IF => if
	* token is an opening condition *
	* searching for opener *
		=> Begin scope map recursion at token 692 with depth 2
		Process token 693 on line 162 []: T_WHITESPACE =>  
		Process token 694 on line 162 []: T_OPEN_PARENTHESIS => (
		Process token 695 on line 162 []: T_STRING => blah
		Process token 696 on line 162 []: T_CLOSE_PARENTHESIS => )
		Process token 697 on line 162 []: T_WHITESPACE =>  
		Process token 698 on line 162 []: T_OPEN_CURLY_BRACKET => {
		=> Found scope opener for 692:T_IF
		Process token 699 on line 162 [opener:698;]: T_WHITESPACE => \n
		Process token 700 on line 163 [opener:698;]: T_WHITESPACE =>         
		Process token 701 on line 163 [opener:698;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer (701:T_CLOSE_CURLY_BRACKET) for 692:T_IF
	Process token 702 on line 163 [opener:689;]: T_WHITESPACE => \n
	Process token 703 on line 164 [opener:689;]: T_WHITESPACE => \n
	Process token 704 on line 165 [opener:689;]: T_WHITESPACE =>     
	Process token 705 on line 165 [opener:689;]: T_BREAK => break
	=> Found scope closer (705:T_BREAK) for 686:T_CASE
	Process token 690 on line 161 [opener:683;]: T_WHITESPACE => \n
	Process token 691 on line 162 [opener:683;]: T_WHITESPACE =>         
	Process token 692 on line 162 [opener:683;]: T_IF => if
	* token is an opening condition *
	* already processed, skipping *
	Process token 702 on line 163 [opener:683;]: T_WHITESPACE => \n
	Process token 703 on line 164 [opener:683;]: T_WHITESPACE => \n
	Process token 704 on line 165 [opener:683;]: T_WHITESPACE =>     
	Process token 705 on line 165 [opener:683;]: T_BREAK => break
	Process token 706 on line 165 [opener:683;]: T_SEMICOLON => ;
	Process token 707 on line 165 [opener:683;]: T_WHITESPACE => \n
	Process token 708 on line 166 [opener:683;]: T_WHITESPACE => \n
	Process token 709 on line 167 [opener:683;]: T_WHITESPACE =>     
	Process token 710 on line 167 [opener:683;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 710 with depth 1
	Process token 711 on line 167 []: T_COLON => :
	=> Found scope opener for 710:T_DEFAULT
	Process token 712 on line 167 [opener:711;]: T_WHITESPACE => \n
	Process token 713 on line 168 [opener:711;]: T_WHITESPACE =>         
	Process token 714 on line 168 [opener:711;]: T_COMMENT => // No default.\n
	Process token 715 on line 169 [opener:711;]: T_WHITESPACE =>     
	Process token 716 on line 169 [opener:711;]: T_BREAK => break
	=> Found scope closer (716:T_BREAK) for 710:T_DEFAULT
	Process token 712 on line 167 [opener:683;]: T_WHITESPACE => \n
	Process token 713 on line 168 [opener:683;]: T_WHITESPACE =>         
	Process token 714 on line 168 [opener:683;]: T_COMMENT => // No default.\n
	Process token 715 on line 169 [opener:683;]: T_WHITESPACE =>     
	Process token 716 on line 169 [opener:683;]: T_BREAK => break
	Process token 717 on line 169 [opener:683;]: T_SEMICOLON => ;
	Process token 718 on line 169 [opener:683;]: T_WHITESPACE => \n
	Process token 719 on line 170 [opener:683;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (719:T_CLOSE_CURLY_BRACKET) for 677:T_SWITCH
	Start scope map at 722:T_SWITCH => switch
	=> Begin scope map recursion at token 722 with depth 1
	Process token 723 on line 172 []: T_WHITESPACE =>  
	Process token 724 on line 172 []: T_OPEN_PARENTHESIS => (
	Process token 725 on line 172 []: T_STRING => name
	Process token 726 on line 172 []: T_CLOSE_PARENTHESIS => )
	Process token 727 on line 172 []: T_WHITESPACE =>  
	Process token 728 on line 172 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 722:T_SWITCH
	Process token 729 on line 172 [opener:728;]: T_WHITESPACE => \n
	Process token 730 on line 173 [opener:728;]: T_WHITESPACE =>     
	Process token 731 on line 173 [opener:728;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 731 with depth 1
	Process token 732 on line 173 []: T_WHITESPACE =>  
	Process token 733 on line 173 []: T_CONSTANT_ENCAPSED_STRING => "1"
	Process token 734 on line 173 []: T_COLON => :
	=> Found scope opener for 731:T_CASE
	Process token 735 on line 173 [opener:734;]: T_WHITESPACE => \n
	Process token 736 on line 174 [opener:734;]: T_WHITESPACE =>         
	Process token 737 on line 174 [opener:734;]: T_SWITCH => switch
	* token is an opening condition *
	* searching for opener *
		=> Begin scope map recursion at token 737 with depth 2
		Process token 738 on line 174 []: T_WHITESPACE =>  
		Process token 739 on line 174 []: T_OPEN_PARENTHESIS => (
		Process token 740 on line 174 []: T_STRING => name2
		Process token 741 on line 174 []: T_CLOSE_PARENTHESIS => )
		Process token 742 on line 174 []: T_WHITESPACE =>  
		Process token 743 on line 174 []: T_OPEN_CURLY_BRACKET => {
		=> Found scope opener for 737:T_SWITCH
		Process token 744 on line 174 [opener:743;]: T_WHITESPACE => \n
		Process token 745 on line 175 [opener:743;]: T_WHITESPACE =>             
		Process token 746 on line 175 [opener:743;]: T_CASE => case
		* token is an opening condition *
		* searching for opener *
		=> Begin scope map recursion at token 746 with depth 2
		Process token 747 on line 175 []: T_WHITESPACE =>  
		Process token 748 on line 175 []: T_CONSTANT_ENCAPSED_STRING => "1"
		Process token 749 on line 175 []: T_COLON => :
		=> Found scope opener for 746:T_CASE
		Process token 750 on line 175 [opener:749;]: T_WHITESPACE => \n
		Process token 751 on line 176 [opener:749;]: T_WHITESPACE =>                 
		Process token 752 on line 176 [opener:749;]: T_RETURN => return
		=> Found scope closer (752:T_RETURN) for 746:T_CASE
		Process token 750 on line 175 [opener:743;]: T_WHITESPACE => \n
		Process token 751 on line 176 [opener:743;]: T_WHITESPACE =>                 
		Process token 752 on line 176 [opener:743;]: T_RETURN => return
		Process token 753 on line 176 [opener:743;]: T_WHITESPACE =>  
		Process token 754 on line 176 [opener:743;]: T_TRUE => true
		Process token 755 on line 176 [opener:743;]: T_SEMICOLON => ;
		Process token 756 on line 176 [opener:743;]: T_WHITESPACE => \n
		Process token 757 on line 177 [opener:743;]: T_WHITESPACE =>             
		Process token 758 on line 177 [opener:743;]: T_BREAK => break
		Process token 759 on line 177 [opener:743;]: T_SEMICOLON => ;
		Process token 760 on line 177 [opener:743;]: T_WHITESPACE => \n
		Process token 761 on line 178 [opener:743;]: T_WHITESPACE => \n
		Process token 762 on line 179 [opener:743;]: T_WHITESPACE =>             
		Process token 763 on line 179 [opener:743;]: T_CASE => case
		* token is an opening condition *
		* searching for opener *
		=> Begin scope map recursion at token 763 with depth 2
		Process token 764 on line 179 []: T_WHITESPACE =>  
		Process token 765 on line 179 []: T_CONSTANT_ENCAPSED_STRING => "2"
		Process token 766 on line 179 []: T_COLON => :
		=> Found scope opener for 763:T_CASE
		Process token 767 on line 179 [opener:766;]: T_WHITESPACE => \n
		Process token 768 on line 180 [opener:766;]: T_WHITESPACE =>             
		Process token 769 on line 180 [opener:766;]: T_RETURN => return
		=> Found scope closer (769:T_RETURN) for 763:T_CASE
		Process token 767 on line 179 [opener:743;]: T_WHITESPACE => \n
		Process token 768 on line 180 [opener:743;]: T_WHITESPACE =>             
		Process token 769 on line 180 [opener:743;]: T_RETURN => return
		Process token 770 on line 180 [opener:743;]: T_WHITESPACE =>  
		Process token 771 on line 180 [opener:743;]: T_TRUE => true
		Process token 772 on line 180 [opener:743;]: T_SEMICOLON => ;
		Process token 773 on line 180 [opener:743;]: T_WHITESPACE => \n
		Process token 774 on line 181 [opener:743;]: T_WHITESPACE =>             
		Process token 775 on line 181 [opener:743;]: T_BREAK => break
		Process token 776 on line 181 [opener:743;]: T_SEMICOLON => ;
		Process token 777 on line 181 [opener:743;]: T_WHITESPACE => \n
		Process token 778 on line 182 [opener:743;]: T_WHITESPACE => \n
		Process token 779 on line 183 [opener:743;]: T_WHITESPACE =>             
		Process token 780 on line 183 [opener:743;]: T_DEFAULT => default
		* token is an opening condition *
		* searching for opener *
		=> Begin scope map recursion at token 780 with depth 2
		Process token 781 on line 183 []: T_COLON => :
		=> Found scope opener for 780:T_DEFAULT
		Process token 782 on line 183 [opener:781;]: T_WHITESPACE => \n
		Process token 783 on line 184 [opener:781;]: T_WHITESPACE =>                 
		Process token 784 on line 184 [opener:781;]: T_COMMENT => // No default.\n
		Process token 785 on line 185 [opener:781;]: T_WHITESPACE =>             
		Process token 786 on line 185 [opener:781;]: T_BREAK => break
		=> Found scope closer (786:T_BREAK) for 780:T_DEFAULT
		Process token 782 on line 183 [opener:743;]: T_WHITESPACE => \n
		Process token 783 on line 184 [opener:743;]: T_WHITESPACE =>                 
		Process token 784 on line 184 [opener:743;]: T_COMMENT => // No default.\n
		Process token 785 on line 185 [opener:743;]: T_WHITESPACE =>             
		Process token 786 on line 185 [opener:743;]: T_BREAK => break
		Process token 787 on line 185 [opener:743;]: T_SEMICOLON => ;
		Process token 788 on line 185 [opener:743;]: T_WHITESPACE => \n
		Process token 789 on line 186 [opener:743;]: T_WHITESPACE =>         
		Process token 790 on line 186 [opener:743;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer (790:T_CLOSE_CURLY_BRACKET) for 737:T_SWITCH
	Process token 791 on line 186 [opener:734;]: T_WHITESPACE => \n
	Process token 792 on line 187 [opener:734;]: T_WHITESPACE =>     
	Process token 793 on line 187 [opener:734;]: T_BREAK => break
	=> Found scope closer (793:T_BREAK) for 731:T_CASE
	Process token 735 on line 173 [opener:728;]: T_WHITESPACE => \n
	Process token 736 on line 174 [opener:728;]: T_WHITESPACE =>         
	Process token 737 on line 174 [opener:728;]: T_SWITCH => switch
	* token is an opening condition *
	* already processed, skipping *
	Process token 791 on line 186 [opener:728;]: T_WHITESPACE => \n
	Process token 792 on line 187 [opener:728;]: T_WHITESPACE =>     
	Process token 793 on line 187 [opener:728;]: T_BREAK => break
	Process token 794 on line 187 [opener:728;]: T_SEMICOLON => ;
	Process token 795 on line 187 [opener:728;]: T_WHITESPACE => \n
	Process token 796 on line 188 [opener:728;]: T_WHITESPACE => \n
	Process token 797 on line 189 [opener:728;]: T_WHITESPACE =>     
	Process token 798 on line 189 [opener:728;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 798 with depth 1
	Process token 799 on line 189 []: T_WHITESPACE =>  
	Process token 800 on line 189 []: T_CONSTANT_ENCAPSED_STRING => "2"
	Process token 801 on line 189 []: T_COLON => :
	=> Found scope opener for 798:T_CASE
	Process token 802 on line 189 [opener:801;]: T_WHITESPACE => \n
	Process token 803 on line 190 [opener:801;]: T_SWITCH => switch
	* token is an opening condition *
	* searching for opener *
		=> Begin scope map recursion at token 803 with depth 2
		Process token 804 on line 190 []: T_WHITESPACE =>  
		Process token 805 on line 190 []: T_OPEN_PARENTHESIS => (
		Process token 806 on line 190 []: T_STRING => name2
		Process token 807 on line 190 []: T_CLOSE_PARENTHESIS => )
		Process token 808 on line 190 []: T_WHITESPACE =>  
		Process token 809 on line 190 []: T_OPEN_CURLY_BRACKET => {
		=> Found scope opener for 803:T_SWITCH
		Process token 810 on line 190 [opener:809;]: T_WHITESPACE => \n
		Process token 811 on line 191 [opener:809;]: T_WHITESPACE =>     
		Process token 812 on line 191 [opener:809;]: T_CASE => case
		* token is an opening condition *
		* searching for opener *
		=> Begin scope map recursion at token 812 with depth 2
		Process token 813 on line 191 []: T_WHITESPACE =>  
		Process token 814 on line 191 []: T_CONSTANT_ENCAPSED_STRING => "1"
		Process token 815 on line 191 []: T_COLON => :
		=> Found scope opener for 812:T_CASE
		Process token 816 on line 191 [opener:815;]: T_WHITESPACE => \n
		Process token 817 on line 192 [opener:815;]: T_WHITESPACE =>         
		Process token 818 on line 192 [opener:815;]: T_RETURN => return
		=> Found scope closer (818:T_RETURN) for 812:T_CASE
		Process token 816 on line 191 [opener:809;]: T_WHITESPACE => \n
		Process token 817 on line 192 [opener:809;]: T_WHITESPACE =>         
		Process token 818 on line 192 [opener:809;]: T_RETURN => return
		Process token 819 on line 192 [opener:809;]: T_WHITESPACE =>  
		Process token 820 on line 192 [opener:809;]: T_TRUE => true
		Process token 821 on line 192 [opener:809;]: T_SEMICOLON => ;
		Process token 822 on line 192 [opener:809;]: T_WHITESPACE => \n
		Process token 823 on line 193 [opener:809;]: T_WHITESPACE =>     
		Process token 824 on line 193 [opener:809;]: T_BREAK => break
		Process token 825 on line 193 [opener:809;]: T_SEMICOLON => ;
		Process token 826 on line 193 [opener:809;]: T_WHITESPACE => \n
		Process token 827 on line 194 [opener:809;]: T_WHITESPACE => \n
		Process token 828 on line 195 [opener:809;]: T_WHITESPACE =>     
		Process token 829 on line 195 [opener:809;]: T_CASE => case
		* token is an opening condition *
		* searching for opener *
		=> Begin scope map recursion at token 829 with depth 2
		Process token 830 on line 195 []: T_WHITESPACE =>  
		Process token 831 on line 195 []: T_CONSTANT_ENCAPSED_STRING => "2"
		Process token 832 on line 195 []: T_COLON => :
		=> Found scope opener for 829:T_CASE
		Process token 833 on line 195 [opener:832;]: T_WHITESPACE => \n
		Process token 834 on line 196 [opener:832;]: T_WHITESPACE =>     
		Process token 835 on line 196 [opener:832;]: T_RETURN => return
		=> Found scope closer (835:T_RETURN) for 829:T_CASE
		Process token 833 on line 195 [opener:809;]: T_WHITESPACE => \n
		Process token 834 on line 196 [opener:809;]: T_WHITESPACE =>     
		Process token 835 on line 196 [opener:809;]: T_RETURN => return
		Process token 836 on line 196 [opener:809;]: T_WHITESPACE =>  
		Process token 837 on line 196 [opener:809;]: T_TRUE => true
		Process token 838 on line 196 [opener:809;]: T_SEMICOLON => ;
		Process token 839 on line 196 [opener:809;]: T_WHITESPACE => \n
		Process token 840 on line 197 [opener:809;]: T_WHITESPACE =>     
		Process token 841 on line 197 [opener:809;]: T_BREAK => break
		Process token 842 on line 197 [opener:809;]: T_SEMICOLON => ;
		Process token 843 on line 197 [opener:809;]: T_WHITESPACE => \n
		Process token 844 on line 198 [opener:809;]: T_WHITESPACE => \n
		Process token 845 on line 199 [opener:809;]: T_WHITESPACE =>     
		Process token 846 on line 199 [opener:809;]: T_DEFAULT => default
		* token is an opening condition *
		* searching for opener *
		=> Begin scope map recursion at token 846 with depth 2
		Process token 847 on line 199 []: T_COLON => :
		=> Found scope opener for 846:T_DEFAULT
		Process token 848 on line 199 [opener:847;]: T_WHITESPACE => \n
		Process token 849 on line 200 [opener:847;]: T_WHITESPACE =>         
		Process token 850 on line 200 [opener:847;]: T_COMMENT => // No default.\n
		Process token 851 on line 201 [opener:847;]: T_WHITESPACE =>     
		Process token 852 on line 201 [opener:847;]: T_BREAK => break
		=> Found scope closer (852:T_BREAK) for 846:T_DEFAULT
		Process token 848 on line 199 [opener:809;]: T_WHITESPACE => \n
		Process token 849 on line 200 [opener:809;]: T_WHITESPACE =>         
		Process token 850 on line 200 [opener:809;]: T_COMMENT => // No default.\n
		Process token 851 on line 201 [opener:809;]: T_WHITESPACE =>     
		Process token 852 on line 201 [opener:809;]: T_BREAK => break
		Process token 853 on line 201 [opener:809;]: T_SEMICOLON => ;
		Process token 854 on line 201 [opener:809;]: T_WHITESPACE => \n
		Process token 855 on line 202 [opener:809;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer (855:T_CLOSE_CURLY_BRACKET) for 803:T_SWITCH
	Process token 856 on line 202 [opener:801;]: T_WHITESPACE => \n
	Process token 857 on line 203 [opener:801;]: T_WHITESPACE =>     
	Process token 858 on line 203 [opener:801;]: T_BREAK => break
	=> Found scope closer (858:T_BREAK) for 798:T_CASE
	Process token 802 on line 189 [opener:728;]: T_WHITESPACE => \n
	Process token 803 on line 190 [opener:728;]: T_SWITCH => switch
	* token is an opening condition *
	* already processed, skipping *
	Process token 856 on line 202 [opener:728;]: T_WHITESPACE => \n
	Process token 857 on line 203 [opener:728;]: T_WHITESPACE =>     
	Process token 858 on line 203 [opener:728;]: T_BREAK => break
	Process token 859 on line 203 [opener:728;]: T_SEMICOLON => ;
	Process token 860 on line 203 [opener:728;]: T_WHITESPACE => \n
	Process token 861 on line 204 [opener:728;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (861:T_CLOSE_CURLY_BRACKET) for 722:T_SWITCH
	Start scope map at 864:T_SWITCH => switch
	=> Begin scope map recursion at token 864 with depth 1
	Process token 865 on line 206 []: T_WHITESPACE =>  
	Process token 866 on line 206 []: T_OPEN_PARENTHESIS => (
	Process token 867 on line 206 []: T_STRING => name
	Process token 868 on line 206 []: T_CLOSE_PARENTHESIS => )
	Process token 869 on line 206 []: T_WHITESPACE =>  
	Process token 870 on line 206 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 864:T_SWITCH
	Process token 871 on line 206 [opener:870;]: T_WHITESPACE => \n
	Process token 872 on line 207 [opener:870;]: T_WHITESPACE =>     
	Process token 873 on line 207 [opener:870;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 873 with depth 1
	Process token 874 on line 207 []: T_WHITESPACE =>  
	Process token 875 on line 207 []: T_CONSTANT_ENCAPSED_STRING => "1"
	Process token 876 on line 207 []: T_COLON => :
	=> Found scope opener for 873:T_CASE
	Process token 877 on line 207 [opener:876;]: T_WHITESPACE => \n
	Process token 878 on line 208 [opener:876;]: T_WHITESPACE =>         
	Process token 879 on line 208 [opener:876;]: T_SWITCH => switch
	* token is an opening condition *
	* searching for opener *
		=> Begin scope map recursion at token 879 with depth 2
		Process token 880 on line 208 []: T_WHITESPACE =>  
		Process token 881 on line 208 []: T_OPEN_PARENTHESIS => (
		Process token 882 on line 208 []: T_STRING => name2
		Process token 883 on line 208 []: T_CLOSE_PARENTHESIS => )
		Process token 884 on line 208 []: T_WHITESPACE =>  
		Process token 885 on line 208 []: T_OPEN_CURLY_BRACKET => {
		=> Found scope opener for 879:T_SWITCH
		Process token 886 on line 208 [opener:885;]: T_WHITESPACE => \n
		Process token 887 on line 209 [opener:885;]: T_WHITESPACE =>             
		Process token 888 on line 209 [opener:885;]: T_CASE => case
		* token is an opening condition *
		* searching for opener *
		=> Begin scope map recursion at token 888 with depth 2
		Process token 889 on line 209 []: T_WHITESPACE =>  
		Process token 890 on line 209 []: T_CONSTANT_ENCAPSED_STRING => "1"
		Process token 891 on line 209 []: T_COLON => :
		=> Found scope opener for 888:T_CASE
		Process token 892 on line 209 [opener:891;]: T_WHITESPACE => \n
		Process token 893 on line 210 [opener:891;]: T_WHITESPACE =>             
		Process token 894 on line 210 [opener:891;]: T_RETURN => return
		=> Found scope closer (894:T_RETURN) for 888:T_CASE
		Process token 892 on line 209 [opener:885;]: T_WHITESPACE => \n
		Process token 893 on line 210 [opener:885;]: T_WHITESPACE =>             
		Process token 894 on line 210 [opener:885;]: T_RETURN => return
		Process token 895 on line 210 [opener:885;]: T_WHITESPACE =>  
		Process token 896 on line 210 [opener:885;]: T_TRUE => true
		Process token 897 on line 210 [opener:885;]: T_SEMICOLON => ;
		Process token 898 on line 210 [opener:885;]: T_WHITESPACE => \n
		Process token 899 on line 211 [opener:885;]: T_WHITESPACE => \n
		Process token 900 on line 212 [opener:885;]: T_WHITESPACE =>             
		Process token 901 on line 212 [opener:885;]: T_DEFAULT => default
		* token is an opening condition *
		* searching for opener *
		=> Begin scope map recursion at token 901 with depth 2
		Process token 902 on line 212 []: T_COLON => :
		=> Found scope opener for 901:T_DEFAULT
		Process token 903 on line 212 [opener:902;]: T_WHITESPACE => \n
		Process token 904 on line 213 [opener:902;]: T_WHITESPACE =>                 
		Process token 905 on line 213 [opener:902;]: T_COMMENT => // No default.\n
		Process token 906 on line 214 [opener:902;]: T_WHITESPACE =>             
		Process token 907 on line 214 [opener:902;]: T_BREAK => break
		=> Found scope closer (907:T_BREAK) for 901:T_DEFAULT
		Process token 903 on line 212 [opener:885;]: T_WHITESPACE => \n
		Process token 904 on line 213 [opener:885;]: T_WHITESPACE =>                 
		Process token 905 on line 213 [opener:885;]: T_COMMENT => // No default.\n
		Process token 906 on line 214 [opener:885;]: T_WHITESPACE =>             
		Process token 907 on line 214 [opener:885;]: T_BREAK => break
		Process token 908 on line 214 [opener:885;]: T_SEMICOLON => ;
		Process token 909 on line 214 [opener:885;]: T_WHITESPACE => \n
		Process token 910 on line 215 [opener:885;]: T_WHITESPACE =>         
		Process token 911 on line 215 [opener:885;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer (911:T_CLOSE_CURLY_BRACKET) for 879:T_SWITCH
	Process token 912 on line 215 [opener:876;]: T_WHITESPACE => \n
	Process token 913 on line 216 [opener:876;]: T_WHITESPACE =>     
	Process token 914 on line 216 [opener:876;]: T_BREAK => break
	=> Found scope closer (914:T_BREAK) for 873:T_CASE
	Process token 877 on line 207 [opener:870;]: T_WHITESPACE => \n
	Process token 878 on line 208 [opener:870;]: T_WHITESPACE =>         
	Process token 879 on line 208 [opener:870;]: T_SWITCH => switch
	* token is an opening condition *
	* already processed, skipping *
	Process token 912 on line 215 [opener:870;]: T_WHITESPACE => \n
	Process token 913 on line 216 [opener:870;]: T_WHITESPACE =>     
	Process token 914 on line 216 [opener:870;]: T_BREAK => break
	Process token 915 on line 216 [opener:870;]: T_SEMICOLON => ;
	Process token 916 on line 216 [opener:870;]: T_WHITESPACE => \n
	Process token 917 on line 217 [opener:870;]: T_WHITESPACE => \n
	Process token 918 on line 218 [opener:870;]: T_WHITESPACE =>     
	Process token 919 on line 218 [opener:870;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 919 with depth 1
	Process token 920 on line 218 []: T_COLON => :
	=> Found scope opener for 919:T_DEFAULT
	Process token 921 on line 218 [opener:920;]: T_WHITESPACE => \n
	Process token 922 on line 219 [opener:920;]: T_WHITESPACE =>         
	Process token 923 on line 219 [opener:920;]: T_COMMENT => // No default.\n
	Process token 924 on line 220 [opener:920;]: T_WHITESPACE =>     
	Process token 925 on line 220 [opener:920;]: T_BREAK => break
	=> Found scope closer (925:T_BREAK) for 919:T_DEFAULT
	Process token 921 on line 218 [opener:870;]: T_WHITESPACE => \n
	Process token 922 on line 219 [opener:870;]: T_WHITESPACE =>         
	Process token 923 on line 219 [opener:870;]: T_COMMENT => // No default.\n
	Process token 924 on line 220 [opener:870;]: T_WHITESPACE =>     
	Process token 925 on line 220 [opener:870;]: T_BREAK => break
	Process token 926 on line 220 [opener:870;]: T_SEMICOLON => ;
	Process token 927 on line 220 [opener:870;]: T_WHITESPACE => \n
	Process token 928 on line 221 [opener:870;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (928:T_CLOSE_CURLY_BRACKET) for 864:T_SWITCH
	Start scope map at 931:T_SWITCH => switch
	=> Begin scope map recursion at token 931 with depth 1
	Process token 932 on line 223 []: T_WHITESPACE =>  
	Process token 933 on line 223 []: T_OPEN_PARENTHESIS => (
	Process token 934 on line 223 []: T_STRING => name2
	Process token 935 on line 223 []: T_CLOSE_PARENTHESIS => )
	Process token 936 on line 223 []: T_WHITESPACE =>  
	Process token 937 on line 223 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 931:T_SWITCH
	Process token 938 on line 223 [opener:937;]: T_WHITESPACE => \n
	Process token 939 on line 224 [opener:937;]: T_WHITESPACE =>     
	Process token 940 on line 224 [opener:937;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 940 with depth 1
	Process token 941 on line 224 []: T_COLON => :
	=> Found scope opener for 940:T_DEFAULT
	Process token 942 on line 224 [opener:941;]: T_WHITESPACE => \n
	Process token 943 on line 225 [opener:941;]: T_WHITESPACE =>         
	Process token 944 on line 225 [opener:941;]: T_COMMENT => // No default.\n
	Process token 945 on line 226 [opener:941;]: T_WHITESPACE =>     
	Process token 946 on line 226 [opener:941;]: T_BREAK => break
	=> Found scope closer (946:T_BREAK) for 940:T_DEFAULT
	Process token 942 on line 224 [opener:937;]: T_WHITESPACE => \n
	Process token 943 on line 225 [opener:937;]: T_WHITESPACE =>         
	Process token 944 on line 225 [opener:937;]: T_COMMENT => // No default.\n
	Process token 945 on line 226 [opener:937;]: T_WHITESPACE =>     
	Process token 946 on line 226 [opener:937;]: T_BREAK => break
	Process token 947 on line 226 [opener:937;]: T_SEMICOLON => ;
	Process token 948 on line 226 [opener:937;]: T_WHITESPACE => \n
	Process token 949 on line 227 [opener:937;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (949:T_CLOSE_CURLY_BRACKET) for 931:T_SWITCH
	Start scope map at 952:T_SWITCH => switch
	=> Begin scope map recursion at token 952 with depth 1
	Process token 953 on line 229 []: T_WHITESPACE =>  
	Process token 954 on line 229 []: T_OPEN_PARENTHESIS => (
	Process token 955 on line 229 []: T_STRING => foo
	Process token 956 on line 229 []: T_CLOSE_PARENTHESIS => )
	Process token 957 on line 229 []: T_WHITESPACE =>  
	Process token 958 on line 229 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 952:T_SWITCH
	Process token 959 on line 229 [opener:958;]: T_WHITESPACE => \n
	Process token 960 on line 230 [opener:958;]: T_WHITESPACE =>     
	Process token 961 on line 230 [opener:958;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 961 with depth 1
	Process token 962 on line 230 []: T_WHITESPACE =>  
	Process token 963 on line 230 []: T_CONSTANT_ENCAPSED_STRING => "1"
	Process token 964 on line 230 []: T_COLON => :
	=> Found scope opener for 961:T_CASE
	Process token 965 on line 230 [opener:964;]: T_WHITESPACE => \n
	Process token 966 on line 231 [opener:964;]: T_WHITESPACE =>     
	Process token 967 on line 231 [opener:964;]: T_RETURN => return
	=> Found scope closer (967:T_RETURN) for 961:T_CASE
	Process token 965 on line 230 [opener:958;]: T_WHITESPACE => \n
	Process token 966 on line 231 [opener:958;]: T_WHITESPACE =>     
	Process token 967 on line 231 [opener:958;]: T_RETURN => return
	Process token 968 on line 231 [opener:958;]: T_WHITESPACE =>  
	Process token 969 on line 231 [opener:958;]: T_TRUE => true
	Process token 970 on line 231 [opener:958;]: T_SEMICOLON => ;
	Process token 971 on line 231 [opener:958;]: T_WHITESPACE => \n
	Process token 972 on line 232 [opener:958;]: T_WHITESPACE => \n
	Process token 973 on line 233 [opener:958;]: T_WHITESPACE =>     
	Process token 974 on line 233 [opener:958;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 974 with depth 1
	Process token 975 on line 233 []: T_COLON => :
	=> Found scope opener for 974:T_DEFAULT
	Process token 976 on line 233 [opener:975;]: T_WHITESPACE => \n
	Process token 977 on line 234 [opener:975;]: T_WHITESPACE =>         
	Process token 978 on line 234 [opener:975;]: T_IF => if
	* token is an opening condition *
	* searching for opener *
		=> Begin scope map recursion at token 978 with depth 2
		Process token 979 on line 234 []: T_WHITESPACE =>  
		Process token 980 on line 234 []: T_OPEN_PARENTHESIS => (
		Process token 981 on line 234 []: T_STRING => foo
		Process token 982 on line 234 []: T_WHITESPACE =>  
		Process token 983 on line 234 []: T_IS_IDENTICAL => ===
		Process token 984 on line 234 []: T_WHITESPACE =>  
		Process token 985 on line 234 []: T_FALSE => false
		Process token 986 on line 234 []: T_CLOSE_PARENTHESIS => )
		Process token 987 on line 234 []: T_WHITESPACE =>  
		Process token 988 on line 234 []: T_OPEN_CURLY_BRACKET => {
		=> Found scope opener for 978:T_IF
		Process token 989 on line 234 [opener:988;]: T_WHITESPACE => \n
		Process token 990 on line 235 [opener:988;]: T_WHITESPACE =>             
		Process token 991 on line 235 [opener:988;]: T_BREAK => break
		Process token 992 on line 235 [opener:988;]: T_SEMICOLON => ;
		Process token 993 on line 235 [opener:988;]: T_WHITESPACE => \n
		Process token 994 on line 236 [opener:988;]: T_WHITESPACE =>         
		Process token 995 on line 236 [opener:988;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer (995:T_CLOSE_CURLY_BRACKET) for 978:T_IF
	Process token 996 on line 236 [opener:975;]: T_WHITESPACE => \n
	Process token 997 on line 237 [opener:975;]: T_WHITESPACE =>     
	Process token 998 on line 237 [opener:975;]: T_BREAK => break
	=> Found scope closer (998:T_BREAK) for 974:T_DEFAULT
	Process token 976 on line 233 [opener:958;]: T_WHITESPACE => \n
	Process token 977 on line 234 [opener:958;]: T_WHITESPACE =>         
	Process token 978 on line 234 [opener:958;]: T_IF => if
	* token is an opening condition *
	* already processed, skipping *
	Process token 996 on line 236 [opener:958;]: T_WHITESPACE => \n
	Process token 997 on line 237 [opener:958;]: T_WHITESPACE =>     
	Process token 998 on line 237 [opener:958;]: T_BREAK => break
	Process token 999 on line 237 [opener:958;]: T_SEMICOLON => ;
	Process token 1000 on line 237 [opener:958;]: T_WHITESPACE => \n
	Process token 1001 on line 238 [opener:958;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (1001:T_CLOSE_CURLY_BRACKET) for 952:T_SWITCH
	Start scope map at 1005:T_SWITCH => switch
	=> Begin scope map recursion at token 1005 with depth 1
	Process token 1006 on line 241 []: T_WHITESPACE =>  
	Process token 1007 on line 241 []: T_OPEN_PARENTHESIS => (
	Process token 1008 on line 241 []: T_STRING => something
	Process token 1009 on line 241 []: T_CLOSE_PARENTHESIS => )
	Process token 1010 on line 241 []: T_WHITESPACE =>  
	Process token 1011 on line 241 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 1005:T_SWITCH
	Process token 1012 on line 241 [opener:1011;]: T_WHITESPACE => \n
	Process token 1013 on line 242 [opener:1011;]: T_WHITESPACE =>     
	Process token 1014 on line 242 [opener:1011;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 1014 with depth 1
	Process token 1015 on line 242 []: T_WHITESPACE =>  
	Process token 1016 on line 242 []: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1017 on line 242 []: T_COLON => :
	=> Found scope opener for 1014:T_CASE
	Process token 1018 on line 242 [opener:1017;]: T_WHITESPACE => \n
	Process token 1019 on line 243 [opener:1017;]: T_WHITESPACE =>         
	Process token 1020 on line 243 [opener:1017;]: T_STRING => myvar
	Process token 1021 on line 243 [opener:1017;]: T_WHITESPACE =>  
	Process token 1022 on line 243 [opener:1017;]: T_EQUAL => =
	Process token 1023 on line 243 [opener:1017;]: T_WHITESPACE =>  
	Process token 1024 on line 243 [opener:1017;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1025 on line 243 [opener:1017;]: T_SEMICOLON => ;
	Process token 1026 on line 243 [opener:1017;]: T_WHITESPACE => \n
	Process token 1027 on line 244 [opener:1017;]: T_WHITESPACE =>     
	Process token 1028 on line 244 [opener:1017;]: T_RETURN => return
	=> Found scope closer (1028:T_RETURN) for 1014:T_CASE
	Process token 1018 on line 242 [opener:1011;]: T_WHITESPACE => \n
	Process token 1019 on line 243 [opener:1011;]: T_WHITESPACE =>         
	Process token 1020 on line 243 [opener:1011;]: T_STRING => myvar
	Process token 1021 on line 243 [opener:1011;]: T_WHITESPACE =>  
	Process token 1022 on line 243 [opener:1011;]: T_EQUAL => =
	Process token 1023 on line 243 [opener:1011;]: T_WHITESPACE =>  
	Process token 1024 on line 243 [opener:1011;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1025 on line 243 [opener:1011;]: T_SEMICOLON => ;
	Process token 1026 on line 243 [opener:1011;]: T_WHITESPACE => \n
	Process token 1027 on line 244 [opener:1011;]: T_WHITESPACE =>     
	Process token 1028 on line 244 [opener:1011;]: T_RETURN => return
	Process token 1029 on line 244 [opener:1011;]: T_WHITESPACE =>  
	Process token 1030 on line 244 [opener:1011;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1031 on line 244 [opener:1011;]: T_SEMICOLON => ;
	Process token 1032 on line 244 [opener:1011;]: T_WHITESPACE => \n
	Process token 1033 on line 245 [opener:1011;]: T_WHITESPACE => \n
	Process token 1034 on line 246 [opener:1011;]: T_WHITESPACE =>     
	Process token 1035 on line 246 [opener:1011;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 1035 with depth 1
	Process token 1036 on line 246 []: T_WHITESPACE =>  
	Process token 1037 on line 246 []: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 1038 on line 246 []: T_COLON => :
	=> Found scope opener for 1035:T_CASE
	Process token 1039 on line 246 [opener:1038;]: T_WHITESPACE => \n
	Process token 1040 on line 247 [opener:1038;]: T_WHITESPACE =>     
	Process token 1041 on line 247 [opener:1038;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 1041 with depth 1
	Process token 1042 on line 247 []: T_WHITESPACE =>  
	Process token 1043 on line 247 []: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 1044 on line 247 []: T_COLON => :
	=> Found scope opener for 1041:T_CASE
	Process token 1045 on line 247 [opener:1044;]: T_WHITESPACE => \n
	Process token 1046 on line 248 [opener:1044;]: T_WHITESPACE =>         
	Process token 1047 on line 248 [opener:1044;]: T_STRING => myvar
	Process token 1048 on line 248 [opener:1044;]: T_WHITESPACE =>  
	Process token 1049 on line 248 [opener:1044;]: T_EQUAL => =
	Process token 1050 on line 248 [opener:1044;]: T_WHITESPACE =>  
	Process token 1051 on line 248 [opener:1044;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 1052 on line 248 [opener:1044;]: T_SEMICOLON => ;
	Process token 1053 on line 248 [opener:1044;]: T_WHITESPACE => \n
	Process token 1054 on line 249 [opener:1044;]: T_WHITESPACE =>     
	Process token 1055 on line 249 [opener:1044;]: T_RETURN => return
	=> Found scope closer (1055:T_RETURN) for 1041:T_CASE
	Process token 1045 on line 247 [opener:1038;]: T_WHITESPACE => \n
	Process token 1046 on line 248 [opener:1038;]: T_WHITESPACE =>         
	Process token 1047 on line 248 [opener:1038;]: T_STRING => myvar
	Process token 1048 on line 248 [opener:1038;]: T_WHITESPACE =>  
	Process token 1049 on line 248 [opener:1038;]: T_EQUAL => =
	Process token 1050 on line 248 [opener:1038;]: T_WHITESPACE =>  
	Process token 1051 on line 248 [opener:1038;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 1052 on line 248 [opener:1038;]: T_SEMICOLON => ;
	Process token 1053 on line 248 [opener:1038;]: T_WHITESPACE => \n
	Process token 1054 on line 249 [opener:1038;]: T_WHITESPACE =>     
	Process token 1055 on line 249 [opener:1038;]: T_RETURN => return
	=> Found scope closer (1055:T_RETURN) for 1035:T_CASE
	Process token 1039 on line 246 [opener:1011;]: T_WHITESPACE => \n
	Process token 1040 on line 247 [opener:1011;]: T_WHITESPACE =>     
	Process token 1041 on line 247 [opener:1011;]: T_CASE => case
	* token is an opening condition *
	* already processed, skipping *
	Process token 1042 on line 247 [opener:1011;]: T_WHITESPACE =>  
	Process token 1043 on line 247 [opener:1011;]: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 1044 on line 247 [opener:1011;]: T_COLON => :
	Process token 1045 on line 247 [opener:1011;]: T_WHITESPACE => \n
	Process token 1046 on line 248 [opener:1011;]: T_WHITESPACE =>         
	Process token 1047 on line 248 [opener:1011;]: T_STRING => myvar
	Process token 1048 on line 248 [opener:1011;]: T_WHITESPACE =>  
	Process token 1049 on line 248 [opener:1011;]: T_EQUAL => =
	Process token 1050 on line 248 [opener:1011;]: T_WHITESPACE =>  
	Process token 1051 on line 248 [opener:1011;]: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 1052 on line 248 [opener:1011;]: T_SEMICOLON => ;
	Process token 1053 on line 248 [opener:1011;]: T_WHITESPACE => \n
	Process token 1054 on line 249 [opener:1011;]: T_WHITESPACE =>     
	Process token 1055 on line 249 [opener:1011;]: T_RETURN => return
	Process token 1056 on line 249 [opener:1011;]: T_WHITESPACE =>  
	Process token 1057 on line 249 [opener:1011;]: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 1058 on line 249 [opener:1011;]: T_SEMICOLON => ;
	Process token 1059 on line 249 [opener:1011;]: T_WHITESPACE => \n
	Process token 1060 on line 250 [opener:1011;]: T_WHITESPACE => \n
	Process token 1061 on line 251 [opener:1011;]: T_WHITESPACE =>     
	Process token 1062 on line 251 [opener:1011;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 1062 with depth 1
	Process token 1063 on line 251 []: T_WHITESPACE =>  
	Process token 1064 on line 251 []: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 1065 on line 251 []: T_COLON => :
	=> Found scope opener for 1062:T_CASE
	Process token 1066 on line 251 [opener:1065;]: T_WHITESPACE => \n
	Process token 1067 on line 252 [opener:1065;]: T_WHITESPACE =>         
	Process token 1068 on line 252 [opener:1065;]: T_STRING => myvar
	Process token 1069 on line 252 [opener:1065;]: T_WHITESPACE =>  
	Process token 1070 on line 252 [opener:1065;]: T_EQUAL => =
	Process token 1071 on line 252 [opener:1065;]: T_WHITESPACE =>  
	Process token 1072 on line 252 [opener:1065;]: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 1073 on line 252 [opener:1065;]: T_SEMICOLON => ;
	Process token 1074 on line 252 [opener:1065;]: T_WHITESPACE => \n
	Process token 1075 on line 253 [opener:1065;]: T_WHITESPACE =>     
	Process token 1076 on line 253 [opener:1065;]: T_RETURN => return
	=> Found scope closer (1076:T_RETURN) for 1062:T_CASE
	Process token 1066 on line 251 [opener:1011;]: T_WHITESPACE => \n
	Process token 1067 on line 252 [opener:1011;]: T_WHITESPACE =>         
	Process token 1068 on line 252 [opener:1011;]: T_STRING => myvar
	Process token 1069 on line 252 [opener:1011;]: T_WHITESPACE =>  
	Process token 1070 on line 252 [opener:1011;]: T_EQUAL => =
	Process token 1071 on line 252 [opener:1011;]: T_WHITESPACE =>  
	Process token 1072 on line 252 [opener:1011;]: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 1073 on line 252 [opener:1011;]: T_SEMICOLON => ;
	Process token 1074 on line 252 [opener:1011;]: T_WHITESPACE => \n
	Process token 1075 on line 253 [opener:1011;]: T_WHITESPACE =>     
	Process token 1076 on line 253 [opener:1011;]: T_RETURN => return
	Process token 1077 on line 253 [opener:1011;]: T_WHITESPACE =>  
	Process token 1078 on line 253 [opener:1011;]: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 1079 on line 253 [opener:1011;]: T_SEMICOLON => ;
	Process token 1080 on line 253 [opener:1011;]: T_WHITESPACE => \n
	Process token 1081 on line 254 [opener:1011;]: T_WHITESPACE => \n
	Process token 1082 on line 255 [opener:1011;]: T_WHITESPACE =>     
	Process token 1083 on line 255 [opener:1011;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 1083 with depth 1
	Process token 1084 on line 255 []: T_COLON => :
	=> Found scope opener for 1083:T_DEFAULT
	Process token 1085 on line 255 [opener:1084;]: T_WHITESPACE => \n
	Process token 1086 on line 256 [opener:1084;]: T_WHITESPACE =>         
	Process token 1087 on line 256 [opener:1084;]: T_STRING => myvar
	Process token 1088 on line 256 [opener:1084;]: T_WHITESPACE =>  
	Process token 1089 on line 256 [opener:1084;]: T_EQUAL => =
	Process token 1090 on line 256 [opener:1084;]: T_WHITESPACE =>  
	Process token 1091 on line 256 [opener:1084;]: T_NULL => null
	Process token 1092 on line 256 [opener:1084;]: T_SEMICOLON => ;
	Process token 1093 on line 256 [opener:1084;]: T_WHITESPACE => \n
	Process token 1094 on line 257 [opener:1084;]: T_WHITESPACE =>     
	Process token 1095 on line 257 [opener:1084;]: T_RETURN => return
	=> Found scope closer (1095:T_RETURN) for 1083:T_DEFAULT
	Process token 1085 on line 255 [opener:1011;]: T_WHITESPACE => \n
	Process token 1086 on line 256 [opener:1011;]: T_WHITESPACE =>         
	Process token 1087 on line 256 [opener:1011;]: T_STRING => myvar
	Process token 1088 on line 256 [opener:1011;]: T_WHITESPACE =>  
	Process token 1089 on line 256 [opener:1011;]: T_EQUAL => =
	Process token 1090 on line 256 [opener:1011;]: T_WHITESPACE =>  
	Process token 1091 on line 256 [opener:1011;]: T_NULL => null
	Process token 1092 on line 256 [opener:1011;]: T_SEMICOLON => ;
	Process token 1093 on line 256 [opener:1011;]: T_WHITESPACE => \n
	Process token 1094 on line 257 [opener:1011;]: T_WHITESPACE =>     
	Process token 1095 on line 257 [opener:1011;]: T_RETURN => return
	Process token 1096 on line 257 [opener:1011;]: T_WHITESPACE =>  
	Process token 1097 on line 257 [opener:1011;]: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 1098 on line 257 [opener:1011;]: T_SEMICOLON => ;
	Process token 1099 on line 257 [opener:1011;]: T_WHITESPACE => \n
	Process token 1100 on line 258 [opener:1011;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (1100:T_CLOSE_CURLY_BRACKET) for 1005:T_SWITCH
	Start scope map at 1103:T_SWITCH => switch
	=> Begin scope map recursion at token 1103 with depth 1
	Process token 1104 on line 260 []: T_WHITESPACE =>  
	Process token 1105 on line 260 []: T_OPEN_PARENTHESIS => (
	Process token 1106 on line 260 []: T_STRING => something
	Process token 1107 on line 260 []: T_CLOSE_PARENTHESIS => )
	Process token 1108 on line 260 []: T_WHITESPACE =>  
	Process token 1109 on line 260 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 1103:T_SWITCH
	Process token 1110 on line 260 [opener:1109;]: T_WHITESPACE => \n
	Process token 1111 on line 261 [opener:1109;]: T_WHITESPACE =>     
	Process token 1112 on line 261 [opener:1109;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 1112 with depth 1
	Process token 1113 on line 261 []: T_WHITESPACE =>  
	Process token 1114 on line 261 []: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1115 on line 261 []: T_COLON => :
	=> Found scope opener for 1112:T_CASE
	Process token 1116 on line 261 [opener:1115;]: T_WHITESPACE => \n
	Process token 1117 on line 262 [opener:1115;]: T_WHITESPACE =>         
	Process token 1118 on line 262 [opener:1115;]: T_STRING => myvar
	Process token 1119 on line 262 [opener:1115;]: T_WHITESPACE =>  
	Process token 1120 on line 262 [opener:1115;]: T_EQUAL => =
	Process token 1121 on line 262 [opener:1115;]: T_WHITESPACE =>  
	Process token 1122 on line 262 [opener:1115;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1123 on line 262 [opener:1115;]: T_SEMICOLON => ;
	Process token 1124 on line 262 [opener:1115;]: T_WHITESPACE => \n
	Process token 1125 on line 263 [opener:1115;]: T_WHITESPACE =>     
	Process token 1126 on line 263 [opener:1115;]: T_BREAK => break
	=> Found scope closer (1126:T_BREAK) for 1112:T_CASE
	Process token 1116 on line 261 [opener:1109;]: T_WHITESPACE => \n
	Process token 1117 on line 262 [opener:1109;]: T_WHITESPACE =>         
	Process token 1118 on line 262 [opener:1109;]: T_STRING => myvar
	Process token 1119 on line 262 [opener:1109;]: T_WHITESPACE =>  
	Process token 1120 on line 262 [opener:1109;]: T_EQUAL => =
	Process token 1121 on line 262 [opener:1109;]: T_WHITESPACE =>  
	Process token 1122 on line 262 [opener:1109;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1123 on line 262 [opener:1109;]: T_SEMICOLON => ;
	Process token 1124 on line 262 [opener:1109;]: T_WHITESPACE => \n
	Process token 1125 on line 263 [opener:1109;]: T_WHITESPACE =>     
	Process token 1126 on line 263 [opener:1109;]: T_BREAK => break
	Process token 1127 on line 263 [opener:1109;]: T_SEMICOLON => ;
	Process token 1128 on line 263 [opener:1109;]: T_WHITESPACE => \n
	Process token 1129 on line 264 [opener:1109;]: T_WHITESPACE => \n
	Process token 1130 on line 265 [opener:1109;]: T_WHITESPACE =>     
	Process token 1131 on line 265 [opener:1109;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 1131 with depth 1
	Process token 1132 on line 265 []: T_WHITESPACE =>  
	Process token 1133 on line 265 []: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 1134 on line 265 []: T_COLON => :
	=> Found scope opener for 1131:T_CASE
	Process token 1135 on line 265 [opener:1134;]: T_WHITESPACE => \n
	Process token 1136 on line 266 [opener:1134;]: T_WHITESPACE =>         
	Process token 1137 on line 266 [opener:1134;]: T_THROW => throw
	=> Found scope closer (1137:T_THROW) for 1131:T_CASE
	Process token 1135 on line 265 [opener:1109;]: T_WHITESPACE => \n
	Process token 1136 on line 266 [opener:1109;]: T_WHITESPACE =>         
	Process token 1137 on line 266 [opener:1109;]: T_THROW => throw
	Process token 1138 on line 266 [opener:1109;]: T_WHITESPACE =>  
	Process token 1139 on line 266 [opener:1109;]: T_CONSTANT_ENCAPSED_STRING => 'message'
	Process token 1140 on line 266 [opener:1109;]: T_SEMICOLON => ;
	Process token 1141 on line 266 [opener:1109;]: T_WHITESPACE => \n
	Process token 1142 on line 267 [opener:1109;]: T_WHITESPACE => \n
	Process token 1143 on line 268 [opener:1109;]: T_WHITESPACE =>     
	Process token 1144 on line 268 [opener:1109;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 1144 with depth 1
	Process token 1145 on line 268 []: T_COLON => :
	=> Found scope opener for 1144:T_DEFAULT
	Process token 1146 on line 268 [opener:1145;]: T_WHITESPACE => \n
	Process token 1147 on line 269 [opener:1145;]: T_WHITESPACE =>     
	Process token 1148 on line 269 [opener:1145;]: T_THROW => throw
	=> Found scope closer (1148:T_THROW) for 1144:T_DEFAULT
	Process token 1146 on line 268 [opener:1109;]: T_WHITESPACE => \n
	Process token 1147 on line 269 [opener:1109;]: T_WHITESPACE =>     
	Process token 1148 on line 269 [opener:1109;]: T_THROW => throw
	Process token 1149 on line 269 [opener:1109;]: T_WHITESPACE =>  
	Process token 1150 on line 269 [opener:1109;]: T_CONSTANT_ENCAPSED_STRING => 'message'
	Process token 1151 on line 269 [opener:1109;]: T_SEMICOLON => ;
	Process token 1152 on line 269 [opener:1109;]: T_WHITESPACE => \n
	Process token 1153 on line 270 [opener:1109;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (1153:T_CLOSE_CURLY_BRACKET) for 1103:T_SWITCH
	Start scope map at 1156:T_SWITCH => switch
	=> Begin scope map recursion at token 1156 with depth 1
	Process token 1157 on line 272 []: T_WHITESPACE =>  
	Process token 1158 on line 272 []: T_OPEN_PARENTHESIS => (
	Process token 1159 on line 272 []: T_STRING => something
	Process token 1160 on line 272 []: T_CLOSE_PARENTHESIS => )
	Process token 1161 on line 272 []: T_WHITESPACE =>  
	Process token 1162 on line 272 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 1156:T_SWITCH
	Process token 1163 on line 272 [opener:1162;]: T_WHITESPACE => \n
	Process token 1164 on line 273 [opener:1162;]: T_WHITESPACE =>     
	Process token 1165 on line 273 [opener:1162;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 1165 with depth 1
	Process token 1166 on line 273 []: T_WHITESPACE =>  
	Process token 1167 on line 273 []: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1168 on line 273 []: T_SEMICOLON => ;
	Process token 1169 on line 273 []: T_WHITESPACE => \n
	Process token 1170 on line 274 []: T_WHITESPACE =>         
	Process token 1171 on line 274 []: T_STRING => print
	Process token 1172 on line 274 []: T_OPEN_PARENTHESIS => (
	Process token 1173 on line 274 []: T_CONSTANT_ENCAPSED_STRING => 'one'
	Process token 1174 on line 274 []: T_CLOSE_PARENTHESIS => )
	Process token 1175 on line 274 []: T_SEMICOLON => ;
	Process token 1176 on line 274 []: T_WHITESPACE => \n
	Process token 1177 on line 275 []: T_WHITESPACE =>     
	Process token 1178 on line 275 []: T_BREAK => break
	Process token 1179 on line 275 []: T_SEMICOLON => ;
	Process token 1180 on line 275 []: T_WHITESPACE => \n
	Process token 1181 on line 276 []: T_WHITESPACE => \n
	Process token 1182 on line 277 []: T_WHITESPACE =>     
	Process token 1183 on line 277 []: T_DEFAULT => default
	=> Found new opening condition before scope opener for 1165:T_CASE, backtracking
	Process token 1166 on line 273 [opener:1162;]: T_WHITESPACE =>  
	Process token 1167 on line 273 [opener:1162;]: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1168 on line 273 [opener:1162;]: T_SEMICOLON => ;
	Process token 1169 on line 273 [opener:1162;]: T_WHITESPACE => \n
	Process token 1170 on line 274 [opener:1162;]: T_WHITESPACE =>         
	Process token 1171 on line 274 [opener:1162;]: T_STRING => print
	Process token 1172 on line 274 [opener:1162;]: T_OPEN_PARENTHESIS => (
	Process token 1173 on line 274 [opener:1162;]: T_CONSTANT_ENCAPSED_STRING => 'one'
	Process token 1174 on line 274 [opener:1162;]: T_CLOSE_PARENTHESIS => )
	Process token 1175 on line 274 [opener:1162;]: T_SEMICOLON => ;
	Process token 1176 on line 274 [opener:1162;]: T_WHITESPACE => \n
	Process token 1177 on line 275 [opener:1162;]: T_WHITESPACE =>     
	Process token 1178 on line 275 [opener:1162;]: T_BREAK => break
	Process token 1179 on line 275 [opener:1162;]: T_SEMICOLON => ;
	Process token 1180 on line 275 [opener:1162;]: T_WHITESPACE => \n
	Process token 1181 on line 276 [opener:1162;]: T_WHITESPACE => \n
	Process token 1182 on line 277 [opener:1162;]: T_WHITESPACE =>     
	Process token 1183 on line 277 [opener:1162;]: T_DEFAULT => default
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 1183 with depth 1
	Process token 1184 on line 277 []: T_COLON => :
	=> Found scope opener for 1183:T_DEFAULT
	Process token 1185 on line 277 [opener:1184;]: T_WHITESPACE => \n
	Process token 1186 on line 278 [opener:1184;]: T_WHITESPACE =>         
	Process token 1187 on line 278 [opener:1184;]: T_STRING => print
	Process token 1188 on line 278 [opener:1184;]: T_OPEN_PARENTHESIS => (
	Process token 1189 on line 278 [opener:1184;]: T_CONSTANT_ENCAPSED_STRING => 'default'
	Process token 1190 on line 278 [opener:1184;]: T_CLOSE_PARENTHESIS => )
	Process token 1191 on line 278 [opener:1184;]: T_SEMICOLON => ;
	Process token 1192 on line 278 [opener:1184;]: T_WHITESPACE => \n
	Process token 1193 on line 279 [opener:1184;]: T_WHITESPACE =>     
	Process token 1194 on line 279 [opener:1184;]: T_RETURN => return
	=> Found scope closer (1194:T_RETURN) for 1183:T_DEFAULT
	Process token 1185 on line 277 [opener:1162;]: T_WHITESPACE => \n
	Process token 1186 on line 278 [opener:1162;]: T_WHITESPACE =>         
	Process token 1187 on line 278 [opener:1162;]: T_STRING => print
	Process token 1188 on line 278 [opener:1162;]: T_OPEN_PARENTHESIS => (
	Process token 1189 on line 278 [opener:1162;]: T_CONSTANT_ENCAPSED_STRING => 'default'
	Process token 1190 on line 278 [opener:1162;]: T_CLOSE_PARENTHESIS => )
	Process token 1191 on line 278 [opener:1162;]: T_SEMICOLON => ;
	Process token 1192 on line 278 [opener:1162;]: T_WHITESPACE => \n
	Process token 1193 on line 279 [opener:1162;]: T_WHITESPACE =>     
	Process token 1194 on line 279 [opener:1162;]: T_RETURN => return
	Process token 1195 on line 279 [opener:1162;]: T_SEMICOLON => ;
	Process token 1196 on line 279 [opener:1162;]: T_WHITESPACE => \n
	Process token 1197 on line 280 [opener:1162;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (1197:T_CLOSE_CURLY_BRACKET) for 1156:T_SWITCH
	Start scope map at 1200:T_SWITCH => switch
	=> Begin scope map recursion at token 1200 with depth 1
	Process token 1201 on line 282 []: T_WHITESPACE =>  
	Process token 1202 on line 282 []: T_OPEN_PARENTHESIS => (
	Process token 1203 on line 282 []: T_STRING => foo
	Process token 1204 on line 282 []: T_CLOSE_PARENTHESIS => )
	Process token 1205 on line 282 []: T_WHITESPACE =>  
	Process token 1206 on line 282 []: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 1200:T_SWITCH
	Process token 1207 on line 282 [opener:1206;]: T_WHITESPACE => \n
	Process token 1208 on line 283 [opener:1206;]: T_WHITESPACE =>     
	Process token 1209 on line 283 [opener:1206;]: T_CASE => case
	* token is an opening condition *
	* searching for opener *
	=> Begin scope map recursion at token 1209 with depth 1
	Process token 1210 on line 283 []: T_WHITESPACE =>  
	Process token 1211 on line 283 []: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1212 on line 283 []: T_COLON => :
	=> Found scope opener for 1209:T_CASE
	Process token 1213 on line 283 [opener:1212;]: T_WHITESPACE => \n
	Process token 1214 on line 284 [opener:1212;]: T_WHITESPACE =>         
	Process token 1215 on line 284 [opener:1212;]: T_RETURN => return
	=> Found scope closer (1215:T_RETURN) for 1209:T_CASE
	Process token 1213 on line 283 [opener:1206;]: T_WHITESPACE => \n
	Process token 1214 on line 284 [opener:1206;]: T_WHITESPACE =>         
	Process token 1215 on line 284 [opener:1206;]: T_RETURN => return
	Process token 1216 on line 284 [opener:1206;]: T_SEMICOLON => ;
	Process token 1217 on line 284 [opener:1206;]: T_WHITESPACE =>  
	Process token 1218 on line 284 [opener:1206;]: T_COMMENT => // comment\n
	Process token 1219 on line 285 [opener:1206;]: T_WHITESPACE =>     
	Process token 1220 on line 285 [opener:1206;]: T_BREAK => break
	Process token 1221 on line 285 [opener:1206;]: T_SEMICOLON => ;
	Process token 1222 on line 285 [opener:1206;]: T_WHITESPACE => \n
	Process token 1223 on line 286 [opener:1206;]: T_WHITESPACE => \n
	Process token 1224 on line 287 [opener:1206;]: T_CLOSE_CURLY_BRACKET => }
	=> Found scope closer (1224:T_CLOSE_CURLY_BRACKET) for 1200:T_SWITCH
	*** END SCOPE MAP ***
	*** START LEVEL MAP ***
	Process token 0 on line 1 [col:1;len:0;lvl:0;]: T_OPEN_TAG => 
	Process token 1 on line 1 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 2 on line 2 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 3 on line 3 [col:1;len:26;lvl:0;]: T_COMMENT => // Valid SWITCH statement.\n
	Process token 4 on line 4 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 5 on line 4 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 6 on line 4 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 7 on line 4 [col:9;len:9;lvl:0;]: T_STRING => something
	Process token 8 on line 4 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 9 on line 4 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 10 on line 4 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 4:T_SWITCH
		* level increased *
		* token 4:T_SWITCH added to conditions array *
		Process token 11 on line 4 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 12 on line 5 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 13 on line 5 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 14 on line 5 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 15 on line 5 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '1'
		Process token 16 on line 5 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 13:T_CASE
			* level increased *
			* token 13:T_CASE added to conditions array *
			Process token 17 on line 5 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 18 on line 6 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 19 on line 6 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 20 on line 6 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 21 on line 6 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 22 on line 6 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 23 on line 6 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '1'
			Process token 24 on line 6 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 25 on line 6 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 26 on line 7 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 27 on line 7 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 16:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 28 on line 7 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 29 on line 7 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 30 on line 8 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 31 on line 9 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 32 on line 9 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 33 on line 9 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 34 on line 9 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '2'
		Process token 35 on line 9 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 32:T_CASE
			* level increased *
			* token 32:T_CASE added to conditions array *
			Process token 36 on line 9 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 37 on line 10 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 38 on line 10 [col:5;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_CASE => case
			Process token 39 on line 10 [col:9;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 40 on line 10 [col:10;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '3'
			Process token 41 on line 10 [col:13;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 38:T_CASE
			* shared closer, cleaning up 32:T_CASE *
			* cleaned 38:T_CASE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 39:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 40:T_CONSTANT_ENCAPSED_STRING *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 41:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 32:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 38:T_CASE added to conditions array *
			Process token 42 on line 10 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 43 on line 11 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 44 on line 11 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 45 on line 11 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 46 on line 11 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 47 on line 11 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 48 on line 11 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '5'
			Process token 49 on line 11 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 50 on line 11 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 51 on line 12 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 52 on line 12 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 41:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 53 on line 12 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 54 on line 12 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 55 on line 13 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 56 on line 14 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 57 on line 14 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 58 on line 14 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 59 on line 14 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '4'
		Process token 60 on line 14 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 57:T_CASE
			* level increased *
			* token 57:T_CASE added to conditions array *
			Process token 61 on line 14 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 62 on line 15 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 63 on line 15 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 64 on line 15 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 65 on line 15 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 66 on line 15 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 67 on line 15 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '4'
			Process token 68 on line 15 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 69 on line 15 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 70 on line 16 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 71 on line 16 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 60:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 72 on line 16 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 73 on line 16 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 74 on line 17 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 75 on line 18 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 76 on line 18 [col:5;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 77 on line 18 [col:12;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 76:T_DEFAULT
			* level increased *
			* token 76:T_DEFAULT added to conditions array *
			Process token 78 on line 18 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 79 on line 19 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 80 on line 19 [col:9;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_STRING => myvar
			Process token 81 on line 19 [col:14;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 82 on line 19 [col:15;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_EQUAL => =
			Process token 83 on line 19 [col:16;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 84 on line 19 [col:17;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_NULL => null
			Process token 85 on line 19 [col:21;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_SEMICOLON => ;
			Process token 86 on line 19 [col:22;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 87 on line 20 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 88 on line 20 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_BREAK => break
			=> Found scope closer for 77:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 89 on line 20 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 90 on line 20 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 91 on line 21 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 10:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 92 on line 21 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 93 on line 22 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 94 on line 23 [col:1;len:19;lvl:0;]: T_COMMENT => // Alignment wrong.\n
	Process token 95 on line 24 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 96 on line 24 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 97 on line 24 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 98 on line 24 [col:9;len:9;lvl:0;]: T_STRING => something
	Process token 99 on line 24 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 100 on line 24 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 101 on line 24 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 95:T_SWITCH
		* level increased *
		* token 95:T_SWITCH added to conditions array *
		Process token 102 on line 24 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 103 on line 25 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 104 on line 25 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 105 on line 25 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 106 on line 25 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '1'
		Process token 107 on line 25 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 104:T_CASE
			* level increased *
			* token 104:T_CASE added to conditions array *
			Process token 108 on line 25 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 109 on line 26 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 110 on line 26 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 111 on line 26 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 112 on line 26 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 113 on line 26 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 114 on line 26 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '1'
			Process token 115 on line 26 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 116 on line 26 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 117 on line 27 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 118 on line 27 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 107:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 119 on line 27 [col:14;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 120 on line 27 [col:15;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 121 on line 28 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 122 on line 29 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 123 on line 29 [col:5;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 124 on line 29 [col:6;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '2'
		Process token 125 on line 29 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 122:T_CASE
			* level increased *
			* token 122:T_CASE added to conditions array *
			Process token 126 on line 29 [col:10;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 127 on line 30 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 128 on line 30 [col:5;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_CASE => case
			Process token 129 on line 30 [col:9;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 130 on line 30 [col:10;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '3'
			Process token 131 on line 30 [col:13;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 128:T_CASE
			* shared closer, cleaning up 122:T_CASE *
			* cleaned 128:T_CASE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 129:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 130:T_CONSTANT_ENCAPSED_STRING *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 131:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 122:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 128:T_CASE added to conditions array *
			Process token 132 on line 30 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 133 on line 31 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 134 on line 31 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 135 on line 31 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 136 on line 31 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 137 on line 31 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 138 on line 31 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '5'
			Process token 139 on line 31 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 140 on line 31 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 141 on line 32 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 142 on line 32 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 131:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 143 on line 32 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 144 on line 32 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 145 on line 33 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 146 on line 34 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 147 on line 34 [col:5;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 148 on line 34 [col:6;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '4'
		Process token 149 on line 34 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 146:T_CASE
			* level increased *
			* token 146:T_CASE added to conditions array *
			Process token 150 on line 34 [col:10;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 151 on line 35 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 152 on line 35 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 153 on line 35 [col:10;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 154 on line 35 [col:11;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 155 on line 35 [col:12;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 156 on line 35 [col:13;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '4'
			Process token 157 on line 35 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 158 on line 35 [col:17;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 159 on line 36 [col:1;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 149:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 160 on line 36 [col:6;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 161 on line 36 [col:7;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 162 on line 37 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 163 on line 38 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 164 on line 38 [col:5;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 165 on line 38 [col:12;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 164:T_DEFAULT
			* level increased *
			* token 164:T_DEFAULT added to conditions array *
			Process token 166 on line 38 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 167 on line 39 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 168 on line 39 [col:9;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_STRING => myvar
			Process token 169 on line 39 [col:14;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 170 on line 39 [col:15;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_EQUAL => =
			Process token 171 on line 39 [col:16;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 172 on line 39 [col:17;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_NULL => null
			Process token 173 on line 39 [col:21;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_SEMICOLON => ;
			Process token 174 on line 39 [col:22;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 175 on line 40 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 176 on line 40 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_BREAK => break
			=> Found scope closer for 165:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 177 on line 40 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 178 on line 40 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 179 on line 41 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 101:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 180 on line 41 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 181 on line 42 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 182 on line 43 [col:1;len:23;lvl:0;]: T_COMMENT => // Closing brace wrong.\n
	Process token 183 on line 44 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 184 on line 44 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 185 on line 44 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 186 on line 44 [col:9;len:9;lvl:0;]: T_STRING => something
	Process token 187 on line 44 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 188 on line 44 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 189 on line 44 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 183:T_SWITCH
		* level increased *
		* token 183:T_SWITCH added to conditions array *
		Process token 190 on line 44 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 191 on line 45 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 192 on line 45 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 193 on line 45 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 194 on line 45 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '1'
		Process token 195 on line 45 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 192:T_CASE
			* level increased *
			* token 192:T_CASE added to conditions array *
			Process token 196 on line 45 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 197 on line 46 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 198 on line 46 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 199 on line 46 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 200 on line 46 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 201 on line 46 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 202 on line 46 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '1'
			Process token 203 on line 46 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 204 on line 46 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 205 on line 47 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 206 on line 47 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 195:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 207 on line 47 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 208 on line 47 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 209 on line 48 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 210 on line 48 [col:5;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 189:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 211 on line 48 [col:6;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 212 on line 49 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 213 on line 50 [col:1;len:14;lvl:0;]: T_COMMENT => // PEAR style.\n
	Process token 214 on line 51 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 215 on line 51 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 216 on line 51 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 217 on line 51 [col:9;len:9;lvl:0;]: T_STRING => something
	Process token 218 on line 51 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 219 on line 51 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 220 on line 51 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 214:T_SWITCH
		* level increased *
		* token 214:T_SWITCH added to conditions array *
		Process token 221 on line 51 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 222 on line 52 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 223 on line 52 [col:5;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 224 on line 52 [col:6;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '1'
		Process token 225 on line 52 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 222:T_CASE
			* level increased *
			* token 222:T_CASE added to conditions array *
			Process token 226 on line 52 [col:10;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 227 on line 53 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 228 on line 53 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 229 on line 53 [col:10;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 230 on line 53 [col:11;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 231 on line 53 [col:12;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 232 on line 53 [col:13;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '1'
			Process token 233 on line 53 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 234 on line 53 [col:17;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 235 on line 54 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 236 on line 54 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 225:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 237 on line 54 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 238 on line 54 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 239 on line 55 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 240 on line 55 [col:5;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 241 on line 55 [col:6;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '2'
		Process token 242 on line 55 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 239:T_CASE
			* level increased *
			* token 239:T_CASE added to conditions array *
			Process token 243 on line 55 [col:10;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 244 on line 56 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_CASE => case
			Process token 245 on line 56 [col:5;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 246 on line 56 [col:6;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '3'
			Process token 247 on line 56 [col:9;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 244:T_CASE
			* shared closer, cleaning up 239:T_CASE *
			* cleaned 244:T_CASE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 245:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 246:T_CONSTANT_ENCAPSED_STRING *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 247:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 239:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 244:T_CASE added to conditions array *
			Process token 248 on line 56 [col:10;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 249 on line 57 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 250 on line 57 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 251 on line 57 [col:10;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 252 on line 57 [col:11;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 253 on line 57 [col:12;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 254 on line 57 [col:13;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '5'
			Process token 255 on line 57 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 256 on line 57 [col:17;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 257 on line 58 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 258 on line 58 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 247:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 259 on line 58 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 260 on line 58 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 261 on line 59 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 262 on line 59 [col:5;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 263 on line 59 [col:6;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '4'
		Process token 264 on line 59 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 261:T_CASE
			* level increased *
			* token 261:T_CASE added to conditions array *
			Process token 265 on line 59 [col:10;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 266 on line 60 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 267 on line 60 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 268 on line 60 [col:10;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 269 on line 60 [col:11;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 270 on line 60 [col:12;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 271 on line 60 [col:13;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '4'
			Process token 272 on line 60 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 273 on line 60 [col:17;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 274 on line 61 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 275 on line 61 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 264:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 276 on line 61 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 277 on line 61 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 278 on line 62 [col:1;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 279 on line 62 [col:8;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 278:T_DEFAULT
			* level increased *
			* token 278:T_DEFAULT added to conditions array *
			Process token 280 on line 62 [col:9;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 281 on line 63 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 282 on line 63 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_STRING => myvar
			Process token 283 on line 63 [col:10;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 284 on line 63 [col:11;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_EQUAL => =
			Process token 285 on line 63 [col:12;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 286 on line 63 [col:13;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_NULL => null
			Process token 287 on line 63 [col:17;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_SEMICOLON => ;
			Process token 288 on line 63 [col:18;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 289 on line 64 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 290 on line 64 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_BREAK => break
			=> Found scope closer for 279:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 291 on line 64 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 292 on line 64 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 293 on line 65 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 220:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 294 on line 65 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 295 on line 66 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 296 on line 67 [col:1;len:29;lvl:0;]: T_COMMENT => // Valid, but missing BREAKS.\n
	Process token 297 on line 68 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 298 on line 68 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 299 on line 68 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 300 on line 68 [col:9;len:9;lvl:0;]: T_STRING => something
	Process token 301 on line 68 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 302 on line 68 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 303 on line 68 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 297:T_SWITCH
		* level increased *
		* token 297:T_SWITCH added to conditions array *
		Process token 304 on line 68 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 305 on line 69 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 306 on line 69 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 307 on line 69 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 308 on line 69 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '1'
		Process token 309 on line 69 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 306:T_CASE
			* level increased *
			* token 306:T_CASE added to conditions array *
			Process token 310 on line 69 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 311 on line 70 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 312 on line 70 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 313 on line 70 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 314 on line 70 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 315 on line 70 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 316 on line 70 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '1'
			Process token 317 on line 70 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 318 on line 70 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 319 on line 71 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 320 on line 72 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 321 on line 72 [col:5;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_CASE => case
			Process token 322 on line 72 [col:9;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 323 on line 72 [col:10;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '2'
			Process token 324 on line 72 [col:13;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 321:T_CASE
			* shared closer, cleaning up 306:T_CASE *
			* cleaned 321:T_CASE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 322:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 323:T_CONSTANT_ENCAPSED_STRING *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 324:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 306:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 321:T_CASE added to conditions array *
			Process token 325 on line 72 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 326 on line 73 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 327 on line 73 [col:5;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_CASE => case
			Process token 328 on line 73 [col:9;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 329 on line 73 [col:10;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '3'
			Process token 330 on line 73 [col:13;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 327:T_CASE
			* shared closer, cleaning up 321:T_CASE *
			* cleaned 327:T_CASE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 328:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 329:T_CONSTANT_ENCAPSED_STRING *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 330:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 321:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 327:T_CASE added to conditions array *
			Process token 331 on line 73 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 332 on line 74 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 333 on line 74 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 334 on line 74 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 335 on line 74 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 336 on line 74 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 337 on line 74 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '5'
			Process token 338 on line 74 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 339 on line 74 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 340 on line 75 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 341 on line 76 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 342 on line 76 [col:5;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_CASE => case
			Process token 343 on line 76 [col:9;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 344 on line 76 [col:10;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '4'
			Process token 345 on line 76 [col:13;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 342:T_CASE
			* shared closer, cleaning up 327:T_CASE *
			* cleaned 342:T_CASE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 343:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 344:T_CONSTANT_ENCAPSED_STRING *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 345:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 327:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 342:T_CASE added to conditions array *
			Process token 346 on line 76 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 347 on line 77 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 348 on line 77 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 349 on line 77 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 350 on line 77 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 351 on line 77 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 352 on line 77 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '4'
			Process token 353 on line 77 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 354 on line 77 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 355 on line 78 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 356 on line 79 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 357 on line 79 [col:5;len:7;lvl:2;conds;T_SWITCH,T_CASE;]: T_DEFAULT => default
			Process token 358 on line 79 [col:12;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 357:T_DEFAULT
			* shared closer, cleaning up 342:T_CASE *
			* cleaned 357:T_DEFAULT *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 358:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 342:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 357:T_DEFAULT added to conditions array *
			Process token 359 on line 79 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 360 on line 80 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 361 on line 80 [col:9;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_STRING => myvar
			Process token 362 on line 80 [col:14;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 363 on line 80 [col:15;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_EQUAL => =
			Process token 364 on line 80 [col:16;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 365 on line 80 [col:17;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_NULL => null
			Process token 366 on line 80 [col:21;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_SEMICOLON => ;
			Process token 367 on line 80 [col:22;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 368 on line 81 [col:1;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_CLOSE_CURLY_BRACKET => }
			=> Found scope closer for 358:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		=> Found scope closer for 303:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 369 on line 81 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 370 on line 82 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 371 on line 83 [col:1;len:31;lvl:0;]: T_COMMENT => // Invalid, and missing BREAKS.\n
	Process token 372 on line 84 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 373 on line 84 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 374 on line 84 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 375 on line 84 [col:9;len:9;lvl:0;]: T_STRING => something
	Process token 376 on line 84 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 377 on line 84 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 378 on line 84 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 372:T_SWITCH
		* level increased *
		* token 372:T_SWITCH added to conditions array *
		Process token 379 on line 84 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 380 on line 85 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 381 on line 85 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => Case
		Process token 382 on line 85 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 383 on line 85 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '1'
		Process token 384 on line 85 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 385 on line 85 [col:14;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 381:T_CASE
			* level increased *
			* token 381:T_CASE added to conditions array *
			Process token 386 on line 85 [col:15;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 387 on line 86 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 388 on line 86 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 389 on line 86 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 390 on line 86 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 391 on line 86 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 392 on line 86 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '1'
			Process token 393 on line 86 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 394 on line 86 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 395 on line 87 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 396 on line 88 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_CASE => case
			Process token 397 on line 88 [col:5;len:2;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>   
			Process token 398 on line 88 [col:7;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '2'
			Process token 399 on line 88 [col:10;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 396:T_CASE
			* shared closer, cleaning up 381:T_CASE *
			* cleaned 396:T_CASE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 397:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 398:T_CONSTANT_ENCAPSED_STRING *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 399:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 381:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 396:T_CASE added to conditions array *
			Process token 400 on line 88 [col:11;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 401 on line 89 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 402 on line 89 [col:5;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_CASE => case
			Process token 403 on line 89 [col:9;len:2;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>   
			Process token 404 on line 89 [col:11;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '3'
			Process token 405 on line 89 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 406 on line 89 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 402:T_CASE
			* shared closer, cleaning up 396:T_CASE *
			* cleaned 402:T_CASE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 403:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 404:T_CONSTANT_ENCAPSED_STRING *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 405:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 406:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 396:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 402:T_CASE added to conditions array *
			Process token 407 on line 89 [col:16;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 408 on line 90 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 409 on line 90 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 410 on line 90 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 411 on line 90 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 412 on line 90 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 413 on line 90 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '5'
			Process token 414 on line 90 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 415 on line 90 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 416 on line 91 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 417 on line 92 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 418 on line 92 [col:5;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_CASE => case
			Process token 419 on line 92 [col:9;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '4'
			Process token 420 on line 92 [col:12;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 418:T_CASE
			* shared closer, cleaning up 402:T_CASE *
			* cleaned 418:T_CASE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 419:T_CONSTANT_ENCAPSED_STRING *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 420:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 402:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 418:T_CASE added to conditions array *
			Process token 421 on line 92 [col:13;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 422 on line 93 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 423 on line 93 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 424 on line 93 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 425 on line 93 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 426 on line 93 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 427 on line 93 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '4'
			Process token 428 on line 93 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 429 on line 93 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 430 on line 94 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 431 on line 95 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 432 on line 95 [col:5;len:7;lvl:2;conds;T_SWITCH,T_CASE;]: T_DEFAULT => Default
			Process token 433 on line 95 [col:12;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 434 on line 95 [col:13;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 432:T_DEFAULT
			* shared closer, cleaning up 418:T_CASE *
			* cleaned 432:T_DEFAULT *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 433:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 434:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 418:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 432:T_DEFAULT added to conditions array *
			Process token 435 on line 95 [col:14;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 436 on line 96 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 437 on line 96 [col:9;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_STRING => myvar
			Process token 438 on line 96 [col:14;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 439 on line 96 [col:15;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_EQUAL => =
			Process token 440 on line 96 [col:16;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 441 on line 96 [col:17;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_NULL => null
			Process token 442 on line 96 [col:21;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_SEMICOLON => ;
			Process token 443 on line 96 [col:22;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 444 on line 97 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 445 on line 97 [col:9;len:9;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_STRING => something
			Process token 446 on line 97 [col:18;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 447 on line 97 [col:19;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_EQUAL => =
			Process token 448 on line 97 [col:20;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 449 on line 97 [col:21;len:7;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_CONSTANT_ENCAPSED_STRING => 'hello'
			Process token 450 on line 97 [col:28;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_SEMICOLON => ;
			Process token 451 on line 97 [col:29;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 452 on line 98 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 453 on line 98 [col:9;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_STRING => other
			Process token 454 on line 98 [col:14;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 455 on line 98 [col:15;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_EQUAL => =
			Process token 456 on line 98 [col:16;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 457 on line 98 [col:17;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_CONSTANT_ENCAPSED_STRING => 'hi'
			Process token 458 on line 98 [col:21;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_SEMICOLON => ;
			Process token 459 on line 98 [col:22;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 460 on line 99 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 461 on line 99 [col:5;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_CLOSE_CURLY_BRACKET => }
			=> Found scope closer for 434:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		=> Found scope closer for 378:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 462 on line 99 [col:6;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 463 on line 100 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 464 on line 101 [col:1;len:8;lvl:0;]: T_COMMENT => // Valid\n
	Process token 465 on line 102 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 466 on line 102 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 467 on line 102 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 468 on line 102 [col:9;len:9;lvl:0;]: T_STRING => condition
	Process token 469 on line 102 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 470 on line 102 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 471 on line 102 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 465:T_SWITCH
		* level increased *
		* token 465:T_SWITCH added to conditions array *
		Process token 472 on line 102 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 473 on line 103 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 474 on line 103 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 475 on line 103 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 476 on line 103 [col:10;len:8;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => 'string'
		Process token 477 on line 103 [col:18;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 474:T_CASE
			* level increased *
			* token 474:T_CASE added to conditions array *
			Process token 478 on line 103 [col:19;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 479 on line 104 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 480 on line 104 [col:9;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => varStr
			Process token 481 on line 104 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 482 on line 104 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 483 on line 104 [col:17;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 484 on line 104 [col:18;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => 'test'
			Process token 485 on line 104 [col:24;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 486 on line 104 [col:25;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 487 on line 105 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 488 on line 106 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 489 on line 106 [col:5;len:7;lvl:2;conds;T_SWITCH,T_CASE;]: T_DEFAULT => default
			Process token 490 on line 106 [col:12;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 489:T_DEFAULT
			* shared closer, cleaning up 474:T_CASE *
			* cleaned 489:T_DEFAULT *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 490:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 474:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 489:T_DEFAULT added to conditions array *
			Process token 491 on line 106 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 492 on line 107 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 493 on line 107 [col:9;len:22;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_COMMENT => // Ignore the default.\n
			Process token 494 on line 108 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 495 on line 108 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_BREAK => break
			=> Found scope closer for 490:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 496 on line 108 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 497 on line 108 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 498 on line 109 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 471:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 499 on line 109 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 500 on line 110 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 501 on line 111 [col:1;len:21;lvl:0;]: T_COMMENT => // No default comment\n
	Process token 502 on line 112 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 503 on line 112 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 504 on line 112 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 505 on line 112 [col:9;len:9;lvl:0;]: T_STRING => condition
	Process token 506 on line 112 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 507 on line 112 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 508 on line 112 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 502:T_SWITCH
		* level increased *
		* token 502:T_SWITCH added to conditions array *
		Process token 509 on line 112 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 510 on line 113 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 511 on line 113 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 512 on line 113 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 513 on line 113 [col:10;len:8;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => 'string'
		Process token 514 on line 113 [col:18;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 511:T_CASE
			* level increased *
			* token 511:T_CASE added to conditions array *
			Process token 515 on line 113 [col:19;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 516 on line 114 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 517 on line 114 [col:9;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => varStr
			Process token 518 on line 114 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 519 on line 114 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 520 on line 114 [col:17;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 521 on line 114 [col:18;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => 'test'
			Process token 522 on line 114 [col:24;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 523 on line 114 [col:25;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 524 on line 115 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 525 on line 116 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 526 on line 116 [col:5;len:7;lvl:2;conds;T_SWITCH,T_CASE;]: T_DEFAULT => default
			Process token 527 on line 116 [col:12;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 526:T_DEFAULT
			* shared closer, cleaning up 511:T_CASE *
			* cleaned 526:T_DEFAULT *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 527:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 511:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 526:T_DEFAULT added to conditions array *
			Process token 528 on line 116 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 529 on line 117 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 530 on line 117 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_BREAK => break
			=> Found scope closer for 527:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 531 on line 117 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 532 on line 117 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 533 on line 118 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 508:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 534 on line 118 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 535 on line 119 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 536 on line 120 [col:1;len:17;lvl:0;]: T_COMMENT => // Break problems\n
	Process token 537 on line 121 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 538 on line 121 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 539 on line 121 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 540 on line 121 [col:9;len:9;lvl:0;]: T_STRING => condition
	Process token 541 on line 121 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 542 on line 121 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 543 on line 121 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 537:T_SWITCH
		* level increased *
		* token 537:T_SWITCH added to conditions array *
		Process token 544 on line 121 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 545 on line 122 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 546 on line 122 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 547 on line 122 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 548 on line 122 [col:10;len:8;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => 'string'
		Process token 549 on line 122 [col:18;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 546:T_CASE
			* level increased *
			* token 546:T_CASE added to conditions array *
			Process token 550 on line 122 [col:19;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 551 on line 123 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 552 on line 124 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 553 on line 125 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 554 on line 125 [col:9;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => varStr
			Process token 555 on line 125 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 556 on line 125 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 557 on line 125 [col:17;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 558 on line 125 [col:18;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => 'test'
			Process token 559 on line 125 [col:24;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 560 on line 125 [col:25;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 561 on line 126 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 562 on line 127 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 563 on line 127 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 549:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 564 on line 127 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 565 on line 127 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 566 on line 128 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 567 on line 129 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 568 on line 130 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 569 on line 130 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 570 on line 130 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 571 on line 130 [col:10;len:6;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => 'bool'
		Process token 572 on line 130 [col:16;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 569:T_CASE
			* level increased *
			* token 569:T_CASE added to conditions array *
			Process token 573 on line 130 [col:17;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 574 on line 131 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 575 on line 131 [col:9;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => varStr
			Process token 576 on line 131 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 577 on line 131 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 578 on line 131 [col:17;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 579 on line 131 [col:18;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => 'test'
			Process token 580 on line 131 [col:24;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 581 on line 131 [col:25;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 582 on line 132 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 583 on line 133 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 584 on line 134 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 585 on line 134 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 572:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 586 on line 134 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 587 on line 134 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 588 on line 135 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 589 on line 135 [col:5;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 590 on line 135 [col:12;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 589:T_DEFAULT
			* level increased *
			* token 589:T_DEFAULT added to conditions array *
			Process token 591 on line 135 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 592 on line 136 [col:1;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 593 on line 137 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 594 on line 137 [col:9;len:6;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_STRING => varStr
			Process token 595 on line 137 [col:15;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 596 on line 137 [col:16;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_EQUAL => =
			Process token 597 on line 137 [col:17;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 598 on line 137 [col:18;len:6;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_CONSTANT_ENCAPSED_STRING => 'test'
			Process token 599 on line 137 [col:24;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_SEMICOLON => ;
			Process token 600 on line 137 [col:25;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 601 on line 138 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 602 on line 138 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_BREAK => break
			=> Found scope closer for 590:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 603 on line 138 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 604 on line 138 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 605 on line 139 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 606 on line 140 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 543:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 607 on line 140 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 608 on line 141 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 609 on line 142 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 610 on line 142 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 611 on line 142 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 612 on line 142 [col:9;len:3;lvl:0;]: T_VAR => var
	Process token 613 on line 142 [col:12;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 614 on line 142 [col:13;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 615 on line 142 [col:14;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 609:T_SWITCH
		* level increased *
		* token 609:T_SWITCH added to conditions array *
		Process token 616 on line 142 [col:15;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 617 on line 143 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 618 on line 143 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 619 on line 143 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 620 on line 143 [col:10;len:5;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => 'one'
		Process token 621 on line 143 [col:15;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 618:T_CASE
			* level increased *
			* token 618:T_CASE added to conditions array *
			Process token 622 on line 143 [col:16;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 623 on line 144 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 624 on line 144 [col:5;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_CASE => case
			Process token 625 on line 144 [col:9;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 626 on line 144 [col:10;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => 'two'
			Process token 627 on line 144 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 624:T_CASE
			* shared closer, cleaning up 618:T_CASE *
			* cleaned 624:T_CASE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 625:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 626:T_CONSTANT_ENCAPSED_STRING *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 627:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 618:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 624:T_CASE added to conditions array *
			Process token 628 on line 144 [col:16;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 629 on line 145 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 630 on line 145 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 627:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 631 on line 145 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 632 on line 145 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 633 on line 146 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 634 on line 147 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 635 on line 147 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 636 on line 147 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 637 on line 147 [col:10;len:7;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => 'three'
		Process token 638 on line 147 [col:17;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 635:T_CASE
			* level increased *
			* token 635:T_CASE added to conditions array *
			Process token 639 on line 147 [col:18;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 640 on line 148 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 641 on line 148 [col:9;len:17;lvl:2;conds;T_SWITCH,T_CASE;]: T_COMMENT => // Nothing to do.\n
			Process token 642 on line 149 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 643 on line 149 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 638:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 644 on line 149 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 645 on line 149 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 646 on line 150 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 647 on line 151 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 648 on line 151 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 649 on line 151 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 650 on line 151 [col:10;len:6;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => 'four'
		Process token 651 on line 151 [col:16;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 648:T_CASE
			* level increased *
			* token 648:T_CASE added to conditions array *
			Process token 652 on line 151 [col:17;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 653 on line 152 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 654 on line 152 [col:9;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => echo
			Process token 655 on line 152 [col:13;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 656 on line 152 [col:14;len:2;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => hi
			Process token 657 on line 152 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 658 on line 152 [col:17;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 659 on line 153 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 660 on line 153 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 651:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 661 on line 153 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 662 on line 153 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 663 on line 154 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 664 on line 155 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 665 on line 155 [col:5;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 666 on line 155 [col:12;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 665:T_DEFAULT
			* level increased *
			* token 665:T_DEFAULT added to conditions array *
			Process token 667 on line 155 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 668 on line 156 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 669 on line 156 [col:9;len:14;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_COMMENT => // No default.\n
			Process token 670 on line 157 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 671 on line 157 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_BREAK => break
			=> Found scope closer for 666:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 672 on line 157 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 673 on line 157 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 674 on line 158 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 615:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 675 on line 158 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 676 on line 159 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 677 on line 160 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 678 on line 160 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 679 on line 160 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 680 on line 160 [col:9;len:3;lvl:0;]: T_VAR => var
	Process token 681 on line 160 [col:12;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 682 on line 160 [col:13;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 683 on line 160 [col:14;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 677:T_SWITCH
		* level increased *
		* token 677:T_SWITCH added to conditions array *
		Process token 684 on line 160 [col:15;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 685 on line 161 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 686 on line 161 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 687 on line 161 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 688 on line 161 [col:10;len:5;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => 'one'
		Process token 689 on line 161 [col:15;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 686:T_CASE
			* level increased *
			* token 686:T_CASE added to conditions array *
			Process token 690 on line 161 [col:16;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 691 on line 162 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 692 on line 162 [col:9;len:2;lvl:2;conds;T_SWITCH,T_CASE;]: T_IF => if
			Process token 693 on line 162 [col:11;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 694 on line 162 [col:12;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_OPEN_PARENTHESIS => (
			Process token 695 on line 162 [col:13;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => blah
			Process token 696 on line 162 [col:17;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_CLOSE_PARENTHESIS => )
			Process token 697 on line 162 [col:18;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 698 on line 162 [col:19;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_OPEN_CURLY_BRACKET => {
			=> Found scope opener for 692:T_IF
				* level increased *
				* token 692:T_IF added to conditions array *
				Process token 699 on line 162 [col:20;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_IF;]: T_WHITESPACE => \n
				Process token 700 on line 163 [col:1;len:8;lvl:3;conds;T_SWITCH,T_CASE,T_IF;]: T_WHITESPACE =>         
				Process token 701 on line 163 [col:9;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_IF;]: T_CLOSE_CURLY_BRACKET => }
				=> Found scope closer for 698:T_OPEN_CURLY_BRACKET
				* token T_IF removed from conditions array *
				* level decreased *
			Process token 702 on line 163 [col:10;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 703 on line 164 [col:1;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 704 on line 165 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 705 on line 165 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 689:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 706 on line 165 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 707 on line 165 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 708 on line 166 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 709 on line 167 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 710 on line 167 [col:5;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 711 on line 167 [col:12;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 710:T_DEFAULT
			* level increased *
			* token 710:T_DEFAULT added to conditions array *
			Process token 712 on line 167 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 713 on line 168 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 714 on line 168 [col:9;len:14;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_COMMENT => // No default.\n
			Process token 715 on line 169 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 716 on line 169 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_BREAK => break
			=> Found scope closer for 711:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 717 on line 169 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 718 on line 169 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 719 on line 170 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 683:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 720 on line 170 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 721 on line 171 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 722 on line 172 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 723 on line 172 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 724 on line 172 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 725 on line 172 [col:9;len:4;lvl:0;]: T_STRING => name
	Process token 726 on line 172 [col:13;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 727 on line 172 [col:14;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 728 on line 172 [col:15;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 722:T_SWITCH
		* level increased *
		* token 722:T_SWITCH added to conditions array *
		Process token 729 on line 172 [col:16;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 730 on line 173 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 731 on line 173 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 732 on line 173 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 733 on line 173 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => "1"
		Process token 734 on line 173 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 731:T_CASE
			* level increased *
			* token 731:T_CASE added to conditions array *
			Process token 735 on line 173 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 736 on line 174 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 737 on line 174 [col:9;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_SWITCH => switch
			Process token 738 on line 174 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 739 on line 174 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_OPEN_PARENTHESIS => (
			Process token 740 on line 174 [col:17;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => name2
			Process token 741 on line 174 [col:22;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_CLOSE_PARENTHESIS => )
			Process token 742 on line 174 [col:23;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 743 on line 174 [col:24;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_OPEN_CURLY_BRACKET => {
			=> Found scope opener for 737:T_SWITCH
				* level increased *
				* token 737:T_SWITCH added to conditions array *
				Process token 744 on line 174 [col:25;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 745 on line 175 [col:1;len:12;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>             
				Process token 746 on line 175 [col:13;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CASE => case
				Process token 747 on line 175 [col:17;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>  
				Process token 748 on line 175 [col:18;len:3;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => "1"
				Process token 749 on line 175 [col:21;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_COLON => :
				=> Found scope opener for 746:T_CASE
					* level increased *
					* token 746:T_CASE added to conditions array *
					Process token 750 on line 175 [col:22;len:0;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_WHITESPACE => \n
					Process token 751 on line 176 [col:1;len:16;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_WHITESPACE =>                 
					Process token 752 on line 176 [col:17;len:6;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_RETURN => return
					=> Found scope closer for 749:T_COLON
					* token T_CASE removed from conditions array *
					* level decreased *
				Process token 753 on line 176 [col:23;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>  
				Process token 754 on line 176 [col:24;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_TRUE => true
				Process token 755 on line 176 [col:28;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 756 on line 176 [col:29;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 757 on line 177 [col:1;len:12;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>             
				Process token 758 on line 177 [col:13;len:5;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_BREAK => break
				Process token 759 on line 177 [col:18;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 760 on line 177 [col:19;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 761 on line 178 [col:1;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 762 on line 179 [col:1;len:12;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>             
				Process token 763 on line 179 [col:13;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CASE => case
				Process token 764 on line 179 [col:17;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>  
				Process token 765 on line 179 [col:18;len:3;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => "2"
				Process token 766 on line 179 [col:21;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_COLON => :
				=> Found scope opener for 763:T_CASE
					* level increased *
					* token 763:T_CASE added to conditions array *
					Process token 767 on line 179 [col:22;len:0;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_WHITESPACE => \n
					Process token 768 on line 180 [col:1;len:12;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_WHITESPACE =>             
					Process token 769 on line 180 [col:13;len:6;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_RETURN => return
					=> Found scope closer for 766:T_COLON
					* token T_CASE removed from conditions array *
					* level decreased *
				Process token 770 on line 180 [col:19;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>  
				Process token 771 on line 180 [col:20;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_TRUE => true
				Process token 772 on line 180 [col:24;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 773 on line 180 [col:25;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 774 on line 181 [col:1;len:12;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>             
				Process token 775 on line 181 [col:13;len:5;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_BREAK => break
				Process token 776 on line 181 [col:18;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 777 on line 181 [col:19;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 778 on line 182 [col:1;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 779 on line 183 [col:1;len:12;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>             
				Process token 780 on line 183 [col:13;len:7;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_DEFAULT => default
				Process token 781 on line 183 [col:20;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_COLON => :
				=> Found scope opener for 780:T_DEFAULT
					* level increased *
					* token 780:T_DEFAULT added to conditions array *
					Process token 782 on line 183 [col:21;len:0;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
					Process token 783 on line 184 [col:1;len:16;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>                 
					Process token 784 on line 184 [col:17;len:14;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_COMMENT => // No default.\n
					Process token 785 on line 185 [col:1;len:12;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>             
					Process token 786 on line 185 [col:13;len:5;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_BREAK => break
					=> Found scope closer for 781:T_COLON
					* token T_DEFAULT removed from conditions array *
					* level decreased *
				Process token 787 on line 185 [col:18;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 788 on line 185 [col:19;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 789 on line 186 [col:1;len:8;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>         
				Process token 790 on line 186 [col:9;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
				=> Found scope closer for 743:T_OPEN_CURLY_BRACKET
				* token T_SWITCH removed from conditions array *
				* level decreased *
			Process token 791 on line 186 [col:10;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 792 on line 187 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 793 on line 187 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 734:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 794 on line 187 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 795 on line 187 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 796 on line 188 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 797 on line 189 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 798 on line 189 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 799 on line 189 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 800 on line 189 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => "2"
		Process token 801 on line 189 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 798:T_CASE
			* level increased *
			* token 798:T_CASE added to conditions array *
			Process token 802 on line 189 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 803 on line 190 [col:1;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_SWITCH => switch
			Process token 804 on line 190 [col:7;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 805 on line 190 [col:8;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_OPEN_PARENTHESIS => (
			Process token 806 on line 190 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => name2
			Process token 807 on line 190 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_CLOSE_PARENTHESIS => )
			Process token 808 on line 190 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 809 on line 190 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_OPEN_CURLY_BRACKET => {
			=> Found scope opener for 803:T_SWITCH
				* level increased *
				* token 803:T_SWITCH added to conditions array *
				Process token 810 on line 190 [col:17;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 811 on line 191 [col:1;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>     
				Process token 812 on line 191 [col:5;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CASE => case
				Process token 813 on line 191 [col:9;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>  
				Process token 814 on line 191 [col:10;len:3;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => "1"
				Process token 815 on line 191 [col:13;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_COLON => :
				=> Found scope opener for 812:T_CASE
					* level increased *
					* token 812:T_CASE added to conditions array *
					Process token 816 on line 191 [col:14;len:0;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_WHITESPACE => \n
					Process token 817 on line 192 [col:1;len:8;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_WHITESPACE =>         
					Process token 818 on line 192 [col:9;len:6;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_RETURN => return
					=> Found scope closer for 815:T_COLON
					* token T_CASE removed from conditions array *
					* level decreased *
				Process token 819 on line 192 [col:15;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>  
				Process token 820 on line 192 [col:16;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_TRUE => true
				Process token 821 on line 192 [col:20;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 822 on line 192 [col:21;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 823 on line 193 [col:1;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>     
				Process token 824 on line 193 [col:5;len:5;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_BREAK => break
				Process token 825 on line 193 [col:10;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 826 on line 193 [col:11;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 827 on line 194 [col:1;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 828 on line 195 [col:1;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>     
				Process token 829 on line 195 [col:5;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CASE => case
				Process token 830 on line 195 [col:9;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>  
				Process token 831 on line 195 [col:10;len:3;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => "2"
				Process token 832 on line 195 [col:13;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_COLON => :
				=> Found scope opener for 829:T_CASE
					* level increased *
					* token 829:T_CASE added to conditions array *
					Process token 833 on line 195 [col:14;len:0;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_WHITESPACE => \n
					Process token 834 on line 196 [col:1;len:4;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_WHITESPACE =>     
					Process token 835 on line 196 [col:5;len:6;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_RETURN => return
					=> Found scope closer for 832:T_COLON
					* token T_CASE removed from conditions array *
					* level decreased *
				Process token 836 on line 196 [col:11;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>  
				Process token 837 on line 196 [col:12;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_TRUE => true
				Process token 838 on line 196 [col:16;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 839 on line 196 [col:17;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 840 on line 197 [col:1;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>     
				Process token 841 on line 197 [col:5;len:5;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_BREAK => break
				Process token 842 on line 197 [col:10;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 843 on line 197 [col:11;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 844 on line 198 [col:1;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 845 on line 199 [col:1;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>     
				Process token 846 on line 199 [col:5;len:7;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_DEFAULT => default
				Process token 847 on line 199 [col:12;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_COLON => :
				=> Found scope opener for 846:T_DEFAULT
					* level increased *
					* token 846:T_DEFAULT added to conditions array *
					Process token 848 on line 199 [col:13;len:0;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
					Process token 849 on line 200 [col:1;len:8;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
					Process token 850 on line 200 [col:9;len:14;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_COMMENT => // No default.\n
					Process token 851 on line 201 [col:1;len:4;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
					Process token 852 on line 201 [col:5;len:5;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_BREAK => break
					=> Found scope closer for 847:T_COLON
					* token T_DEFAULT removed from conditions array *
					* level decreased *
				Process token 853 on line 201 [col:10;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 854 on line 201 [col:11;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 855 on line 202 [col:1;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
				=> Found scope closer for 809:T_OPEN_CURLY_BRACKET
				* token T_SWITCH removed from conditions array *
				* level decreased *
			Process token 856 on line 202 [col:2;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 857 on line 203 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 858 on line 203 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 801:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 859 on line 203 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 860 on line 203 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 861 on line 204 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 728:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 862 on line 204 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 863 on line 205 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 864 on line 206 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 865 on line 206 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 866 on line 206 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 867 on line 206 [col:9;len:4;lvl:0;]: T_STRING => name
	Process token 868 on line 206 [col:13;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 869 on line 206 [col:14;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 870 on line 206 [col:15;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 864:T_SWITCH
		* level increased *
		* token 864:T_SWITCH added to conditions array *
		Process token 871 on line 206 [col:16;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 872 on line 207 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 873 on line 207 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 874 on line 207 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 875 on line 207 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => "1"
		Process token 876 on line 207 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 873:T_CASE
			* level increased *
			* token 873:T_CASE added to conditions array *
			Process token 877 on line 207 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 878 on line 208 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 879 on line 208 [col:9;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_SWITCH => switch
			Process token 880 on line 208 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 881 on line 208 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_OPEN_PARENTHESIS => (
			Process token 882 on line 208 [col:17;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => name2
			Process token 883 on line 208 [col:22;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_CLOSE_PARENTHESIS => )
			Process token 884 on line 208 [col:23;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 885 on line 208 [col:24;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_OPEN_CURLY_BRACKET => {
			=> Found scope opener for 879:T_SWITCH
				* level increased *
				* token 879:T_SWITCH added to conditions array *
				Process token 886 on line 208 [col:25;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 887 on line 209 [col:1;len:12;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>             
				Process token 888 on line 209 [col:13;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CASE => case
				Process token 889 on line 209 [col:17;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>  
				Process token 890 on line 209 [col:18;len:3;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => "1"
				Process token 891 on line 209 [col:21;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_COLON => :
				=> Found scope opener for 888:T_CASE
					* level increased *
					* token 888:T_CASE added to conditions array *
					Process token 892 on line 209 [col:22;len:0;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_WHITESPACE => \n
					Process token 893 on line 210 [col:1;len:12;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_WHITESPACE =>             
					Process token 894 on line 210 [col:13;len:6;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_CASE;]: T_RETURN => return
					=> Found scope closer for 891:T_COLON
					* token T_CASE removed from conditions array *
					* level decreased *
				Process token 895 on line 210 [col:19;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>  
				Process token 896 on line 210 [col:20;len:4;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_TRUE => true
				Process token 897 on line 210 [col:24;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 898 on line 210 [col:25;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 899 on line 211 [col:1;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 900 on line 212 [col:1;len:12;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>             
				Process token 901 on line 212 [col:13;len:7;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_DEFAULT => default
				Process token 902 on line 212 [col:20;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_COLON => :
				=> Found scope opener for 901:T_DEFAULT
					* level increased *
					* token 901:T_DEFAULT added to conditions array *
					Process token 903 on line 212 [col:21;len:0;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
					Process token 904 on line 213 [col:1;len:16;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>                 
					Process token 905 on line 213 [col:17;len:14;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_COMMENT => // No default.\n
					Process token 906 on line 214 [col:1;len:12;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>             
					Process token 907 on line 214 [col:13;len:5;lvl:4;conds;T_SWITCH,T_CASE,T_SWITCH,T_DEFAULT;]: T_BREAK => break
					=> Found scope closer for 902:T_COLON
					* token T_DEFAULT removed from conditions array *
					* level decreased *
				Process token 908 on line 214 [col:18;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_SEMICOLON => ;
				Process token 909 on line 214 [col:19;len:0;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE => \n
				Process token 910 on line 215 [col:1;len:8;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_WHITESPACE =>         
				Process token 911 on line 215 [col:9;len:1;lvl:3;conds;T_SWITCH,T_CASE,T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
				=> Found scope closer for 885:T_OPEN_CURLY_BRACKET
				* token T_SWITCH removed from conditions array *
				* level decreased *
			Process token 912 on line 215 [col:10;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 913 on line 216 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 914 on line 216 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 876:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 915 on line 216 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 916 on line 216 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 917 on line 217 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 918 on line 218 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 919 on line 218 [col:5;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 920 on line 218 [col:12;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 919:T_DEFAULT
			* level increased *
			* token 919:T_DEFAULT added to conditions array *
			Process token 921 on line 218 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 922 on line 219 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 923 on line 219 [col:9;len:14;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_COMMENT => // No default.\n
			Process token 924 on line 220 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 925 on line 220 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_BREAK => break
			=> Found scope closer for 920:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 926 on line 220 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 927 on line 220 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 928 on line 221 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 870:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 929 on line 221 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 930 on line 222 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 931 on line 223 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 932 on line 223 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 933 on line 223 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 934 on line 223 [col:9;len:5;lvl:0;]: T_STRING => name2
	Process token 935 on line 223 [col:14;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 936 on line 223 [col:15;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 937 on line 223 [col:16;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 931:T_SWITCH
		* level increased *
		* token 931:T_SWITCH added to conditions array *
		Process token 938 on line 223 [col:17;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 939 on line 224 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 940 on line 224 [col:5;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 941 on line 224 [col:12;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 940:T_DEFAULT
			* level increased *
			* token 940:T_DEFAULT added to conditions array *
			Process token 942 on line 224 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 943 on line 225 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 944 on line 225 [col:9;len:14;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_COMMENT => // No default.\n
			Process token 945 on line 226 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 946 on line 226 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_BREAK => break
			=> Found scope closer for 941:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 947 on line 226 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 948 on line 226 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 949 on line 227 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 937:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 950 on line 227 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 951 on line 228 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 952 on line 229 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 953 on line 229 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 954 on line 229 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 955 on line 229 [col:9;len:3;lvl:0;]: T_STRING => foo
	Process token 956 on line 229 [col:12;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 957 on line 229 [col:13;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 958 on line 229 [col:14;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 952:T_SWITCH
		* level increased *
		* token 952:T_SWITCH added to conditions array *
		Process token 959 on line 229 [col:15;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 960 on line 230 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 961 on line 230 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 962 on line 230 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 963 on line 230 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => "1"
		Process token 964 on line 230 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 961:T_CASE
			* level increased *
			* token 961:T_CASE added to conditions array *
			Process token 965 on line 230 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 966 on line 231 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 967 on line 231 [col:5;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_RETURN => return
			=> Found scope closer for 964:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 968 on line 231 [col:11;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 969 on line 231 [col:12;len:4;lvl:1;conds;T_SWITCH;]: T_TRUE => true
		Process token 970 on line 231 [col:16;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 971 on line 231 [col:17;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 972 on line 232 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 973 on line 233 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 974 on line 233 [col:5;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 975 on line 233 [col:12;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 974:T_DEFAULT
			* level increased *
			* token 974:T_DEFAULT added to conditions array *
			Process token 976 on line 233 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 977 on line 234 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 978 on line 234 [col:9;len:2;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_IF => if
			Process token 979 on line 234 [col:11;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 980 on line 234 [col:12;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_OPEN_PARENTHESIS => (
			Process token 981 on line 234 [col:13;len:3;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_STRING => foo
			Process token 982 on line 234 [col:16;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 983 on line 234 [col:17;len:3;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_IS_IDENTICAL => ===
			Process token 984 on line 234 [col:20;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 985 on line 234 [col:21;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_FALSE => false
			Process token 986 on line 234 [col:26;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_CLOSE_PARENTHESIS => )
			Process token 987 on line 234 [col:27;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 988 on line 234 [col:28;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_OPEN_CURLY_BRACKET => {
			=> Found scope opener for 978:T_IF
				* level increased *
				* token 978:T_IF added to conditions array *
				Process token 989 on line 234 [col:29;len:0;lvl:3;conds;T_SWITCH,T_DEFAULT,T_IF;]: T_WHITESPACE => \n
				Process token 990 on line 235 [col:1;len:12;lvl:3;conds;T_SWITCH,T_DEFAULT,T_IF;]: T_WHITESPACE =>             
				Process token 991 on line 235 [col:13;len:5;lvl:3;conds;T_SWITCH,T_DEFAULT,T_IF;]: T_BREAK => break
				Process token 992 on line 235 [col:18;len:1;lvl:3;conds;T_SWITCH,T_DEFAULT,T_IF;]: T_SEMICOLON => ;
				Process token 993 on line 235 [col:19;len:0;lvl:3;conds;T_SWITCH,T_DEFAULT,T_IF;]: T_WHITESPACE => \n
				Process token 994 on line 236 [col:1;len:8;lvl:3;conds;T_SWITCH,T_DEFAULT,T_IF;]: T_WHITESPACE =>         
				Process token 995 on line 236 [col:9;len:1;lvl:3;conds;T_SWITCH,T_DEFAULT,T_IF;]: T_CLOSE_CURLY_BRACKET => }
				=> Found scope closer for 988:T_OPEN_CURLY_BRACKET
				* token T_IF removed from conditions array *
				* level decreased *
			Process token 996 on line 236 [col:10;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 997 on line 237 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 998 on line 237 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_BREAK => break
			=> Found scope closer for 975:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 999 on line 237 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1000 on line 237 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1001 on line 238 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 958:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 1002 on line 238 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 1003 on line 239 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 1004 on line 240 [col:1;len:26;lvl:0;]: T_COMMENT => // Valid SWITCH statement.\n
	Process token 1005 on line 241 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 1006 on line 241 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 1007 on line 241 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 1008 on line 241 [col:9;len:9;lvl:0;]: T_STRING => something
	Process token 1009 on line 241 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 1010 on line 241 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 1011 on line 241 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 1005:T_SWITCH
		* level increased *
		* token 1005:T_SWITCH added to conditions array *
		Process token 1012 on line 241 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1013 on line 242 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1014 on line 242 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 1015 on line 242 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1016 on line 242 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '1'
		Process token 1017 on line 242 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 1014:T_CASE
			* level increased *
			* token 1014:T_CASE added to conditions array *
			Process token 1018 on line 242 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 1019 on line 243 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 1020 on line 243 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 1021 on line 243 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 1022 on line 243 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 1023 on line 243 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 1024 on line 243 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '1'
			Process token 1025 on line 243 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 1026 on line 243 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 1027 on line 244 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 1028 on line 244 [col:5;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_RETURN => return
			=> Found scope closer for 1017:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 1029 on line 244 [col:11;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1030 on line 244 [col:12;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '1'
		Process token 1031 on line 244 [col:15;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1032 on line 244 [col:16;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1033 on line 245 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1034 on line 246 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1035 on line 246 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 1036 on line 246 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1037 on line 246 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '2'
		Process token 1038 on line 246 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 1035:T_CASE
			* level increased *
			* token 1035:T_CASE added to conditions array *
			Process token 1039 on line 246 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 1040 on line 247 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 1041 on line 247 [col:5;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_CASE => case
			Process token 1042 on line 247 [col:9;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 1043 on line 247 [col:10;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '3'
			Process token 1044 on line 247 [col:13;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_COLON => :
			=> Found scope opener for 1041:T_CASE
			* shared closer, cleaning up 1035:T_CASE *
			* cleaned 1041:T_CASE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 1042:T_WHITESPACE *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 1043:T_CONSTANT_ENCAPSED_STRING *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* cleaned 1044:T_COLON *
				=> level changed from 2 to 1
				=> conditions changed from T_SWITCH,T_CASE to T_SWITCH
			* token 1035:T_CASE removed from conditions array *
			* level decreased *
			* level increased *
			* token 1041:T_CASE added to conditions array *
			Process token 1045 on line 247 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 1046 on line 248 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 1047 on line 248 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 1048 on line 248 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 1049 on line 248 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 1050 on line 248 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 1051 on line 248 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '5'
			Process token 1052 on line 248 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 1053 on line 248 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 1054 on line 249 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 1055 on line 249 [col:5;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_RETURN => return
			=> Found scope closer for 1044:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 1056 on line 249 [col:11;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1057 on line 249 [col:12;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '2'
		Process token 1058 on line 249 [col:15;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1059 on line 249 [col:16;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1060 on line 250 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1061 on line 251 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1062 on line 251 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 1063 on line 251 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1064 on line 251 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '4'
		Process token 1065 on line 251 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 1062:T_CASE
			* level increased *
			* token 1062:T_CASE added to conditions array *
			Process token 1066 on line 251 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 1067 on line 252 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 1068 on line 252 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 1069 on line 252 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 1070 on line 252 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 1071 on line 252 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 1072 on line 252 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '4'
			Process token 1073 on line 252 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 1074 on line 252 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 1075 on line 253 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 1076 on line 253 [col:5;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_RETURN => return
			=> Found scope closer for 1065:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 1077 on line 253 [col:11;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1078 on line 253 [col:12;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '3'
		Process token 1079 on line 253 [col:15;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1080 on line 253 [col:16;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1081 on line 254 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1082 on line 255 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1083 on line 255 [col:5;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 1084 on line 255 [col:12;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 1083:T_DEFAULT
			* level increased *
			* token 1083:T_DEFAULT added to conditions array *
			Process token 1085 on line 255 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 1086 on line 256 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 1087 on line 256 [col:9;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_STRING => myvar
			Process token 1088 on line 256 [col:14;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 1089 on line 256 [col:15;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_EQUAL => =
			Process token 1090 on line 256 [col:16;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>  
			Process token 1091 on line 256 [col:17;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_NULL => null
			Process token 1092 on line 256 [col:21;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_SEMICOLON => ;
			Process token 1093 on line 256 [col:22;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 1094 on line 257 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 1095 on line 257 [col:5;len:6;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_RETURN => return
			=> Found scope closer for 1084:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 1096 on line 257 [col:11;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1097 on line 257 [col:12;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '4'
		Process token 1098 on line 257 [col:15;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1099 on line 257 [col:16;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1100 on line 258 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 1011:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 1101 on line 258 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 1102 on line 259 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 1103 on line 260 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 1104 on line 260 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 1105 on line 260 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 1106 on line 260 [col:9;len:9;lvl:0;]: T_STRING => something
	Process token 1107 on line 260 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 1108 on line 260 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 1109 on line 260 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 1103:T_SWITCH
		* level increased *
		* token 1103:T_SWITCH added to conditions array *
		Process token 1110 on line 260 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1111 on line 261 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1112 on line 261 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 1113 on line 261 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1114 on line 261 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '1'
		Process token 1115 on line 261 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 1112:T_CASE
			* level increased *
			* token 1112:T_CASE added to conditions array *
			Process token 1116 on line 261 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 1117 on line 262 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 1118 on line 262 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_STRING => myvar
			Process token 1119 on line 262 [col:14;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 1120 on line 262 [col:15;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_EQUAL => =
			Process token 1121 on line 262 [col:16;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>  
			Process token 1122 on line 262 [col:17;len:3;lvl:2;conds;T_SWITCH,T_CASE;]: T_CONSTANT_ENCAPSED_STRING => '1'
			Process token 1123 on line 262 [col:20;len:1;lvl:2;conds;T_SWITCH,T_CASE;]: T_SEMICOLON => ;
			Process token 1124 on line 262 [col:21;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 1125 on line 263 [col:1;len:4;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>     
			Process token 1126 on line 263 [col:5;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_BREAK => break
			=> Found scope closer for 1115:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 1127 on line 263 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1128 on line 263 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1129 on line 264 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1130 on line 265 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1131 on line 265 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 1132 on line 265 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1133 on line 265 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '2'
		Process token 1134 on line 265 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 1131:T_CASE
			* level increased *
			* token 1131:T_CASE added to conditions array *
			Process token 1135 on line 265 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 1136 on line 266 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 1137 on line 266 [col:9;len:5;lvl:2;conds;T_SWITCH,T_CASE;]: T_THROW => throw
			=> Found scope closer for 1134:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 1138 on line 266 [col:14;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1139 on line 266 [col:15;len:9;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => 'message'
		Process token 1140 on line 266 [col:24;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1141 on line 266 [col:25;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1142 on line 267 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1143 on line 268 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1144 on line 268 [col:5;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 1145 on line 268 [col:12;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 1144:T_DEFAULT
			* level increased *
			* token 1144:T_DEFAULT added to conditions array *
			Process token 1146 on line 268 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 1147 on line 269 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 1148 on line 269 [col:5;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_THROW => throw
			=> Found scope closer for 1145:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 1149 on line 269 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1150 on line 269 [col:11;len:9;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => 'message'
		Process token 1151 on line 269 [col:20;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1152 on line 269 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1153 on line 270 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 1109:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 1154 on line 270 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 1155 on line 271 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 1156 on line 272 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 1157 on line 272 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 1158 on line 272 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 1159 on line 272 [col:9;len:9;lvl:0;]: T_STRING => something
	Process token 1160 on line 272 [col:18;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 1161 on line 272 [col:19;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 1162 on line 272 [col:20;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 1156:T_SWITCH
		* level increased *
		* token 1156:T_SWITCH added to conditions array *
		Process token 1163 on line 272 [col:21;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1164 on line 273 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1165 on line 273 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 1166 on line 273 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1167 on line 273 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '1'
		Process token 1168 on line 273 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1169 on line 273 [col:14;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1170 on line 274 [col:1;len:8;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>         
		Process token 1171 on line 274 [col:9;len:5;lvl:1;conds;T_SWITCH;]: T_STRING => print
		Process token 1172 on line 274 [col:14;len:1;lvl:1;conds;T_SWITCH;]: T_OPEN_PARENTHESIS => (
		Process token 1173 on line 274 [col:15;len:5;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => 'one'
		Process token 1174 on line 274 [col:20;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_PARENTHESIS => )
		Process token 1175 on line 274 [col:21;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1176 on line 274 [col:22;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1177 on line 275 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1178 on line 275 [col:5;len:5;lvl:1;conds;T_SWITCH;]: T_BREAK => break
		Process token 1179 on line 275 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1180 on line 275 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1181 on line 276 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1182 on line 277 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1183 on line 277 [col:5;len:7;lvl:1;conds;T_SWITCH;]: T_DEFAULT => default
		Process token 1184 on line 277 [col:12;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 1183:T_DEFAULT
			* level increased *
			* token 1183:T_DEFAULT added to conditions array *
			Process token 1185 on line 277 [col:13;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 1186 on line 278 [col:1;len:8;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>         
			Process token 1187 on line 278 [col:9;len:5;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_STRING => print
			Process token 1188 on line 278 [col:14;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_OPEN_PARENTHESIS => (
			Process token 1189 on line 278 [col:15;len:9;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_CONSTANT_ENCAPSED_STRING => 'default'
			Process token 1190 on line 278 [col:24;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_CLOSE_PARENTHESIS => )
			Process token 1191 on line 278 [col:25;len:1;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_SEMICOLON => ;
			Process token 1192 on line 278 [col:26;len:0;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE => \n
			Process token 1193 on line 279 [col:1;len:4;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_WHITESPACE =>     
			Process token 1194 on line 279 [col:5;len:6;lvl:2;conds;T_SWITCH,T_DEFAULT;]: T_RETURN => return
			=> Found scope closer for 1184:T_COLON
			* token T_DEFAULT removed from conditions array *
			* level decreased *
		Process token 1195 on line 279 [col:11;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1196 on line 279 [col:12;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1197 on line 280 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 1162:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 1198 on line 280 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 1199 on line 281 [col:1;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 1200 on line 282 [col:1;len:6;lvl:0;]: T_SWITCH => switch
	Process token 1201 on line 282 [col:7;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 1202 on line 282 [col:8;len:1;lvl:0;]: T_OPEN_PARENTHESIS => (
	Process token 1203 on line 282 [col:9;len:3;lvl:0;]: T_STRING => foo
	Process token 1204 on line 282 [col:12;len:1;lvl:0;]: T_CLOSE_PARENTHESIS => )
	Process token 1205 on line 282 [col:13;len:1;lvl:0;]: T_WHITESPACE =>  
	Process token 1206 on line 282 [col:14;len:1;lvl:0;]: T_OPEN_CURLY_BRACKET => {
	=> Found scope opener for 1200:T_SWITCH
		* level increased *
		* token 1200:T_SWITCH added to conditions array *
		Process token 1207 on line 282 [col:15;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1208 on line 283 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1209 on line 283 [col:5;len:4;lvl:1;conds;T_SWITCH;]: T_CASE => case
		Process token 1210 on line 283 [col:9;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1211 on line 283 [col:10;len:3;lvl:1;conds;T_SWITCH;]: T_CONSTANT_ENCAPSED_STRING => '1'
		Process token 1212 on line 283 [col:13;len:1;lvl:1;conds;T_SWITCH;]: T_COLON => :
		=> Found scope opener for 1209:T_CASE
			* level increased *
			* token 1209:T_CASE added to conditions array *
			Process token 1213 on line 283 [col:14;len:0;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE => \n
			Process token 1214 on line 284 [col:1;len:8;lvl:2;conds;T_SWITCH,T_CASE;]: T_WHITESPACE =>         
			Process token 1215 on line 284 [col:9;len:6;lvl:2;conds;T_SWITCH,T_CASE;]: T_RETURN => return
			=> Found scope closer for 1212:T_COLON
			* token T_CASE removed from conditions array *
			* level decreased *
		Process token 1216 on line 284 [col:15;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1217 on line 284 [col:16;len:1;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>  
		Process token 1218 on line 284 [col:17;len:10;lvl:1;conds;T_SWITCH;]: T_COMMENT => // comment\n
		Process token 1219 on line 285 [col:1;len:4;lvl:1;conds;T_SWITCH;]: T_WHITESPACE =>     
		Process token 1220 on line 285 [col:5;len:5;lvl:1;conds;T_SWITCH;]: T_BREAK => break
		Process token 1221 on line 285 [col:10;len:1;lvl:1;conds;T_SWITCH;]: T_SEMICOLON => ;
		Process token 1222 on line 285 [col:11;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1223 on line 286 [col:1;len:0;lvl:1;conds;T_SWITCH;]: T_WHITESPACE => \n
		Process token 1224 on line 287 [col:1;len:1;lvl:1;conds;T_SWITCH;]: T_CLOSE_CURLY_BRACKET => }
		=> Found scope closer for 1206:T_OPEN_CURLY_BRACKET
		* token T_SWITCH removed from conditions array *
		* level decreased *
	Process token 1225 on line 287 [col:2;len:0;lvl:0;]: T_WHITESPACE => \n
	Process token 1226 on line 288 [col:1;len:0;lvl:0;]: T_CLOSE_TAG => 
	*** END LEVEL MAP ***
	*** START ADDITIONAL JS PROCESSING ***
	Process token 0: T_OPEN_TAG => 
	Process token 1: T_WHITESPACE => \n
	Process token 2: T_WHITESPACE => \n
	Process token 3: T_COMMENT => // Valid SWITCH statement.\n
	Process token 4: T_SWITCH => switch
	Process token 5: T_WHITESPACE =>  
	Process token 6: T_OPEN_PARENTHESIS => (
	Process token 7: T_STRING => something
	Process token 8: T_CLOSE_PARENTHESIS => )
	Process token 9: T_WHITESPACE =>  
	Process token 10: T_OPEN_CURLY_BRACKET => {
	Process token 11: T_WHITESPACE => \n
	Process token 12: T_WHITESPACE =>     
	Process token 13: T_CASE => case
	Process token 14: T_WHITESPACE =>  
	Process token 15: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 16: T_COLON => :
	Process token 17: T_WHITESPACE => \n
	Process token 18: T_WHITESPACE =>         
	Process token 19: T_STRING => myvar
	Process token 20: T_WHITESPACE =>  
	Process token 21: T_EQUAL => =
	Process token 22: T_WHITESPACE =>  
	Process token 23: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 24: T_SEMICOLON => ;
	Process token 25: T_WHITESPACE => \n
	Process token 26: T_WHITESPACE =>     
	Process token 27: T_BREAK => break
	Process token 28: T_SEMICOLON => ;
	Process token 29: T_WHITESPACE => \n
	Process token 30: T_WHITESPACE => \n
	Process token 31: T_WHITESPACE =>     
	Process token 32: T_CASE => case
	Process token 33: T_WHITESPACE =>  
	Process token 34: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 35: T_COLON => :
	Process token 36: T_WHITESPACE => \n
	Process token 37: T_WHITESPACE =>     
	Process token 38: T_CASE => case
	Process token 39: T_WHITESPACE =>  
	Process token 40: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 41: T_COLON => :
	Process token 42: T_WHITESPACE => \n
	Process token 43: T_WHITESPACE =>         
	Process token 44: T_STRING => myvar
	Process token 45: T_WHITESPACE =>  
	Process token 46: T_EQUAL => =
	Process token 47: T_WHITESPACE =>  
	Process token 48: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 49: T_SEMICOLON => ;
	Process token 50: T_WHITESPACE => \n
	Process token 51: T_WHITESPACE =>     
	Process token 52: T_BREAK => break
	Process token 53: T_SEMICOLON => ;
	Process token 54: T_WHITESPACE => \n
	Process token 55: T_WHITESPACE => \n
	Process token 56: T_WHITESPACE =>     
	Process token 57: T_CASE => case
	Process token 58: T_WHITESPACE =>  
	Process token 59: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 60: T_COLON => :
	Process token 61: T_WHITESPACE => \n
	Process token 62: T_WHITESPACE =>         
	Process token 63: T_STRING => myvar
	Process token 64: T_WHITESPACE =>  
	Process token 65: T_EQUAL => =
	Process token 66: T_WHITESPACE =>  
	Process token 67: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 68: T_SEMICOLON => ;
	Process token 69: T_WHITESPACE => \n
	Process token 70: T_WHITESPACE =>     
	Process token 71: T_BREAK => break
	Process token 72: T_SEMICOLON => ;
	Process token 73: T_WHITESPACE => \n
	Process token 74: T_WHITESPACE => \n
	Process token 75: T_WHITESPACE =>     
	Process token 76: T_DEFAULT => default
	Process token 77: T_COLON => :
	Process token 78: T_WHITESPACE => \n
	Process token 79: T_WHITESPACE =>         
	Process token 80: T_STRING => myvar
	Process token 81: T_WHITESPACE =>  
	Process token 82: T_EQUAL => =
	Process token 83: T_WHITESPACE =>  
	Process token 84: T_NULL => null
	Process token 85: T_SEMICOLON => ;
	Process token 86: T_WHITESPACE => \n
	Process token 87: T_WHITESPACE =>     
	Process token 88: T_BREAK => break
	Process token 89: T_SEMICOLON => ;
	Process token 90: T_WHITESPACE => \n
	Process token 91: T_CLOSE_CURLY_BRACKET => }
	Process token 92: T_WHITESPACE => \n
	Process token 93: T_WHITESPACE => \n
	Process token 94: T_COMMENT => // Alignment wrong.\n
	Process token 95: T_SWITCH => switch
	Process token 96: T_WHITESPACE =>  
	Process token 97: T_OPEN_PARENTHESIS => (
	Process token 98: T_STRING => something
	Process token 99: T_CLOSE_PARENTHESIS => )
	Process token 100: T_WHITESPACE =>  
	Process token 101: T_OPEN_CURLY_BRACKET => {
	Process token 102: T_WHITESPACE => \n
	Process token 103: T_WHITESPACE =>     
	Process token 104: T_CASE => case
	Process token 105: T_WHITESPACE =>  
	Process token 106: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 107: T_COLON => :
	Process token 108: T_WHITESPACE => \n
	Process token 109: T_WHITESPACE =>         
	Process token 110: T_STRING => myvar
	Process token 111: T_WHITESPACE =>  
	Process token 112: T_EQUAL => =
	Process token 113: T_WHITESPACE =>  
	Process token 114: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 115: T_SEMICOLON => ;
	Process token 116: T_WHITESPACE => \n
	Process token 117: T_WHITESPACE =>         
	Process token 118: T_BREAK => break
	Process token 119: T_SEMICOLON => ;
	Process token 120: T_WHITESPACE => \n
	Process token 121: T_WHITESPACE => \n
	Process token 122: T_CASE => case
	Process token 123: T_WHITESPACE =>  
	Process token 124: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 125: T_COLON => :
	Process token 126: T_WHITESPACE => \n
	Process token 127: T_WHITESPACE =>     
	Process token 128: T_CASE => case
	Process token 129: T_WHITESPACE =>  
	Process token 130: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 131: T_COLON => :
	Process token 132: T_WHITESPACE => \n
	Process token 133: T_WHITESPACE =>         
	Process token 134: T_STRING => myvar
	Process token 135: T_WHITESPACE =>  
	Process token 136: T_EQUAL => =
	Process token 137: T_WHITESPACE =>  
	Process token 138: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 139: T_SEMICOLON => ;
	Process token 140: T_WHITESPACE => \n
	Process token 141: T_WHITESPACE =>     
	Process token 142: T_BREAK => break
	Process token 143: T_SEMICOLON => ;
	Process token 144: T_WHITESPACE => \n
	Process token 145: T_WHITESPACE => \n
	Process token 146: T_CASE => case
	Process token 147: T_WHITESPACE =>  
	Process token 148: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 149: T_COLON => :
	Process token 150: T_WHITESPACE => \n
	Process token 151: T_WHITESPACE =>     
	Process token 152: T_STRING => myvar
	Process token 153: T_WHITESPACE =>  
	Process token 154: T_EQUAL => =
	Process token 155: T_WHITESPACE =>  
	Process token 156: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 157: T_SEMICOLON => ;
	Process token 158: T_WHITESPACE => \n
	Process token 159: T_BREAK => break
	Process token 160: T_SEMICOLON => ;
	Process token 161: T_WHITESPACE => \n
	Process token 162: T_WHITESPACE => \n
	Process token 163: T_WHITESPACE =>     
	Process token 164: T_DEFAULT => default
	Process token 165: T_COLON => :
	Process token 166: T_WHITESPACE => \n
	Process token 167: T_WHITESPACE =>         
	Process token 168: T_STRING => myvar
	Process token 169: T_WHITESPACE =>  
	Process token 170: T_EQUAL => =
	Process token 171: T_WHITESPACE =>  
	Process token 172: T_NULL => null
	Process token 173: T_SEMICOLON => ;
	Process token 174: T_WHITESPACE => \n
	Process token 175: T_WHITESPACE =>     
	Process token 176: T_BREAK => break
	Process token 177: T_SEMICOLON => ;
	Process token 178: T_WHITESPACE => \n
	Process token 179: T_CLOSE_CURLY_BRACKET => }
	Process token 180: T_WHITESPACE => \n
	Process token 181: T_WHITESPACE => \n
	Process token 182: T_COMMENT => // Closing brace wrong.\n
	Process token 183: T_SWITCH => switch
	Process token 184: T_WHITESPACE =>  
	Process token 185: T_OPEN_PARENTHESIS => (
	Process token 186: T_STRING => something
	Process token 187: T_CLOSE_PARENTHESIS => )
	Process token 188: T_WHITESPACE =>  
	Process token 189: T_OPEN_CURLY_BRACKET => {
	Process token 190: T_WHITESPACE => \n
	Process token 191: T_WHITESPACE =>     
	Process token 192: T_CASE => case
	Process token 193: T_WHITESPACE =>  
	Process token 194: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 195: T_COLON => :
	Process token 196: T_WHITESPACE => \n
	Process token 197: T_WHITESPACE =>         
	Process token 198: T_STRING => myvar
	Process token 199: T_WHITESPACE =>  
	Process token 200: T_EQUAL => =
	Process token 201: T_WHITESPACE =>  
	Process token 202: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 203: T_SEMICOLON => ;
	Process token 204: T_WHITESPACE => \n
	Process token 205: T_WHITESPACE =>     
	Process token 206: T_BREAK => break
	Process token 207: T_SEMICOLON => ;
	Process token 208: T_WHITESPACE => \n
	Process token 209: T_WHITESPACE =>     
	Process token 210: T_CLOSE_CURLY_BRACKET => }
	Process token 211: T_WHITESPACE => \n
	Process token 212: T_WHITESPACE => \n
	Process token 213: T_COMMENT => // PEAR style.\n
	Process token 214: T_SWITCH => switch
	Process token 215: T_WHITESPACE =>  
	Process token 216: T_OPEN_PARENTHESIS => (
	Process token 217: T_STRING => something
	Process token 218: T_CLOSE_PARENTHESIS => )
	Process token 219: T_WHITESPACE =>  
	Process token 220: T_OPEN_CURLY_BRACKET => {
	Process token 221: T_WHITESPACE => \n
	Process token 222: T_CASE => case
	Process token 223: T_WHITESPACE =>  
	Process token 224: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 225: T_COLON => :
	Process token 226: T_WHITESPACE => \n
	Process token 227: T_WHITESPACE =>     
	Process token 228: T_STRING => myvar
	Process token 229: T_WHITESPACE =>  
	Process token 230: T_EQUAL => =
	Process token 231: T_WHITESPACE =>  
	Process token 232: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 233: T_SEMICOLON => ;
	Process token 234: T_WHITESPACE => \n
	Process token 235: T_WHITESPACE =>     
	Process token 236: T_BREAK => break
	Process token 237: T_SEMICOLON => ;
	Process token 238: T_WHITESPACE => \n
	Process token 239: T_CASE => case
	Process token 240: T_WHITESPACE =>  
	Process token 241: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 242: T_COLON => :
	Process token 243: T_WHITESPACE => \n
	Process token 244: T_CASE => case
	Process token 245: T_WHITESPACE =>  
	Process token 246: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 247: T_COLON => :
	Process token 248: T_WHITESPACE => \n
	Process token 249: T_WHITESPACE =>     
	Process token 250: T_STRING => myvar
	Process token 251: T_WHITESPACE =>  
	Process token 252: T_EQUAL => =
	Process token 253: T_WHITESPACE =>  
	Process token 254: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 255: T_SEMICOLON => ;
	Process token 256: T_WHITESPACE => \n
	Process token 257: T_WHITESPACE =>     
	Process token 258: T_BREAK => break
	Process token 259: T_SEMICOLON => ;
	Process token 260: T_WHITESPACE => \n
	Process token 261: T_CASE => case
	Process token 262: T_WHITESPACE =>  
	Process token 263: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 264: T_COLON => :
	Process token 265: T_WHITESPACE => \n
	Process token 266: T_WHITESPACE =>     
	Process token 267: T_STRING => myvar
	Process token 268: T_WHITESPACE =>  
	Process token 269: T_EQUAL => =
	Process token 270: T_WHITESPACE =>  
	Process token 271: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 272: T_SEMICOLON => ;
	Process token 273: T_WHITESPACE => \n
	Process token 274: T_WHITESPACE =>     
	Process token 275: T_BREAK => break
	Process token 276: T_SEMICOLON => ;
	Process token 277: T_WHITESPACE => \n
	Process token 278: T_DEFAULT => default
	Process token 279: T_COLON => :
	Process token 280: T_WHITESPACE => \n
	Process token 281: T_WHITESPACE =>     
	Process token 282: T_STRING => myvar
	Process token 283: T_WHITESPACE =>  
	Process token 284: T_EQUAL => =
	Process token 285: T_WHITESPACE =>  
	Process token 286: T_NULL => null
	Process token 287: T_SEMICOLON => ;
	Process token 288: T_WHITESPACE => \n
	Process token 289: T_WHITESPACE =>     
	Process token 290: T_BREAK => break
	Process token 291: T_SEMICOLON => ;
	Process token 292: T_WHITESPACE => \n
	Process token 293: T_CLOSE_CURLY_BRACKET => }
	Process token 294: T_WHITESPACE => \n
	Process token 295: T_WHITESPACE => \n
	Process token 296: T_COMMENT => // Valid, but missing BREAKS.\n
	Process token 297: T_SWITCH => switch
	Process token 298: T_WHITESPACE =>  
	Process token 299: T_OPEN_PARENTHESIS => (
	Process token 300: T_STRING => something
	Process token 301: T_CLOSE_PARENTHESIS => )
	Process token 302: T_WHITESPACE =>  
	Process token 303: T_OPEN_CURLY_BRACKET => {
	Process token 304: T_WHITESPACE => \n
	Process token 305: T_WHITESPACE =>     
	Process token 306: T_CASE => case
	Process token 307: T_WHITESPACE =>  
	Process token 308: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 309: T_COLON => :
	Process token 310: T_WHITESPACE => \n
	Process token 311: T_WHITESPACE =>         
	Process token 312: T_STRING => myvar
	Process token 313: T_WHITESPACE =>  
	Process token 314: T_EQUAL => =
	Process token 315: T_WHITESPACE =>  
	Process token 316: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 317: T_SEMICOLON => ;
	Process token 318: T_WHITESPACE => \n
	Process token 319: T_WHITESPACE => \n
	Process token 320: T_WHITESPACE =>     
	Process token 321: T_CASE => case
	Process token 322: T_WHITESPACE =>  
	Process token 323: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 324: T_COLON => :
	Process token 325: T_WHITESPACE => \n
	Process token 326: T_WHITESPACE =>     
	Process token 327: T_CASE => case
	Process token 328: T_WHITESPACE =>  
	Process token 329: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 330: T_COLON => :
	Process token 331: T_WHITESPACE => \n
	Process token 332: T_WHITESPACE =>         
	Process token 333: T_STRING => myvar
	Process token 334: T_WHITESPACE =>  
	Process token 335: T_EQUAL => =
	Process token 336: T_WHITESPACE =>  
	Process token 337: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 338: T_SEMICOLON => ;
	Process token 339: T_WHITESPACE => \n
	Process token 340: T_WHITESPACE => \n
	Process token 341: T_WHITESPACE =>     
	Process token 342: T_CASE => case
	Process token 343: T_WHITESPACE =>  
	Process token 344: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 345: T_COLON => :
	Process token 346: T_WHITESPACE => \n
	Process token 347: T_WHITESPACE =>         
	Process token 348: T_STRING => myvar
	Process token 349: T_WHITESPACE =>  
	Process token 350: T_EQUAL => =
	Process token 351: T_WHITESPACE =>  
	Process token 352: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 353: T_SEMICOLON => ;
	Process token 354: T_WHITESPACE => \n
	Process token 355: T_WHITESPACE => \n
	Process token 356: T_WHITESPACE =>     
	Process token 357: T_DEFAULT => default
	Process token 358: T_COLON => :
	Process token 359: T_WHITESPACE => \n
	Process token 360: T_WHITESPACE =>         
	Process token 361: T_STRING => myvar
	Process token 362: T_WHITESPACE =>  
	Process token 363: T_EQUAL => =
	Process token 364: T_WHITESPACE =>  
	Process token 365: T_NULL => null
	Process token 366: T_SEMICOLON => ;
	Process token 367: T_WHITESPACE => \n
	Process token 368: T_CLOSE_CURLY_BRACKET => }
	Process token 369: T_WHITESPACE => \n
	Process token 370: T_WHITESPACE => \n
	Process token 371: T_COMMENT => // Invalid, and missing BREAKS.\n
	Process token 372: T_SWITCH => switch
	Process token 373: T_WHITESPACE =>  
	Process token 374: T_OPEN_PARENTHESIS => (
	Process token 375: T_STRING => something
	Process token 376: T_CLOSE_PARENTHESIS => )
	Process token 377: T_WHITESPACE =>  
	Process token 378: T_OPEN_CURLY_BRACKET => {
	Process token 379: T_WHITESPACE => \n
	Process token 380: T_WHITESPACE =>     
	Process token 381: T_CASE => Case
	Process token 382: T_WHITESPACE =>  
	Process token 383: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 384: T_WHITESPACE =>  
	Process token 385: T_COLON => :
	Process token 386: T_WHITESPACE => \n
	Process token 387: T_WHITESPACE =>         
	Process token 388: T_STRING => myvar
	Process token 389: T_WHITESPACE =>  
	Process token 390: T_EQUAL => =
	Process token 391: T_WHITESPACE =>  
	Process token 392: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 393: T_SEMICOLON => ;
	Process token 394: T_WHITESPACE => \n
	Process token 395: T_WHITESPACE => \n
	Process token 396: T_CASE => case
	Process token 397: T_WHITESPACE =>   
	Process token 398: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 399: T_COLON => :
	Process token 400: T_WHITESPACE => \n
	Process token 401: T_WHITESPACE =>     
	Process token 402: T_CASE => case
	Process token 403: T_WHITESPACE =>   
	Process token 404: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 405: T_WHITESPACE =>  
	Process token 406: T_COLON => :
	Process token 407: T_WHITESPACE => \n
	Process token 408: T_WHITESPACE =>         
	Process token 409: T_STRING => myvar
	Process token 410: T_WHITESPACE =>  
	Process token 411: T_EQUAL => =
	Process token 412: T_WHITESPACE =>  
	Process token 413: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 414: T_SEMICOLON => ;
	Process token 415: T_WHITESPACE => \n
	Process token 416: T_WHITESPACE => \n
	Process token 417: T_WHITESPACE =>     
	Process token 418: T_CASE => case
	Process token 419: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 420: T_COLON => :
	Process token 421: T_WHITESPACE => \n
	Process token 422: T_WHITESPACE =>         
	Process token 423: T_STRING => myvar
	Process token 424: T_WHITESPACE =>  
	Process token 425: T_EQUAL => =
	Process token 426: T_WHITESPACE =>  
	Process token 427: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 428: T_SEMICOLON => ;
	Process token 429: T_WHITESPACE => \n
	Process token 430: T_WHITESPACE => \n
	Process token 431: T_WHITESPACE =>     
	Process token 432: T_DEFAULT => Default
	Process token 433: T_WHITESPACE =>  
	Process token 434: T_COLON => :
	Process token 435: T_WHITESPACE => \n
	Process token 436: T_WHITESPACE =>         
	Process token 437: T_STRING => myvar
	Process token 438: T_WHITESPACE =>  
	Process token 439: T_EQUAL => =
	Process token 440: T_WHITESPACE =>  
	Process token 441: T_NULL => null
	Process token 442: T_SEMICOLON => ;
	Process token 443: T_WHITESPACE => \n
	Process token 444: T_WHITESPACE =>         
	Process token 445: T_STRING => something
	Process token 446: T_WHITESPACE =>  
	Process token 447: T_EQUAL => =
	Process token 448: T_WHITESPACE =>  
	Process token 449: T_CONSTANT_ENCAPSED_STRING => 'hello'
	Process token 450: T_SEMICOLON => ;
	Process token 451: T_WHITESPACE => \n
	Process token 452: T_WHITESPACE =>         
	Process token 453: T_STRING => other
	Process token 454: T_WHITESPACE =>  
	Process token 455: T_EQUAL => =
	Process token 456: T_WHITESPACE =>  
	Process token 457: T_CONSTANT_ENCAPSED_STRING => 'hi'
	Process token 458: T_SEMICOLON => ;
	Process token 459: T_WHITESPACE => \n
	Process token 460: T_WHITESPACE =>     
	Process token 461: T_CLOSE_CURLY_BRACKET => }
	Process token 462: T_WHITESPACE => \n
	Process token 463: T_WHITESPACE => \n
	Process token 464: T_COMMENT => // Valid\n
	Process token 465: T_SWITCH => switch
	Process token 466: T_WHITESPACE =>  
	Process token 467: T_OPEN_PARENTHESIS => (
	Process token 468: T_STRING => condition
	Process token 469: T_CLOSE_PARENTHESIS => )
	Process token 470: T_WHITESPACE =>  
	Process token 471: T_OPEN_CURLY_BRACKET => {
	Process token 472: T_WHITESPACE => \n
	Process token 473: T_WHITESPACE =>     
	Process token 474: T_CASE => case
	Process token 475: T_WHITESPACE =>  
	Process token 476: T_CONSTANT_ENCAPSED_STRING => 'string'
	Process token 477: T_COLON => :
	Process token 478: T_WHITESPACE => \n
	Process token 479: T_WHITESPACE =>         
	Process token 480: T_STRING => varStr
	Process token 481: T_WHITESPACE =>  
	Process token 482: T_EQUAL => =
	Process token 483: T_WHITESPACE =>  
	Process token 484: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 485: T_SEMICOLON => ;
	Process token 486: T_WHITESPACE => \n
	Process token 487: T_WHITESPACE => \n
	Process token 488: T_WHITESPACE =>     
	Process token 489: T_DEFAULT => default
	Process token 490: T_COLON => :
	Process token 491: T_WHITESPACE => \n
	Process token 492: T_WHITESPACE =>         
	Process token 493: T_COMMENT => // Ignore the default.\n
	Process token 494: T_WHITESPACE =>     
	Process token 495: T_BREAK => break
	Process token 496: T_SEMICOLON => ;
	Process token 497: T_WHITESPACE => \n
	Process token 498: T_CLOSE_CURLY_BRACKET => }
	Process token 499: T_WHITESPACE => \n
	Process token 500: T_WHITESPACE => \n
	Process token 501: T_COMMENT => // No default comment\n
	Process token 502: T_SWITCH => switch
	Process token 503: T_WHITESPACE =>  
	Process token 504: T_OPEN_PARENTHESIS => (
	Process token 505: T_STRING => condition
	Process token 506: T_CLOSE_PARENTHESIS => )
	Process token 507: T_WHITESPACE =>  
	Process token 508: T_OPEN_CURLY_BRACKET => {
	Process token 509: T_WHITESPACE => \n
	Process token 510: T_WHITESPACE =>     
	Process token 511: T_CASE => case
	Process token 512: T_WHITESPACE =>  
	Process token 513: T_CONSTANT_ENCAPSED_STRING => 'string'
	Process token 514: T_COLON => :
	Process token 515: T_WHITESPACE => \n
	Process token 516: T_WHITESPACE =>         
	Process token 517: T_STRING => varStr
	Process token 518: T_WHITESPACE =>  
	Process token 519: T_EQUAL => =
	Process token 520: T_WHITESPACE =>  
	Process token 521: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 522: T_SEMICOLON => ;
	Process token 523: T_WHITESPACE => \n
	Process token 524: T_WHITESPACE => \n
	Process token 525: T_WHITESPACE =>     
	Process token 526: T_DEFAULT => default
	Process token 527: T_COLON => :
	Process token 528: T_WHITESPACE => \n
	Process token 529: T_WHITESPACE =>     
	Process token 530: T_BREAK => break
	Process token 531: T_SEMICOLON => ;
	Process token 532: T_WHITESPACE => \n
	Process token 533: T_CLOSE_CURLY_BRACKET => }
	Process token 534: T_WHITESPACE => \n
	Process token 535: T_WHITESPACE => \n
	Process token 536: T_COMMENT => // Break problems\n
	Process token 537: T_SWITCH => switch
	Process token 538: T_WHITESPACE =>  
	Process token 539: T_OPEN_PARENTHESIS => (
	Process token 540: T_STRING => condition
	Process token 541: T_CLOSE_PARENTHESIS => )
	Process token 542: T_WHITESPACE =>  
	Process token 543: T_OPEN_CURLY_BRACKET => {
	Process token 544: T_WHITESPACE => \n
	Process token 545: T_WHITESPACE =>     
	Process token 546: T_CASE => case
	Process token 547: T_WHITESPACE =>  
	Process token 548: T_CONSTANT_ENCAPSED_STRING => 'string'
	Process token 549: T_COLON => :
	Process token 550: T_WHITESPACE => \n
	Process token 551: T_WHITESPACE => \n
	Process token 552: T_WHITESPACE => \n
	Process token 553: T_WHITESPACE =>         
	Process token 554: T_STRING => varStr
	Process token 555: T_WHITESPACE =>  
	Process token 556: T_EQUAL => =
	Process token 557: T_WHITESPACE =>  
	Process token 558: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 559: T_SEMICOLON => ;
	Process token 560: T_WHITESPACE => \n
	Process token 561: T_WHITESPACE => \n
	Process token 562: T_WHITESPACE =>     
	Process token 563: T_BREAK => break
	Process token 564: T_SEMICOLON => ;
	Process token 565: T_WHITESPACE => \n
	Process token 566: T_WHITESPACE => \n
	Process token 567: T_WHITESPACE => \n
	Process token 568: T_WHITESPACE =>     
	Process token 569: T_CASE => case
	Process token 570: T_WHITESPACE =>  
	Process token 571: T_CONSTANT_ENCAPSED_STRING => 'bool'
	Process token 572: T_COLON => :
	Process token 573: T_WHITESPACE => \n
	Process token 574: T_WHITESPACE =>         
	Process token 575: T_STRING => varStr
	Process token 576: T_WHITESPACE =>  
	Process token 577: T_EQUAL => =
	Process token 578: T_WHITESPACE =>  
	Process token 579: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 580: T_SEMICOLON => ;
	Process token 581: T_WHITESPACE => \n
	Process token 582: T_WHITESPACE => \n
	Process token 583: T_WHITESPACE => \n
	Process token 584: T_WHITESPACE =>     
	Process token 585: T_BREAK => break
	Process token 586: T_SEMICOLON => ;
	Process token 587: T_WHITESPACE => \n
	Process token 588: T_WHITESPACE =>     
	Process token 589: T_DEFAULT => default
	Process token 590: T_COLON => :
	Process token 591: T_WHITESPACE => \n
	Process token 592: T_WHITESPACE => \n
	Process token 593: T_WHITESPACE =>         
	Process token 594: T_STRING => varStr
	Process token 595: T_WHITESPACE =>  
	Process token 596: T_EQUAL => =
	Process token 597: T_WHITESPACE =>  
	Process token 598: T_CONSTANT_ENCAPSED_STRING => 'test'
	Process token 599: T_SEMICOLON => ;
	Process token 600: T_WHITESPACE => \n
	Process token 601: T_WHITESPACE =>     
	Process token 602: T_BREAK => break
	Process token 603: T_SEMICOLON => ;
	Process token 604: T_WHITESPACE => \n
	Process token 605: T_WHITESPACE => \n
	Process token 606: T_CLOSE_CURLY_BRACKET => }
	Process token 607: T_WHITESPACE => \n
	Process token 608: T_WHITESPACE => \n
	Process token 609: T_SWITCH => switch
	Process token 610: T_WHITESPACE =>  
	Process token 611: T_OPEN_PARENTHESIS => (
	Process token 612: T_VAR => var
	Process token 613: T_CLOSE_PARENTHESIS => )
	Process token 614: T_WHITESPACE =>  
	Process token 615: T_OPEN_CURLY_BRACKET => {
	Process token 616: T_WHITESPACE => \n
	Process token 617: T_WHITESPACE =>     
	Process token 618: T_CASE => case
	Process token 619: T_WHITESPACE =>  
	Process token 620: T_CONSTANT_ENCAPSED_STRING => 'one'
	Process token 621: T_COLON => :
	Process token 622: T_WHITESPACE => \n
	Process token 623: T_WHITESPACE =>     
	Process token 624: T_CASE => case
	Process token 625: T_WHITESPACE =>  
	Process token 626: T_CONSTANT_ENCAPSED_STRING => 'two'
	Process token 627: T_COLON => :
	Process token 628: T_WHITESPACE => \n
	Process token 629: T_WHITESPACE =>     
	Process token 630: T_BREAK => break
	Process token 631: T_SEMICOLON => ;
	Process token 632: T_WHITESPACE => \n
	Process token 633: T_WHITESPACE => \n
	Process token 634: T_WHITESPACE =>     
	Process token 635: T_CASE => case
	Process token 636: T_WHITESPACE =>  
	Process token 637: T_CONSTANT_ENCAPSED_STRING => 'three'
	Process token 638: T_COLON => :
	Process token 639: T_WHITESPACE => \n
	Process token 640: T_WHITESPACE =>         
	Process token 641: T_COMMENT => // Nothing to do.\n
	Process token 642: T_WHITESPACE =>     
	Process token 643: T_BREAK => break
	Process token 644: T_SEMICOLON => ;
	Process token 645: T_WHITESPACE => \n
	Process token 646: T_WHITESPACE => \n
	Process token 647: T_WHITESPACE =>     
	Process token 648: T_CASE => case
	Process token 649: T_WHITESPACE =>  
	Process token 650: T_CONSTANT_ENCAPSED_STRING => 'four'
	Process token 651: T_COLON => :
	Process token 652: T_WHITESPACE => \n
	Process token 653: T_WHITESPACE =>         
	Process token 654: T_STRING => echo
	Process token 655: T_WHITESPACE =>  
	Process token 656: T_STRING => hi
	Process token 657: T_SEMICOLON => ;
	Process token 658: T_WHITESPACE => \n
	Process token 659: T_WHITESPACE =>     
	Process token 660: T_BREAK => break
	Process token 661: T_SEMICOLON => ;
	Process token 662: T_WHITESPACE => \n
	Process token 663: T_WHITESPACE => \n
	Process token 664: T_WHITESPACE =>     
	Process token 665: T_DEFAULT => default
	Process token 666: T_COLON => :
	Process token 667: T_WHITESPACE => \n
	Process token 668: T_WHITESPACE =>         
	Process token 669: T_COMMENT => // No default.\n
	Process token 670: T_WHITESPACE =>     
	Process token 671: T_BREAK => break
	Process token 672: T_SEMICOLON => ;
	Process token 673: T_WHITESPACE => \n
	Process token 674: T_CLOSE_CURLY_BRACKET => }
	Process token 675: T_WHITESPACE => \n
	Process token 676: T_WHITESPACE => \n
	Process token 677: T_SWITCH => switch
	Process token 678: T_WHITESPACE =>  
	Process token 679: T_OPEN_PARENTHESIS => (
	Process token 680: T_VAR => var
	Process token 681: T_CLOSE_PARENTHESIS => )
	Process token 682: T_WHITESPACE =>  
	Process token 683: T_OPEN_CURLY_BRACKET => {
	Process token 684: T_WHITESPACE => \n
	Process token 685: T_WHITESPACE =>     
	Process token 686: T_CASE => case
	Process token 687: T_WHITESPACE =>  
	Process token 688: T_CONSTANT_ENCAPSED_STRING => 'one'
	Process token 689: T_COLON => :
	Process token 690: T_WHITESPACE => \n
	Process token 691: T_WHITESPACE =>         
	Process token 692: T_IF => if
	Process token 693: T_WHITESPACE =>  
	Process token 694: T_OPEN_PARENTHESIS => (
	Process token 695: T_STRING => blah
	Process token 696: T_CLOSE_PARENTHESIS => )
	Process token 697: T_WHITESPACE =>  
	Process token 698: T_OPEN_CURLY_BRACKET => {
	Process token 699: T_WHITESPACE => \n
	Process token 700: T_WHITESPACE =>         
	Process token 701: T_CLOSE_CURLY_BRACKET => }
	Process token 702: T_WHITESPACE => \n
	Process token 703: T_WHITESPACE => \n
	Process token 704: T_WHITESPACE =>     
	Process token 705: T_BREAK => break
	Process token 706: T_SEMICOLON => ;
	Process token 707: T_WHITESPACE => \n
	Process token 708: T_WHITESPACE => \n
	Process token 709: T_WHITESPACE =>     
	Process token 710: T_DEFAULT => default
	Process token 711: T_COLON => :
	Process token 712: T_WHITESPACE => \n
	Process token 713: T_WHITESPACE =>         
	Process token 714: T_COMMENT => // No default.\n
	Process token 715: T_WHITESPACE =>     
	Process token 716: T_BREAK => break
	Process token 717: T_SEMICOLON => ;
	Process token 718: T_WHITESPACE => \n
	Process token 719: T_CLOSE_CURLY_BRACKET => }
	Process token 720: T_WHITESPACE => \n
	Process token 721: T_WHITESPACE => \n
	Process token 722: T_SWITCH => switch
	Process token 723: T_WHITESPACE =>  
	Process token 724: T_OPEN_PARENTHESIS => (
	Process token 725: T_STRING => name
	Process token 726: T_CLOSE_PARENTHESIS => )
	Process token 727: T_WHITESPACE =>  
	Process token 728: T_OPEN_CURLY_BRACKET => {
	Process token 729: T_WHITESPACE => \n
	Process token 730: T_WHITESPACE =>     
	Process token 731: T_CASE => case
	Process token 732: T_WHITESPACE =>  
	Process token 733: T_CONSTANT_ENCAPSED_STRING => "1"
	Process token 734: T_COLON => :
	Process token 735: T_WHITESPACE => \n
	Process token 736: T_WHITESPACE =>         
	Process token 737: T_SWITCH => switch
	Process token 738: T_WHITESPACE =>  
	Process token 739: T_OPEN_PARENTHESIS => (
	Process token 740: T_STRING => name2
	Process token 741: T_CLOSE_PARENTHESIS => )
	Process token 742: T_WHITESPACE =>  
	Process token 743: T_OPEN_CURLY_BRACKET => {
	Process token 744: T_WHITESPACE => \n
	Process token 745: T_WHITESPACE =>             
	Process token 746: T_CASE => case
	Process token 747: T_WHITESPACE =>  
	Process token 748: T_CONSTANT_ENCAPSED_STRING => "1"
	Process token 749: T_COLON => :
	Process token 750: T_WHITESPACE => \n
	Process token 751: T_WHITESPACE =>                 
	Process token 752: T_RETURN => return
	Process token 753: T_WHITESPACE =>  
	Process token 754: T_TRUE => true
	Process token 755: T_SEMICOLON => ;
	Process token 756: T_WHITESPACE => \n
	Process token 757: T_WHITESPACE =>             
	Process token 758: T_BREAK => break
	Process token 759: T_SEMICOLON => ;
	Process token 760: T_WHITESPACE => \n
	Process token 761: T_WHITESPACE => \n
	Process token 762: T_WHITESPACE =>             
	Process token 763: T_CASE => case
	Process token 764: T_WHITESPACE =>  
	Process token 765: T_CONSTANT_ENCAPSED_STRING => "2"
	Process token 766: T_COLON => :
	Process token 767: T_WHITESPACE => \n
	Process token 768: T_WHITESPACE =>             
	Process token 769: T_RETURN => return
	Process token 770: T_WHITESPACE =>  
	Process token 771: T_TRUE => true
	Process token 772: T_SEMICOLON => ;
	Process token 773: T_WHITESPACE => \n
	Process token 774: T_WHITESPACE =>             
	Process token 775: T_BREAK => break
	Process token 776: T_SEMICOLON => ;
	Process token 777: T_WHITESPACE => \n
	Process token 778: T_WHITESPACE => \n
	Process token 779: T_WHITESPACE =>             
	Process token 780: T_DEFAULT => default
	Process token 781: T_COLON => :
	Process token 782: T_WHITESPACE => \n
	Process token 783: T_WHITESPACE =>                 
	Process token 784: T_COMMENT => // No default.\n
	Process token 785: T_WHITESPACE =>             
	Process token 786: T_BREAK => break
	Process token 787: T_SEMICOLON => ;
	Process token 788: T_WHITESPACE => \n
	Process token 789: T_WHITESPACE =>         
	Process token 790: T_CLOSE_CURLY_BRACKET => }
	Process token 791: T_WHITESPACE => \n
	Process token 792: T_WHITESPACE =>     
	Process token 793: T_BREAK => break
	Process token 794: T_SEMICOLON => ;
	Process token 795: T_WHITESPACE => \n
	Process token 796: T_WHITESPACE => \n
	Process token 797: T_WHITESPACE =>     
	Process token 798: T_CASE => case
	Process token 799: T_WHITESPACE =>  
	Process token 800: T_CONSTANT_ENCAPSED_STRING => "2"
	Process token 801: T_COLON => :
	Process token 802: T_WHITESPACE => \n
	Process token 803: T_SWITCH => switch
	Process token 804: T_WHITESPACE =>  
	Process token 805: T_OPEN_PARENTHESIS => (
	Process token 806: T_STRING => name2
	Process token 807: T_CLOSE_PARENTHESIS => )
	Process token 808: T_WHITESPACE =>  
	Process token 809: T_OPEN_CURLY_BRACKET => {
	Process token 810: T_WHITESPACE => \n
	Process token 811: T_WHITESPACE =>     
	Process token 812: T_CASE => case
	Process token 813: T_WHITESPACE =>  
	Process token 814: T_CONSTANT_ENCAPSED_STRING => "1"
	Process token 815: T_COLON => :
	Process token 816: T_WHITESPACE => \n
	Process token 817: T_WHITESPACE =>         
	Process token 818: T_RETURN => return
	Process token 819: T_WHITESPACE =>  
	Process token 820: T_TRUE => true
	Process token 821: T_SEMICOLON => ;
	Process token 822: T_WHITESPACE => \n
	Process token 823: T_WHITESPACE =>     
	Process token 824: T_BREAK => break
	Process token 825: T_SEMICOLON => ;
	Process token 826: T_WHITESPACE => \n
	Process token 827: T_WHITESPACE => \n
	Process token 828: T_WHITESPACE =>     
	Process token 829: T_CASE => case
	Process token 830: T_WHITESPACE =>  
	Process token 831: T_CONSTANT_ENCAPSED_STRING => "2"
	Process token 832: T_COLON => :
	Process token 833: T_WHITESPACE => \n
	Process token 834: T_WHITESPACE =>     
	Process token 835: T_RETURN => return
	Process token 836: T_WHITESPACE =>  
	Process token 837: T_TRUE => true
	Process token 838: T_SEMICOLON => ;
	Process token 839: T_WHITESPACE => \n
	Process token 840: T_WHITESPACE =>     
	Process token 841: T_BREAK => break
	Process token 842: T_SEMICOLON => ;
	Process token 843: T_WHITESPACE => \n
	Process token 844: T_WHITESPACE => \n
	Process token 845: T_WHITESPACE =>     
	Process token 846: T_DEFAULT => default
	Process token 847: T_COLON => :
	Process token 848: T_WHITESPACE => \n
	Process token 849: T_WHITESPACE =>         
	Process token 850: T_COMMENT => // No default.\n
	Process token 851: T_WHITESPACE =>     
	Process token 852: T_BREAK => break
	Process token 853: T_SEMICOLON => ;
	Process token 854: T_WHITESPACE => \n
	Process token 855: T_CLOSE_CURLY_BRACKET => }
	Process token 856: T_WHITESPACE => \n
	Process token 857: T_WHITESPACE =>     
	Process token 858: T_BREAK => break
	Process token 859: T_SEMICOLON => ;
	Process token 860: T_WHITESPACE => \n
	Process token 861: T_CLOSE_CURLY_BRACKET => }
	Process token 862: T_WHITESPACE => \n
	Process token 863: T_WHITESPACE => \n
	Process token 864: T_SWITCH => switch
	Process token 865: T_WHITESPACE =>  
	Process token 866: T_OPEN_PARENTHESIS => (
	Process token 867: T_STRING => name
	Process token 868: T_CLOSE_PARENTHESIS => )
	Process token 869: T_WHITESPACE =>  
	Process token 870: T_OPEN_CURLY_BRACKET => {
	Process token 871: T_WHITESPACE => \n
	Process token 872: T_WHITESPACE =>     
	Process token 873: T_CASE => case
	Process token 874: T_WHITESPACE =>  
	Process token 875: T_CONSTANT_ENCAPSED_STRING => "1"
	Process token 876: T_COLON => :
	Process token 877: T_WHITESPACE => \n
	Process token 878: T_WHITESPACE =>         
	Process token 879: T_SWITCH => switch
	Process token 880: T_WHITESPACE =>  
	Process token 881: T_OPEN_PARENTHESIS => (
	Process token 882: T_STRING => name2
	Process token 883: T_CLOSE_PARENTHESIS => )
	Process token 884: T_WHITESPACE =>  
	Process token 885: T_OPEN_CURLY_BRACKET => {
	Process token 886: T_WHITESPACE => \n
	Process token 887: T_WHITESPACE =>             
	Process token 888: T_CASE => case
	Process token 889: T_WHITESPACE =>  
	Process token 890: T_CONSTANT_ENCAPSED_STRING => "1"
	Process token 891: T_COLON => :
	Process token 892: T_WHITESPACE => \n
	Process token 893: T_WHITESPACE =>             
	Process token 894: T_RETURN => return
	Process token 895: T_WHITESPACE =>  
	Process token 896: T_TRUE => true
	Process token 897: T_SEMICOLON => ;
	Process token 898: T_WHITESPACE => \n
	Process token 899: T_WHITESPACE => \n
	Process token 900: T_WHITESPACE =>             
	Process token 901: T_DEFAULT => default
	Process token 902: T_COLON => :
	Process token 903: T_WHITESPACE => \n
	Process token 904: T_WHITESPACE =>                 
	Process token 905: T_COMMENT => // No default.\n
	Process token 906: T_WHITESPACE =>             
	Process token 907: T_BREAK => break
	Process token 908: T_SEMICOLON => ;
	Process token 909: T_WHITESPACE => \n
	Process token 910: T_WHITESPACE =>         
	Process token 911: T_CLOSE_CURLY_BRACKET => }
	Process token 912: T_WHITESPACE => \n
	Process token 913: T_WHITESPACE =>     
	Process token 914: T_BREAK => break
	Process token 915: T_SEMICOLON => ;
	Process token 916: T_WHITESPACE => \n
	Process token 917: T_WHITESPACE => \n
	Process token 918: T_WHITESPACE =>     
	Process token 919: T_DEFAULT => default
	Process token 920: T_COLON => :
	Process token 921: T_WHITESPACE => \n
	Process token 922: T_WHITESPACE =>         
	Process token 923: T_COMMENT => // No default.\n
	Process token 924: T_WHITESPACE =>     
	Process token 925: T_BREAK => break
	Process token 926: T_SEMICOLON => ;
	Process token 927: T_WHITESPACE => \n
	Process token 928: T_CLOSE_CURLY_BRACKET => }
	Process token 929: T_WHITESPACE => \n
	Process token 930: T_WHITESPACE => \n
	Process token 931: T_SWITCH => switch
	Process token 932: T_WHITESPACE =>  
	Process token 933: T_OPEN_PARENTHESIS => (
	Process token 934: T_STRING => name2
	Process token 935: T_CLOSE_PARENTHESIS => )
	Process token 936: T_WHITESPACE =>  
	Process token 937: T_OPEN_CURLY_BRACKET => {
	Process token 938: T_WHITESPACE => \n
	Process token 939: T_WHITESPACE =>     
	Process token 940: T_DEFAULT => default
	Process token 941: T_COLON => :
	Process token 942: T_WHITESPACE => \n
	Process token 943: T_WHITESPACE =>         
	Process token 944: T_COMMENT => // No default.\n
	Process token 945: T_WHITESPACE =>     
	Process token 946: T_BREAK => break
	Process token 947: T_SEMICOLON => ;
	Process token 948: T_WHITESPACE => \n
	Process token 949: T_CLOSE_CURLY_BRACKET => }
	Process token 950: T_WHITESPACE => \n
	Process token 951: T_WHITESPACE => \n
	Process token 952: T_SWITCH => switch
	Process token 953: T_WHITESPACE =>  
	Process token 954: T_OPEN_PARENTHESIS => (
	Process token 955: T_STRING => foo
	Process token 956: T_CLOSE_PARENTHESIS => )
	Process token 957: T_WHITESPACE =>  
	Process token 958: T_OPEN_CURLY_BRACKET => {
	Process token 959: T_WHITESPACE => \n
	Process token 960: T_WHITESPACE =>     
	Process token 961: T_CASE => case
	Process token 962: T_WHITESPACE =>  
	Process token 963: T_CONSTANT_ENCAPSED_STRING => "1"
	Process token 964: T_COLON => :
	Process token 965: T_WHITESPACE => \n
	Process token 966: T_WHITESPACE =>     
	Process token 967: T_RETURN => return
	Process token 968: T_WHITESPACE =>  
	Process token 969: T_TRUE => true
	Process token 970: T_SEMICOLON => ;
	Process token 971: T_WHITESPACE => \n
	Process token 972: T_WHITESPACE => \n
	Process token 973: T_WHITESPACE =>     
	Process token 974: T_DEFAULT => default
	Process token 975: T_COLON => :
	Process token 976: T_WHITESPACE => \n
	Process token 977: T_WHITESPACE =>         
	Process token 978: T_IF => if
	Process token 979: T_WHITESPACE =>  
	Process token 980: T_OPEN_PARENTHESIS => (
	Process token 981: T_STRING => foo
	Process token 982: T_WHITESPACE =>  
	Process token 983: T_IS_IDENTICAL => ===
	Process token 984: T_WHITESPACE =>  
	Process token 985: T_FALSE => false
	Process token 986: T_CLOSE_PARENTHESIS => )
	Process token 987: T_WHITESPACE =>  
	Process token 988: T_OPEN_CURLY_BRACKET => {
	Process token 989: T_WHITESPACE => \n
	Process token 990: T_WHITESPACE =>             
	Process token 991: T_BREAK => break
	Process token 992: T_SEMICOLON => ;
	Process token 993: T_WHITESPACE => \n
	Process token 994: T_WHITESPACE =>         
	Process token 995: T_CLOSE_CURLY_BRACKET => }
	Process token 996: T_WHITESPACE => \n
	Process token 997: T_WHITESPACE =>     
	Process token 998: T_BREAK => break
	Process token 999: T_SEMICOLON => ;
	Process token 1000: T_WHITESPACE => \n
	Process token 1001: T_CLOSE_CURLY_BRACKET => }
	Process token 1002: T_WHITESPACE => \n
	Process token 1003: T_WHITESPACE => \n
	Process token 1004: T_COMMENT => // Valid SWITCH statement.\n
	Process token 1005: T_SWITCH => switch
	Process token 1006: T_WHITESPACE =>  
	Process token 1007: T_OPEN_PARENTHESIS => (
	Process token 1008: T_STRING => something
	Process token 1009: T_CLOSE_PARENTHESIS => )
	Process token 1010: T_WHITESPACE =>  
	Process token 1011: T_OPEN_CURLY_BRACKET => {
	Process token 1012: T_WHITESPACE => \n
	Process token 1013: T_WHITESPACE =>     
	Process token 1014: T_CASE => case
	Process token 1015: T_WHITESPACE =>  
	Process token 1016: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1017: T_COLON => :
	Process token 1018: T_WHITESPACE => \n
	Process token 1019: T_WHITESPACE =>         
	Process token 1020: T_STRING => myvar
	Process token 1021: T_WHITESPACE =>  
	Process token 1022: T_EQUAL => =
	Process token 1023: T_WHITESPACE =>  
	Process token 1024: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1025: T_SEMICOLON => ;
	Process token 1026: T_WHITESPACE => \n
	Process token 1027: T_WHITESPACE =>     
	Process token 1028: T_RETURN => return
	Process token 1029: T_WHITESPACE =>  
	Process token 1030: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1031: T_SEMICOLON => ;
	Process token 1032: T_WHITESPACE => \n
	Process token 1033: T_WHITESPACE => \n
	Process token 1034: T_WHITESPACE =>     
	Process token 1035: T_CASE => case
	Process token 1036: T_WHITESPACE =>  
	Process token 1037: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 1038: T_COLON => :
	Process token 1039: T_WHITESPACE => \n
	Process token 1040: T_WHITESPACE =>     
	Process token 1041: T_CASE => case
	Process token 1042: T_WHITESPACE =>  
	Process token 1043: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 1044: T_COLON => :
	Process token 1045: T_WHITESPACE => \n
	Process token 1046: T_WHITESPACE =>         
	Process token 1047: T_STRING => myvar
	Process token 1048: T_WHITESPACE =>  
	Process token 1049: T_EQUAL => =
	Process token 1050: T_WHITESPACE =>  
	Process token 1051: T_CONSTANT_ENCAPSED_STRING => '5'
	Process token 1052: T_SEMICOLON => ;
	Process token 1053: T_WHITESPACE => \n
	Process token 1054: T_WHITESPACE =>     
	Process token 1055: T_RETURN => return
	Process token 1056: T_WHITESPACE =>  
	Process token 1057: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 1058: T_SEMICOLON => ;
	Process token 1059: T_WHITESPACE => \n
	Process token 1060: T_WHITESPACE => \n
	Process token 1061: T_WHITESPACE =>     
	Process token 1062: T_CASE => case
	Process token 1063: T_WHITESPACE =>  
	Process token 1064: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 1065: T_COLON => :
	Process token 1066: T_WHITESPACE => \n
	Process token 1067: T_WHITESPACE =>         
	Process token 1068: T_STRING => myvar
	Process token 1069: T_WHITESPACE =>  
	Process token 1070: T_EQUAL => =
	Process token 1071: T_WHITESPACE =>  
	Process token 1072: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 1073: T_SEMICOLON => ;
	Process token 1074: T_WHITESPACE => \n
	Process token 1075: T_WHITESPACE =>     
	Process token 1076: T_RETURN => return
	Process token 1077: T_WHITESPACE =>  
	Process token 1078: T_CONSTANT_ENCAPSED_STRING => '3'
	Process token 1079: T_SEMICOLON => ;
	Process token 1080: T_WHITESPACE => \n
	Process token 1081: T_WHITESPACE => \n
	Process token 1082: T_WHITESPACE =>     
	Process token 1083: T_DEFAULT => default
	Process token 1084: T_COLON => :
	Process token 1085: T_WHITESPACE => \n
	Process token 1086: T_WHITESPACE =>         
	Process token 1087: T_STRING => myvar
	Process token 1088: T_WHITESPACE =>  
	Process token 1089: T_EQUAL => =
	Process token 1090: T_WHITESPACE =>  
	Process token 1091: T_NULL => null
	Process token 1092: T_SEMICOLON => ;
	Process token 1093: T_WHITESPACE => \n
	Process token 1094: T_WHITESPACE =>     
	Process token 1095: T_RETURN => return
	Process token 1096: T_WHITESPACE =>  
	Process token 1097: T_CONSTANT_ENCAPSED_STRING => '4'
	Process token 1098: T_SEMICOLON => ;
	Process token 1099: T_WHITESPACE => \n
	Process token 1100: T_CLOSE_CURLY_BRACKET => }
	Process token 1101: T_WHITESPACE => \n
	Process token 1102: T_WHITESPACE => \n
	Process token 1103: T_SWITCH => switch
	Process token 1104: T_WHITESPACE =>  
	Process token 1105: T_OPEN_PARENTHESIS => (
	Process token 1106: T_STRING => something
	Process token 1107: T_CLOSE_PARENTHESIS => )
	Process token 1108: T_WHITESPACE =>  
	Process token 1109: T_OPEN_CURLY_BRACKET => {
	Process token 1110: T_WHITESPACE => \n
	Process token 1111: T_WHITESPACE =>     
	Process token 1112: T_CASE => case
	Process token 1113: T_WHITESPACE =>  
	Process token 1114: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1115: T_COLON => :
	Process token 1116: T_WHITESPACE => \n
	Process token 1117: T_WHITESPACE =>         
	Process token 1118: T_STRING => myvar
	Process token 1119: T_WHITESPACE =>  
	Process token 1120: T_EQUAL => =
	Process token 1121: T_WHITESPACE =>  
	Process token 1122: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1123: T_SEMICOLON => ;
	Process token 1124: T_WHITESPACE => \n
	Process token 1125: T_WHITESPACE =>     
	Process token 1126: T_BREAK => break
	Process token 1127: T_SEMICOLON => ;
	Process token 1128: T_WHITESPACE => \n
	Process token 1129: T_WHITESPACE => \n
	Process token 1130: T_WHITESPACE =>     
	Process token 1131: T_CASE => case
	Process token 1132: T_WHITESPACE =>  
	Process token 1133: T_CONSTANT_ENCAPSED_STRING => '2'
	Process token 1134: T_COLON => :
	Process token 1135: T_WHITESPACE => \n
	Process token 1136: T_WHITESPACE =>         
	Process token 1137: T_THROW => throw
	Process token 1138: T_WHITESPACE =>  
	Process token 1139: T_CONSTANT_ENCAPSED_STRING => 'message'
	Process token 1140: T_SEMICOLON => ;
	Process token 1141: T_WHITESPACE => \n
	Process token 1142: T_WHITESPACE => \n
	Process token 1143: T_WHITESPACE =>     
	Process token 1144: T_DEFAULT => default
	Process token 1145: T_COLON => :
	Process token 1146: T_WHITESPACE => \n
	Process token 1147: T_WHITESPACE =>     
	Process token 1148: T_THROW => throw
	Process token 1149: T_WHITESPACE =>  
	Process token 1150: T_CONSTANT_ENCAPSED_STRING => 'message'
	Process token 1151: T_SEMICOLON => ;
	Process token 1152: T_WHITESPACE => \n
	Process token 1153: T_CLOSE_CURLY_BRACKET => }
	Process token 1154: T_WHITESPACE => \n
	Process token 1155: T_WHITESPACE => \n
	Process token 1156: T_SWITCH => switch
	Process token 1157: T_WHITESPACE =>  
	Process token 1158: T_OPEN_PARENTHESIS => (
	Process token 1159: T_STRING => something
	Process token 1160: T_CLOSE_PARENTHESIS => )
	Process token 1161: T_WHITESPACE =>  
	Process token 1162: T_OPEN_CURLY_BRACKET => {
	Process token 1163: T_WHITESPACE => \n
	Process token 1164: T_WHITESPACE =>     
	Process token 1165: T_CASE => case
	Process token 1166: T_WHITESPACE =>  
	Process token 1167: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1168: T_SEMICOLON => ;
	Process token 1169: T_WHITESPACE => \n
	Process token 1170: T_WHITESPACE =>         
	Process token 1171: T_STRING => print
	Process token 1172: T_OPEN_PARENTHESIS => (
	Process token 1173: T_CONSTANT_ENCAPSED_STRING => 'one'
	Process token 1174: T_CLOSE_PARENTHESIS => )
	Process token 1175: T_SEMICOLON => ;
	Process token 1176: T_WHITESPACE => \n
	Process token 1177: T_WHITESPACE =>     
	Process token 1178: T_BREAK => break
	Process token 1179: T_SEMICOLON => ;
	Process token 1180: T_WHITESPACE => \n
	Process token 1181: T_WHITESPACE => \n
	Process token 1182: T_WHITESPACE =>     
	Process token 1183: T_DEFAULT => default
	Process token 1184: T_COLON => :
	Process token 1185: T_WHITESPACE => \n
	Process token 1186: T_WHITESPACE =>         
	Process token 1187: T_STRING => print
	Process token 1188: T_OPEN_PARENTHESIS => (
	Process token 1189: T_CONSTANT_ENCAPSED_STRING => 'default'
	Process token 1190: T_CLOSE_PARENTHESIS => )
	Process token 1191: T_SEMICOLON => ;
	Process token 1192: T_WHITESPACE => \n
	Process token 1193: T_WHITESPACE =>     
	Process token 1194: T_RETURN => return
	Process token 1195: T_SEMICOLON => ;
	Process token 1196: T_WHITESPACE => \n
	Process token 1197: T_CLOSE_CURLY_BRACKET => }
	Process token 1198: T_WHITESPACE => \n
	Process token 1199: T_WHITESPACE => \n
	Process token 1200: T_SWITCH => switch
	Process token 1201: T_WHITESPACE =>  
	Process token 1202: T_OPEN_PARENTHESIS => (
	Process token 1203: T_STRING => foo
	Process token 1204: T_CLOSE_PARENTHESIS => )
	Process token 1205: T_WHITESPACE =>  
	Process token 1206: T_OPEN_CURLY_BRACKET => {
	Process token 1207: T_WHITESPACE => \n
	Process token 1208: T_WHITESPACE =>     
	Process token 1209: T_CASE => case
	Process token 1210: T_WHITESPACE =>  
	Process token 1211: T_CONSTANT_ENCAPSED_STRING => '1'
	Process token 1212: T_COLON => :
	Process token 1213: T_WHITESPACE => \n
	Process token 1214: T_WHITESPACE =>         
	Process token 1215: T_RETURN => return
	Process token 1216: T_SEMICOLON => ;
	Process token 1217: T_WHITESPACE =>  
	Process token 1218: T_COMMENT => // comment\n
	Process token 1219: T_WHITESPACE =>     
	Process token 1220: T_BREAK => break
	Process token 1221: T_SEMICOLON => ;
	Process token 1222: T_WHITESPACE => \n
	Process token 1223: T_WHITESPACE => \n
	Process token 1224: T_CLOSE_CURLY_BRACKET => }
	Process token 1225: T_WHITESPACE => \n
	Process token 1226: T_CLOSE_TAG => 
	*** END ADDITIONAL JS PROCESSING ***
[JS => 1227 tokens in 288 lines]... 
DONE in 2.48 secs (63 fixable violations)
	=> Fixing file: 63/63 violations remaining	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff (line 117)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff (line 119) replaced token 0 (T_OPEN_TAG) "\n" => "\n"
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff (line 119) replaced token 1 (T_WHITESPACE) "\n\n" => "\n"
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff (line 119) replaced token 2 (T_WHITESPACE) "\n// Valid SWITCH statement.\n" => "// Valid SWITCH statement.\n"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff (line 122) replaced token 0 (T_OPEN_TAG) "\n" => "\n"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff (line 122) replaced token 1 (T_WHITESPACE) "\n\n" => "\n"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff (line 122) replaced token 2 (T_WHITESPACE) "\n// Valid SWITCH statement.\n" => "// Valid SWITCH statement.\n"
	=> Changeset ended: 3 changes applied
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1343) replaced token 122 (T_CASE) "case" => "    case"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1343) replaced token 146 (T_CASE) "case" => "    case"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 151 (T_WHITESPACE) "    myvar" => "        myvar"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 209 (T_WHITESPACE) "    }" => "}"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1343) replaced token 222 (T_CASE) "case" => "    case"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 227 (T_WHITESPACE) "    myvar" => "        myvar"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1343) replaced token 239 (T_CASE) "case" => "    case"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1343) replaced token 244 (T_CASE) "case" => "    case"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 249 (T_WHITESPACE) "    myvar" => "        myvar"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1343) replaced token 261 (T_CASE) "case" => "    case"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 266 (T_WHITESPACE) "    myvar" => "        myvar"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1343) replaced token 278 (T_DEFAULT) "default" => "    default"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 281 (T_WHITESPACE) "    myvar" => "        myvar"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1343) replaced token 396 (T_CASE) "case" => "    case"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 460 (T_WHITESPACE) "    }" => "}"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1343) replaced token 803 (T_SWITCH) "switch" => "        switch"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 811 (T_WHITESPACE) "    case" => "            case"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 817 (T_WHITESPACE) "        return" => "                return"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 823 (T_WHITESPACE) "    break" => "            break"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 828 (T_WHITESPACE) "    case" => "            case"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 834 (T_WHITESPACE) "    return" => "            return"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 840 (T_WHITESPACE) "    break" => "            break"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 845 (T_WHITESPACE) "    default" => "            default"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 849 (T_WHITESPACE) "        // No default.\n" => "                // No default.\n"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1346) replaced token 851 (T_WHITESPACE) "    break" => "            break"
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1343) replaced token 855 (T_CLOSE_CURLY_BRACKET) "}" => "        }"
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 172) replaced token 117 (T_WHITESPACE) "        break" => "    break"
	* token 122 has already been modified, skipping *
	* token 146 has already been modified, skipping *
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 170) replaced token 159 (T_BREAK) "break" => "    break"
	* token 222 has already been modified, skipping *
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 239 (T_CASE) "    case" => "\n    case"
		* token 239 has already been modified, skipping *
	=> Changeset failed to apply
	* token 239 has already been modified, skipping *
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 261 (T_CASE) "    case" => "\n    case"
		* token 261 has already been modified, skipping *
	=> Changeset failed to apply
	* token 244 has already been modified, skipping *
	* token 261 has already been modified, skipping *
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 278 (T_DEFAULT) "    default" => "\n    default"
		* token 278 has already been modified, skipping *
	=> Changeset failed to apply
	* token 278 has already been modified, skipping *
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 100) replaced token 381 (T_CASE) "Case" => "case"
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 146) replaced token 384 (T_WHITESPACE) " :" => ":"
	* token 396 has already been modified, skipping *
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 130) replaced token 397 (T_WHITESPACE) "  '2'" => " '2'"
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 130) replaced token 403 (T_WHITESPACE) "  '3'" => " '3'"
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 146) replaced token 405 (T_WHITESPACE) " :" => ":"
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 128) replaced token 418 (T_CASE) "case" => "case "
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 100) replaced token 432 (T_DEFAULT) "Default" => "default"
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 146) replaced token 433 (T_WHITESPACE) " :" => ":"
	PHP_CodeSniffer\Standards\Generic\Sniffs\Formatting\MultipleStatementAlignmentSniff (line 365) replaced token 438 (T_WHITESPACE) " =" => "     ="
	PHP_CodeSniffer\Standards\Generic\Sniffs\Formatting\MultipleStatementAlignmentSniff (line 365) replaced token 454 (T_WHITESPACE) " =" => "     ="
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 210) replaced token 566 (T_WHITESPACE) "\n\n" => "\n"
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 210) replaced token 567 (T_WHITESPACE) "\n    " => "    "
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 568 (T_WHITESPACE) "    case" => "\n    case"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 566 (T_WHITESPACE) "\n\n" => "\n"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 567 (T_WHITESPACE) "\n    " => "    "
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 568 (T_WHITESPACE) "    case" => "\n    case"
	=> Changeset ended: 3 changes applied
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 588 (T_WHITESPACE) "    default" => "\n    default"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 588 (T_WHITESPACE) "    default" => "\n    default"
	=> Changeset ended: 1 changes applied
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 215)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 225) replaced token 605 (T_WHITESPACE) "\n}" => "}"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 228) replaced token 605 (T_WHITESPACE) "\n}" => "}"
	=> Changeset ended: 1 changes applied
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 306)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 309) replaced token 702 (T_WHITESPACE) "\n\n" => "\n"
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 309) replaced token 703 (T_WHITESPACE) "\n    " => "    "
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 313) replaced token 701 (T_CLOSE_CURLY_BRACKET) "}" => "}\n"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 314) replaced token 702 (T_WHITESPACE) "\n\n" => "\n"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 314) replaced token 703 (T_WHITESPACE) "\n    " => "    "
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 314) replaced token 701 (T_CLOSE_CURLY_BRACKET) "}" => "}\n"
	=> Changeset ended: 3 changes applied
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 172) replaced token 751 (T_WHITESPACE) "                return" => "            return"
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 757 (T_WHITESPACE) "            break" => "\n            break"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 757 (T_WHITESPACE) "            break" => "\n            break"
	=> Changeset ended: 1 changes applied
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 774 (T_WHITESPACE) "            break" => "\n            break"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 774 (T_WHITESPACE) "            break" => "\n            break"
	=> Changeset ended: 1 changes applied
	* token 817 has already been modified, skipping *
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 823 (T_WHITESPACE) "            break" => "\n            break"
		* token 823 has already been modified, skipping *
	=> Changeset failed to apply
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 840 (T_WHITESPACE) "            break" => "\n            break"
		* token 840 has already been modified, skipping *
	=> Changeset failed to apply
	PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\LongConditionClosingCommentSniff (line 174) replaced token 861 (T_CLOSE_CURLY_BRACKET) "}" => "}//end switch"
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 172) replaced token 1136 (T_WHITESPACE) "        throw" => "    throw"
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 172) replaced token 1214 (T_WHITESPACE) "        return" => "    return"
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 1217 (T_WHITESPACE) " // comment\n" => "\n // comment\n"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 1217 (T_WHITESPACE) " // comment\n" => "\n // comment\n"
	=> Changeset ended: 1 changes applied
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 215)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 225) replaced token 1223 (T_WHITESPACE) "\n}" => "}"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ControlStructureSpacingSniff (line 228) replaced token 1223 (T_WHITESPACE) "\n}" => "}"
	=> Changeset ended: 1 changes applied
	PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\PostStatementCommentSniff (line 85) replaced token 1218 (T_COMMENT) "// comment\n" => "\n// comment\n"
                                                                                	=> Fixing file: 58/63 violations remaining [made 1 pass]... 	* fixed 58 violations, starting loop 2 *
	PHP_CodeSniffer\Standards\Generic\Sniffs\WhiteSpace\ScopeIndentSniff (line 1343) replaced token 1224 (T_COMMENT) "// comment\n" => "    // comment\n"
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 240 (T_WHITESPACE) "    case" => "\n    case"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 240 (T_WHITESPACE) "    case" => "\n    case"
	=> Changeset ended: 1 changes applied
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 264 (T_WHITESPACE) "    case" => "\n    case"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 264 (T_WHITESPACE) "    case" => "\n    case"
	=> Changeset ended: 1 changes applied
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 282 (T_WHITESPACE) "    default" => "\n    default"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 282 (T_WHITESPACE) "    default" => "\n    default"
	=> Changeset ended: 1 changes applied
	PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 172) replaced token 821 (T_WHITESPACE) "                return" => "            return"
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 827 (T_WHITESPACE) "            break" => "\n            break"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 827 (T_WHITESPACE) "            break" => "\n            break"
	=> Changeset ended: 1 changes applied
	=> Changeset started by PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 199)
		Q: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 202) replaced token 844 (T_WHITESPACE) "            break" => "\n            break"
		A: PHP_CodeSniffer\Standards\Squiz\Sniffs\ControlStructures\SwitchDeclarationSniff (line 213) replaced token 844 (T_WHITESPACE) "            break" => "\n            break"
	=> Changeset ended: 1 changes applied
	**** PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff (line 211) has possible conflict with another sniff on loop 0; caused by the following change ****
	**** replaced token 1223 (T_WHITESPACE) " \n    // comment\n" => "\n    // comment\n" ****
	**** ignoring all changes until next loop ****
                                                                                	=> Fixing file: 7/63 violations remaining [made 2 passes]... 	* fixed 7 violations, starting loop 3 *
	PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff (line 211) replaced token 1228 (T_WHITESPACE) " \n    " => "\n    "
                                                                                	=> Fixing file: 1/63 violations remaining [made 3 passes]... 	* fixed 1 violations, starting loop 4 *
                                                                                	=> Fixing file: 0/63 violations remaining [made 4 passes]... DONE in 2.49 secs
	=> Fixed file written to SwitchDeclarationUnitTest.js.squiz-fixed

PHPCBF RESULT SUMMARY
------------------------------------------------------------------------------------------
FILE                                                                      FIXED  REMAINING
------------------------------------------------------------------------------------------
...\Standards\Squiz\Tests\ControlStructures\SwitchDeclarationUnitTest.js  63     21
------------------------------------------------------------------------------------------
A TOTAL OF 63 ERRORS WERE FIXED IN 1 FILE
------------------------------------------------------------------------------------------

Time: 6.14 secs; Memory: 10MB


